// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proio/model/lcio/lcio.proto

#ifndef PROTOBUF_proio_2fmodel_2flcio_2flcio_2eproto__INCLUDED
#define PROTOBUF_proio_2fmodel_2flcio_2flcio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proio/model/proio.pb.h"
// @@protoc_insertion_point(includes)
namespace proio {
namespace model {
namespace lcio {
class CalorimeterHit;
class CalorimeterHitDefaultTypeInternal;
extern CalorimeterHitDefaultTypeInternal _CalorimeterHit_default_instance_;
class CalorimeterHitCollection;
class CalorimeterHitCollectionDefaultTypeInternal;
extern CalorimeterHitCollectionDefaultTypeInternal _CalorimeterHitCollection_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterCollection;
class ClusterCollectionDefaultTypeInternal;
extern ClusterCollectionDefaultTypeInternal _ClusterCollection_default_instance_;
class MCParticle;
class MCParticleDefaultTypeInternal;
extern MCParticleDefaultTypeInternal _MCParticle_default_instance_;
class MCParticleCollection;
class MCParticleCollectionDefaultTypeInternal;
extern MCParticleCollectionDefaultTypeInternal _MCParticleCollection_default_instance_;
class ParticleID;
class ParticleIDDefaultTypeInternal;
extern ParticleIDDefaultTypeInternal _ParticleID_default_instance_;
class RawCalorimeterHit;
class RawCalorimeterHitDefaultTypeInternal;
extern RawCalorimeterHitDefaultTypeInternal _RawCalorimeterHit_default_instance_;
class RawCalorimeterHitCollection;
class RawCalorimeterHitCollectionDefaultTypeInternal;
extern RawCalorimeterHitCollectionDefaultTypeInternal _RawCalorimeterHitCollection_default_instance_;
class RecParticle;
class RecParticleDefaultTypeInternal;
extern RecParticleDefaultTypeInternal _RecParticle_default_instance_;
class RecParticleCollection;
class RecParticleCollectionDefaultTypeInternal;
extern RecParticleCollectionDefaultTypeInternal _RecParticleCollection_default_instance_;
class Relation;
class RelationDefaultTypeInternal;
extern RelationDefaultTypeInternal _Relation_default_instance_;
class RelationCollection;
class RelationCollectionDefaultTypeInternal;
extern RelationCollectionDefaultTypeInternal _RelationCollection_default_instance_;
class SimCalorimeterHit;
class SimCalorimeterHitDefaultTypeInternal;
extern SimCalorimeterHitDefaultTypeInternal _SimCalorimeterHit_default_instance_;
class SimCalorimeterHitCollection;
class SimCalorimeterHitCollectionDefaultTypeInternal;
extern SimCalorimeterHitCollectionDefaultTypeInternal _SimCalorimeterHitCollection_default_instance_;
class SimCalorimeterHit_Contrib;
class SimCalorimeterHit_ContribDefaultTypeInternal;
extern SimCalorimeterHit_ContribDefaultTypeInternal _SimCalorimeterHit_Contrib_default_instance_;
class SimTrackerHit;
class SimTrackerHitDefaultTypeInternal;
extern SimTrackerHitDefaultTypeInternal _SimTrackerHit_default_instance_;
class SimTrackerHitCollection;
class SimTrackerHitCollectionDefaultTypeInternal;
extern SimTrackerHitCollectionDefaultTypeInternal _SimTrackerHitCollection_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
class TrackCollection;
class TrackCollectionDefaultTypeInternal;
extern TrackCollectionDefaultTypeInternal _TrackCollection_default_instance_;
class Track_TrackState;
class Track_TrackStateDefaultTypeInternal;
extern Track_TrackStateDefaultTypeInternal _Track_TrackState_default_instance_;
class TrackerData;
class TrackerDataDefaultTypeInternal;
extern TrackerDataDefaultTypeInternal _TrackerData_default_instance_;
class TrackerDataCollection;
class TrackerDataCollectionDefaultTypeInternal;
extern TrackerDataCollectionDefaultTypeInternal _TrackerDataCollection_default_instance_;
class TrackerHit;
class TrackerHitDefaultTypeInternal;
extern TrackerHitDefaultTypeInternal _TrackerHit_default_instance_;
class TrackerHitCollection;
class TrackerHitCollectionDefaultTypeInternal;
extern TrackerHitCollectionDefaultTypeInternal _TrackerHitCollection_default_instance_;
class TrackerHitPlane;
class TrackerHitPlaneDefaultTypeInternal;
extern TrackerHitPlaneDefaultTypeInternal _TrackerHitPlane_default_instance_;
class TrackerHitPlaneCollection;
class TrackerHitPlaneCollectionDefaultTypeInternal;
extern TrackerHitPlaneCollectionDefaultTypeInternal _TrackerHitPlaneCollection_default_instance_;
class TrackerHitZCylinder;
class TrackerHitZCylinderDefaultTypeInternal;
extern TrackerHitZCylinderDefaultTypeInternal _TrackerHitZCylinder_default_instance_;
class TrackerHitZCylinderCollection;
class TrackerHitZCylinderCollectionDefaultTypeInternal;
extern TrackerHitZCylinderCollectionDefaultTypeInternal _TrackerHitZCylinderCollection_default_instance_;
class TrackerPulse;
class TrackerPulseDefaultTypeInternal;
extern TrackerPulseDefaultTypeInternal _TrackerPulse_default_instance_;
class TrackerPulseCollection;
class TrackerPulseCollectionDefaultTypeInternal;
extern TrackerPulseCollectionDefaultTypeInternal _TrackerPulseCollection_default_instance_;
class TrackerRawData;
class TrackerRawDataDefaultTypeInternal;
extern TrackerRawDataDefaultTypeInternal _TrackerRawData_default_instance_;
class TrackerRawDataCollection;
class TrackerRawDataCollectionDefaultTypeInternal;
extern TrackerRawDataCollectionDefaultTypeInternal _TrackerRawDataCollection_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
class VertexCollection;
class VertexCollectionDefaultTypeInternal;
extern VertexCollectionDefaultTypeInternal _VertexCollection_default_instance_;
}  // namespace lcio
}  // namespace model
}  // namespace proio

namespace proio {
namespace model {
namespace lcio {

namespace protobuf_proio_2fmodel_2flcio_2flcio_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proio_2fmodel_2flcio_2flcio_2eproto

// ===================================================================

class ParticleID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.ParticleID) */ {
 public:
  ParticleID();
  virtual ~ParticleID();

  ParticleID(const ParticleID& from);

  inline ParticleID& operator=(const ParticleID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParticleID(ParticleID&& from) noexcept
    : ParticleID() {
    *this = ::std::move(from);
  }

  inline ParticleID& operator=(ParticleID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticleID& default_instance();

  static inline const ParticleID* internal_default_instance() {
    return reinterpret_cast<const ParticleID*>(
               &_ParticleID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ParticleID* other);
  friend void swap(ParticleID& a, ParticleID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParticleID* New() const PROTOBUF_FINAL { return New(NULL); }

  ParticleID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParticleID& from);
  void MergeFrom(const ParticleID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParticleID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float params = 5;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 5;
  float params(int index) const;
  void set_params(int index, float value);
  void add_params(float value);
  const ::google::protobuf::RepeatedField< float >&
      params() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_params();

  // float likelihood = 1;
  void clear_likelihood();
  static const int kLikelihoodFieldNumber = 1;
  float likelihood() const;
  void set_likelihood(float value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 PDG = 3;
  void clear_pdg();
  static const int kPDGFieldNumber = 3;
  ::google::protobuf::int32 pdg() const;
  void set_pdg(::google::protobuf::int32 value);

  // int32 algType = 4;
  void clear_algtype();
  static const int kAlgTypeFieldNumber = 4;
  ::google::protobuf::int32 algtype() const;
  void set_algtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.ParticleID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > params_;
  mutable int _params_cached_byte_size_;
  float likelihood_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 pdg_;
  ::google::protobuf::int32 algtype_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.MCParticle) */ {
 public:
  MCParticle();
  virtual ~MCParticle();

  MCParticle(const MCParticle& from);

  inline MCParticle& operator=(const MCParticle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MCParticle(MCParticle&& from) noexcept
    : MCParticle() {
    *this = ::std::move(from);
  }

  inline MCParticle& operator=(MCParticle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MCParticle& default_instance();

  static inline const MCParticle* internal_default_instance() {
    return reinterpret_cast<const MCParticle*>(
               &_MCParticle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MCParticle* other);
  friend void swap(MCParticle& a, MCParticle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MCParticle* New() const PROTOBUF_FINAL { return New(NULL); }

  MCParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MCParticle& from);
  void MergeFrom(const MCParticle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MCParticle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.Reference parents = 2;
  int parents_size() const;
  void clear_parents();
  static const int kParentsFieldNumber = 2;
  const ::proio::model::Reference& parents(int index) const;
  ::proio::model::Reference* mutable_parents(int index);
  ::proio::model::Reference* add_parents();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_parents();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      parents() const;

  // repeated .proio.model.Reference children = 3;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 3;
  const ::proio::model::Reference& children(int index) const;
  ::proio::model::Reference* mutable_children(int index);
  ::proio::model::Reference* add_children();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      children() const;

  // repeated double vertex = 5;
  int vertex_size() const;
  void clear_vertex();
  static const int kVertexFieldNumber = 5;
  double vertex(int index) const;
  void set_vertex(int index, double value);
  void add_vertex(double value);
  const ::google::protobuf::RepeatedField< double >&
      vertex() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vertex();

  // repeated double p = 7;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 7;
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::google::protobuf::RepeatedField< double >&
      p() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_p();

  // repeated double PEndPoint = 10;
  int pendpoint_size() const;
  void clear_pendpoint();
  static const int kPEndPointFieldNumber = 10;
  double pendpoint(int index) const;
  void set_pendpoint(int index, double value);
  void add_pendpoint(double value);
  const ::google::protobuf::RepeatedField< double >&
      pendpoint() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pendpoint();

  // repeated float spin = 11;
  int spin_size() const;
  void clear_spin();
  static const int kSpinFieldNumber = 11;
  float spin(int index) const;
  void set_spin(int index, float value);
  void add_spin(float value);
  const ::google::protobuf::RepeatedField< float >&
      spin() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_spin();

  // repeated int32 colorFlow = 12;
  int colorflow_size() const;
  void clear_colorflow();
  static const int kColorFlowFieldNumber = 12;
  ::google::protobuf::int32 colorflow(int index) const;
  void set_colorflow(int index, ::google::protobuf::int32 value);
  void add_colorflow(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      colorflow() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_colorflow();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 PDG = 4;
  void clear_pdg();
  static const int kPDGFieldNumber = 4;
  ::google::protobuf::int32 pdg() const;
  void set_pdg(::google::protobuf::int32 value);

  // float time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  float time() const;
  void set_time(float value);

  // float charge = 9;
  void clear_charge();
  static const int kChargeFieldNumber = 9;
  float charge() const;
  void set_charge(float value);

  // double mass = 8;
  void clear_mass();
  static const int kMassFieldNumber = 8;
  double mass() const;
  void set_mass(double value);

  // int32 genStatus = 13;
  void clear_genstatus();
  static const int kGenStatusFieldNumber = 13;
  ::google::protobuf::int32 genstatus() const;
  void set_genstatus(::google::protobuf::int32 value);

  // uint32 simStatus = 14;
  void clear_simstatus();
  static const int kSimStatusFieldNumber = 14;
  ::google::protobuf::uint32 simstatus() const;
  void set_simstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.MCParticle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > parents_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > children_;
  ::google::protobuf::RepeatedField< double > vertex_;
  mutable int _vertex_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > p_;
  mutable int _p_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > pendpoint_;
  mutable int _pendpoint_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > spin_;
  mutable int _spin_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > colorflow_;
  mutable int _colorflow_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 pdg_;
  float time_;
  float charge_;
  double mass_;
  ::google::protobuf::int32 genstatus_;
  ::google::protobuf::uint32 simstatus_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticleCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.MCParticleCollection) */ {
 public:
  MCParticleCollection();
  virtual ~MCParticleCollection();

  MCParticleCollection(const MCParticleCollection& from);

  inline MCParticleCollection& operator=(const MCParticleCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MCParticleCollection(MCParticleCollection&& from) noexcept
    : MCParticleCollection() {
    *this = ::std::move(from);
  }

  inline MCParticleCollection& operator=(MCParticleCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MCParticleCollection& default_instance();

  static inline const MCParticleCollection* internal_default_instance() {
    return reinterpret_cast<const MCParticleCollection*>(
               &_MCParticleCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MCParticleCollection* other);
  friend void swap(MCParticleCollection& a, MCParticleCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MCParticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  MCParticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MCParticleCollection& from);
  void MergeFrom(const MCParticleCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MCParticleCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.MCParticle entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::MCParticle& entries(int index) const;
  ::proio::model::lcio::MCParticle* mutable_entries(int index);
  ::proio::model::lcio::MCParticle* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::MCParticle >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::MCParticle >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.MCParticleCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::MCParticle > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.SimTrackerHit) */ {
 public:
  SimTrackerHit();
  virtual ~SimTrackerHit();

  SimTrackerHit(const SimTrackerHit& from);

  inline SimTrackerHit& operator=(const SimTrackerHit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimTrackerHit(SimTrackerHit&& from) noexcept
    : SimTrackerHit() {
    *this = ::std::move(from);
  }

  inline SimTrackerHit& operator=(SimTrackerHit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTrackerHit& default_instance();

  static inline const SimTrackerHit* internal_default_instance() {
    return reinterpret_cast<const SimTrackerHit*>(
               &_SimTrackerHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SimTrackerHit* other);
  friend void swap(SimTrackerHit& a, SimTrackerHit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimTrackerHit* New() const PROTOBUF_FINAL { return New(NULL); }

  SimTrackerHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimTrackerHit& from);
  void MergeFrom(const SimTrackerHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimTrackerHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 4;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // repeated float p = 8;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 8;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::google::protobuf::RepeatedField< float >&
      p() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_p();

  // .proio.model.Reference mc = 7;
  bool has_mc() const;
  void clear_mc();
  static const int kMcFieldNumber = 7;
  const ::proio::model::Reference& mc() const;
  ::proio::model::Reference* mutable_mc();
  ::proio::model::Reference* release_mc();
  void set_allocated_mc(::proio::model::Reference* mc);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float EDep = 5;
  void clear_edep();
  static const int kEDepFieldNumber = 5;
  float edep() const;
  void set_edep(float value);

  // float time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  float time() const;
  void set_time(float value);

  // float pathLength = 9;
  void clear_pathlength();
  static const int kPathLengthFieldNumber = 9;
  float pathlength() const;
  void set_pathlength(float value);

  // int32 quality = 10;
  void clear_quality();
  static const int kQualityFieldNumber = 10;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.SimTrackerHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > p_;
  mutable int _p_cached_byte_size_;
  ::proio::model::Reference* mc_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float edep_;
  float time_;
  float pathlength_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.SimTrackerHitCollection) */ {
 public:
  SimTrackerHitCollection();
  virtual ~SimTrackerHitCollection();

  SimTrackerHitCollection(const SimTrackerHitCollection& from);

  inline SimTrackerHitCollection& operator=(const SimTrackerHitCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimTrackerHitCollection(SimTrackerHitCollection&& from) noexcept
    : SimTrackerHitCollection() {
    *this = ::std::move(from);
  }

  inline SimTrackerHitCollection& operator=(SimTrackerHitCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTrackerHitCollection& default_instance();

  static inline const SimTrackerHitCollection* internal_default_instance() {
    return reinterpret_cast<const SimTrackerHitCollection*>(
               &_SimTrackerHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SimTrackerHitCollection* other);
  friend void swap(SimTrackerHitCollection& a, SimTrackerHitCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimTrackerHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  SimTrackerHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimTrackerHitCollection& from);
  void MergeFrom(const SimTrackerHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimTrackerHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.SimTrackerHit entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::SimTrackerHit& entries(int index) const;
  ::proio::model::lcio::SimTrackerHit* mutable_entries(int index);
  ::proio::model::lcio::SimTrackerHit* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimTrackerHit >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimTrackerHit >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.SimTrackerHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimTrackerHit > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerRawData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerRawData) */ {
 public:
  TrackerRawData();
  virtual ~TrackerRawData();

  TrackerRawData(const TrackerRawData& from);

  inline TrackerRawData& operator=(const TrackerRawData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerRawData(TrackerRawData&& from) noexcept
    : TrackerRawData() {
    *this = ::std::move(from);
  }

  inline TrackerRawData& operator=(TrackerRawData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerRawData& default_instance();

  static inline const TrackerRawData* internal_default_instance() {
    return reinterpret_cast<const TrackerRawData*>(
               &_TrackerRawData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TrackerRawData* other);
  friend void swap(TrackerRawData& a, TrackerRawData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerRawData* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerRawData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerRawData& from);
  void MergeFrom(const TrackerRawData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerRawData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ADCs = 5;
  int adcs_size() const;
  void clear_adcs();
  static const int kADCsFieldNumber = 5;
  ::google::protobuf::uint32 adcs(int index) const;
  void set_adcs(int index, ::google::protobuf::uint32 value);
  void add_adcs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      adcs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_adcs();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerRawData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > adcs_;
  mutable int _adcs_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 time_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerRawDataCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerRawDataCollection) */ {
 public:
  TrackerRawDataCollection();
  virtual ~TrackerRawDataCollection();

  TrackerRawDataCollection(const TrackerRawDataCollection& from);

  inline TrackerRawDataCollection& operator=(const TrackerRawDataCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerRawDataCollection(TrackerRawDataCollection&& from) noexcept
    : TrackerRawDataCollection() {
    *this = ::std::move(from);
  }

  inline TrackerRawDataCollection& operator=(TrackerRawDataCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerRawDataCollection& default_instance();

  static inline const TrackerRawDataCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerRawDataCollection*>(
               &_TrackerRawDataCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TrackerRawDataCollection* other);
  friend void swap(TrackerRawDataCollection& a, TrackerRawDataCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerRawDataCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerRawDataCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerRawDataCollection& from);
  void MergeFrom(const TrackerRawDataCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerRawDataCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.TrackerRawData entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::TrackerRawData& entries(int index) const;
  ::proio::model::lcio::TrackerRawData* mutable_entries(int index);
  ::proio::model::lcio::TrackerRawData* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerRawData >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerRawData >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerRawDataCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerRawData > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerData) */ {
 public:
  TrackerData();
  virtual ~TrackerData();

  TrackerData(const TrackerData& from);

  inline TrackerData& operator=(const TrackerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerData(TrackerData&& from) noexcept
    : TrackerData() {
    *this = ::std::move(from);
  }

  inline TrackerData& operator=(TrackerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerData& default_instance();

  static inline const TrackerData* internal_default_instance() {
    return reinterpret_cast<const TrackerData*>(
               &_TrackerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TrackerData* other);
  friend void swap(TrackerData& a, TrackerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerData* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerData& from);
  void MergeFrom(const TrackerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float charges = 5;
  int charges_size() const;
  void clear_charges();
  static const int kChargesFieldNumber = 5;
  float charges(int index) const;
  void set_charges(int index, float value);
  void add_charges(float value);
  const ::google::protobuf::RepeatedField< float >&
      charges() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_charges();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > charges_;
  mutable int _charges_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float time_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerDataCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerDataCollection) */ {
 public:
  TrackerDataCollection();
  virtual ~TrackerDataCollection();

  TrackerDataCollection(const TrackerDataCollection& from);

  inline TrackerDataCollection& operator=(const TrackerDataCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerDataCollection(TrackerDataCollection&& from) noexcept
    : TrackerDataCollection() {
    *this = ::std::move(from);
  }

  inline TrackerDataCollection& operator=(TrackerDataCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerDataCollection& default_instance();

  static inline const TrackerDataCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerDataCollection*>(
               &_TrackerDataCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TrackerDataCollection* other);
  friend void swap(TrackerDataCollection& a, TrackerDataCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerDataCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerDataCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerDataCollection& from);
  void MergeFrom(const TrackerDataCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerDataCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.TrackerData entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::TrackerData& entries(int index) const;
  ::proio::model::lcio::TrackerData* mutable_entries(int index);
  ::proio::model::lcio::TrackerData* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerData >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerData >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerDataCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerData > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerHit) */ {
 public:
  TrackerHit();
  virtual ~TrackerHit();

  TrackerHit(const TrackerHit& from);

  inline TrackerHit& operator=(const TrackerHit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerHit(TrackerHit&& from) noexcept
    : TrackerHit() {
    *this = ::std::move(from);
  }

  inline TrackerHit& operator=(TrackerHit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHit& default_instance();

  static inline const TrackerHit* internal_default_instance() {
    return reinterpret_cast<const TrackerHit*>(
               &_TrackerHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TrackerHit* other);
  friend void swap(TrackerHit& a, TrackerHit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerHit* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHit& from);
  void MergeFrom(const TrackerHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 5;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // repeated double cov = 6;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 6;
  double cov(int index) const;
  void set_cov(int index, double value);
  void add_cov(double value);
  const ::google::protobuf::RepeatedField< double >&
      cov() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_cov();

  // repeated .proio.model.Reference rawHits = 11;
  int rawhits_size() const;
  void clear_rawhits();
  static const int kRawHitsFieldNumber = 11;
  const ::proio::model::Reference& rawhits(int index) const;
  ::proio::model::Reference* mutable_rawhits(int index);
  ::proio::model::Reference* add_rawhits();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_rawhits();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      rawhits() const;

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float EDep = 7;
  void clear_edep();
  static const int kEDepFieldNumber = 7;
  float edep() const;
  void set_edep(float value);

  // float EDepErr = 8;
  void clear_edeperr();
  static const int kEDepErrFieldNumber = 8;
  float edeperr() const;
  void set_edeperr(float value);

  // float time = 9;
  void clear_time();
  static const int kTimeFieldNumber = 9;
  float time() const;
  void set_time(float value);

  // int32 quality = 10;
  void clear_quality();
  static const int kQualityFieldNumber = 10;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > rawhits_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 type_;
  float edep_;
  float edeperr_;
  float time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerHitCollection) */ {
 public:
  TrackerHitCollection();
  virtual ~TrackerHitCollection();

  TrackerHitCollection(const TrackerHitCollection& from);

  inline TrackerHitCollection& operator=(const TrackerHitCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerHitCollection(TrackerHitCollection&& from) noexcept
    : TrackerHitCollection() {
    *this = ::std::move(from);
  }

  inline TrackerHitCollection& operator=(TrackerHitCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitCollection& default_instance();

  static inline const TrackerHitCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerHitCollection*>(
               &_TrackerHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TrackerHitCollection* other);
  friend void swap(TrackerHitCollection& a, TrackerHitCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitCollection& from);
  void MergeFrom(const TrackerHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.TrackerHit entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::TrackerHit& entries(int index) const;
  ::proio::model::lcio::TrackerHit* mutable_entries(int index);
  ::proio::model::lcio::TrackerHit* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHit >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHit >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHit > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerPulse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerPulse) */ {
 public:
  TrackerPulse();
  virtual ~TrackerPulse();

  TrackerPulse(const TrackerPulse& from);

  inline TrackerPulse& operator=(const TrackerPulse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerPulse(TrackerPulse&& from) noexcept
    : TrackerPulse() {
    *this = ::std::move(from);
  }

  inline TrackerPulse& operator=(TrackerPulse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerPulse& default_instance();

  static inline const TrackerPulse* internal_default_instance() {
    return reinterpret_cast<const TrackerPulse*>(
               &_TrackerPulse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TrackerPulse* other);
  friend void swap(TrackerPulse& a, TrackerPulse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerPulse* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerPulse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerPulse& from);
  void MergeFrom(const TrackerPulse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerPulse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float cov = 6;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 6;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // .proio.model.Reference TPC = 8;
  bool has_tpc() const;
  void clear_tpc();
  static const int kTPCFieldNumber = 8;
  const ::proio::model::Reference& tpc() const;
  ::proio::model::Reference* mutable_tpc();
  ::proio::model::Reference* release_tpc();
  void set_allocated_tpc(::proio::model::Reference* tpc);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  float time() const;
  void set_time(float value);

  // float charge = 5;
  void clear_charge();
  static const int kChargeFieldNumber = 5;
  float charge() const;
  void set_charge(float value);

  // int32 quality = 7;
  void clear_quality();
  static const int kQualityFieldNumber = 7;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerPulse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::proio::model::Reference* tpc_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float time_;
  float charge_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerPulseCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerPulseCollection) */ {
 public:
  TrackerPulseCollection();
  virtual ~TrackerPulseCollection();

  TrackerPulseCollection(const TrackerPulseCollection& from);

  inline TrackerPulseCollection& operator=(const TrackerPulseCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerPulseCollection(TrackerPulseCollection&& from) noexcept
    : TrackerPulseCollection() {
    *this = ::std::move(from);
  }

  inline TrackerPulseCollection& operator=(TrackerPulseCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerPulseCollection& default_instance();

  static inline const TrackerPulseCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerPulseCollection*>(
               &_TrackerPulseCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TrackerPulseCollection* other);
  friend void swap(TrackerPulseCollection& a, TrackerPulseCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerPulseCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerPulseCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerPulseCollection& from);
  void MergeFrom(const TrackerPulseCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerPulseCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.TrackerPulse entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::TrackerPulse& entries(int index) const;
  ::proio::model::lcio::TrackerPulse* mutable_entries(int index);
  ::proio::model::lcio::TrackerPulse* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerPulse >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerPulse >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerPulseCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerPulse > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitPlane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerHitPlane) */ {
 public:
  TrackerHitPlane();
  virtual ~TrackerHitPlane();

  TrackerHitPlane(const TrackerHitPlane& from);

  inline TrackerHitPlane& operator=(const TrackerHitPlane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerHitPlane(TrackerHitPlane&& from) noexcept
    : TrackerHitPlane() {
    *this = ::std::move(from);
  }

  inline TrackerHitPlane& operator=(TrackerHitPlane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitPlane& default_instance();

  static inline const TrackerHitPlane* internal_default_instance() {
    return reinterpret_cast<const TrackerHitPlane*>(
               &_TrackerHitPlane_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(TrackerHitPlane* other);
  friend void swap(TrackerHitPlane& a, TrackerHitPlane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerHitPlane* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitPlane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitPlane& from);
  void MergeFrom(const TrackerHitPlane& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitPlane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 5;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // repeated float U = 6;
  int u_size() const;
  void clear_u();
  static const int kUFieldNumber = 6;
  float u(int index) const;
  void set_u(int index, float value);
  void add_u(float value);
  const ::google::protobuf::RepeatedField< float >&
      u() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_u();

  // repeated float V = 7;
  int v_size() const;
  void clear_v();
  static const int kVFieldNumber = 7;
  float v(int index) const;
  void set_v(int index, float value);
  void add_v(float value);
  const ::google::protobuf::RepeatedField< float >&
      v() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_v();

  // repeated .proio.model.Reference rawHits = 14;
  int rawhits_size() const;
  void clear_rawhits();
  static const int kRawHitsFieldNumber = 14;
  const ::proio::model::Reference& rawhits(int index) const;
  ::proio::model::Reference* mutable_rawhits(int index);
  ::proio::model::Reference* add_rawhits();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_rawhits();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      rawhits() const;

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float dU = 8;
  void clear_du();
  static const int kDUFieldNumber = 8;
  float du() const;
  void set_du(float value);

  // float dV = 9;
  void clear_dv();
  static const int kDVFieldNumber = 9;
  float dv() const;
  void set_dv(float value);

  // float EDep = 10;
  void clear_edep();
  static const int kEDepFieldNumber = 10;
  float edep() const;
  void set_edep(float value);

  // float EDepErr = 11;
  void clear_edeperr();
  static const int kEDepErrFieldNumber = 11;
  float edeperr() const;
  void set_edeperr(float value);

  // float time = 12;
  void clear_time();
  static const int kTimeFieldNumber = 12;
  float time() const;
  void set_time(float value);

  // int32 quality = 13;
  void clear_quality();
  static const int kQualityFieldNumber = 13;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerHitPlane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > u_;
  mutable int _u_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > v_;
  mutable int _v_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > rawhits_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 type_;
  float du_;
  float dv_;
  float edep_;
  float edeperr_;
  float time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitPlaneCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerHitPlaneCollection) */ {
 public:
  TrackerHitPlaneCollection();
  virtual ~TrackerHitPlaneCollection();

  TrackerHitPlaneCollection(const TrackerHitPlaneCollection& from);

  inline TrackerHitPlaneCollection& operator=(const TrackerHitPlaneCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerHitPlaneCollection(TrackerHitPlaneCollection&& from) noexcept
    : TrackerHitPlaneCollection() {
    *this = ::std::move(from);
  }

  inline TrackerHitPlaneCollection& operator=(TrackerHitPlaneCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitPlaneCollection& default_instance();

  static inline const TrackerHitPlaneCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerHitPlaneCollection*>(
               &_TrackerHitPlaneCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(TrackerHitPlaneCollection* other);
  friend void swap(TrackerHitPlaneCollection& a, TrackerHitPlaneCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerHitPlaneCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitPlaneCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitPlaneCollection& from);
  void MergeFrom(const TrackerHitPlaneCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitPlaneCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.TrackerHitPlane entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::TrackerHitPlane& entries(int index) const;
  ::proio::model::lcio::TrackerHitPlane* mutable_entries(int index);
  ::proio::model::lcio::TrackerHitPlane* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitPlane >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitPlane >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerHitPlaneCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitPlane > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitZCylinder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerHitZCylinder) */ {
 public:
  TrackerHitZCylinder();
  virtual ~TrackerHitZCylinder();

  TrackerHitZCylinder(const TrackerHitZCylinder& from);

  inline TrackerHitZCylinder& operator=(const TrackerHitZCylinder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerHitZCylinder(TrackerHitZCylinder&& from) noexcept
    : TrackerHitZCylinder() {
    *this = ::std::move(from);
  }

  inline TrackerHitZCylinder& operator=(TrackerHitZCylinder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitZCylinder& default_instance();

  static inline const TrackerHitZCylinder* internal_default_instance() {
    return reinterpret_cast<const TrackerHitZCylinder*>(
               &_TrackerHitZCylinder_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(TrackerHitZCylinder* other);
  friend void swap(TrackerHitZCylinder& a, TrackerHitZCylinder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerHitZCylinder* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitZCylinder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitZCylinder& from);
  void MergeFrom(const TrackerHitZCylinder& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitZCylinder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 5;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // repeated float center = 6;
  int center_size() const;
  void clear_center();
  static const int kCenterFieldNumber = 6;
  float center(int index) const;
  void set_center(int index, float value);
  void add_center(float value);
  const ::google::protobuf::RepeatedField< float >&
      center() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_center();

  // repeated .proio.model.Reference rawHits = 13;
  int rawhits_size() const;
  void clear_rawhits();
  static const int kRawHitsFieldNumber = 13;
  const ::proio::model::Reference& rawhits(int index) const;
  ::proio::model::Reference* mutable_rawhits(int index);
  ::proio::model::Reference* add_rawhits();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_rawhits();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      rawhits() const;

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float dRPhi = 7;
  void clear_drphi();
  static const int kDRPhiFieldNumber = 7;
  float drphi() const;
  void set_drphi(float value);

  // float dZ = 8;
  void clear_dz();
  static const int kDZFieldNumber = 8;
  float dz() const;
  void set_dz(float value);

  // float EDep = 9;
  void clear_edep();
  static const int kEDepFieldNumber = 9;
  float edep() const;
  void set_edep(float value);

  // float EDepErr = 10;
  void clear_edeperr();
  static const int kEDepErrFieldNumber = 10;
  float edeperr() const;
  void set_edeperr(float value);

  // float time = 11;
  void clear_time();
  static const int kTimeFieldNumber = 11;
  float time() const;
  void set_time(float value);

  // int32 quality = 12;
  void clear_quality();
  static const int kQualityFieldNumber = 12;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerHitZCylinder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > center_;
  mutable int _center_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > rawhits_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 type_;
  float drphi_;
  float dz_;
  float edep_;
  float edeperr_;
  float time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitZCylinderCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackerHitZCylinderCollection) */ {
 public:
  TrackerHitZCylinderCollection();
  virtual ~TrackerHitZCylinderCollection();

  TrackerHitZCylinderCollection(const TrackerHitZCylinderCollection& from);

  inline TrackerHitZCylinderCollection& operator=(const TrackerHitZCylinderCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerHitZCylinderCollection(TrackerHitZCylinderCollection&& from) noexcept
    : TrackerHitZCylinderCollection() {
    *this = ::std::move(from);
  }

  inline TrackerHitZCylinderCollection& operator=(TrackerHitZCylinderCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitZCylinderCollection& default_instance();

  static inline const TrackerHitZCylinderCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerHitZCylinderCollection*>(
               &_TrackerHitZCylinderCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(TrackerHitZCylinderCollection* other);
  friend void swap(TrackerHitZCylinderCollection& a, TrackerHitZCylinderCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerHitZCylinderCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitZCylinderCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitZCylinderCollection& from);
  void MergeFrom(const TrackerHitZCylinderCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitZCylinderCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.TrackerHitZCylinder entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::TrackerHitZCylinder& entries(int index) const;
  ::proio::model::lcio::TrackerHitZCylinder* mutable_entries(int index);
  ::proio::model::lcio::TrackerHitZCylinder* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitZCylinder >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitZCylinder >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackerHitZCylinderCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitZCylinder > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Track_TrackState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.Track.TrackState) */ {
 public:
  Track_TrackState();
  virtual ~Track_TrackState();

  Track_TrackState(const Track_TrackState& from);

  inline Track_TrackState& operator=(const Track_TrackState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Track_TrackState(Track_TrackState&& from) noexcept
    : Track_TrackState() {
    *this = ::std::move(from);
  }

  inline Track_TrackState& operator=(Track_TrackState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Track_TrackState& default_instance();

  static inline const Track_TrackState* internal_default_instance() {
    return reinterpret_cast<const Track_TrackState*>(
               &_Track_TrackState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Track_TrackState* other);
  friend void swap(Track_TrackState& a, Track_TrackState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Track_TrackState* New() const PROTOBUF_FINAL { return New(NULL); }

  Track_TrackState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Track_TrackState& from);
  void MergeFrom(const Track_TrackState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Track_TrackState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float cov = 7;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 7;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // repeated float ref = 8;
  int ref_size() const;
  void clear_ref();
  static const int kRefFieldNumber = 8;
  float ref(int index) const;
  void set_ref(int index, float value);
  void add_ref(float value);
  const ::google::protobuf::RepeatedField< float >&
      ref() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ref();

  // int32 loc = 1;
  void clear_loc();
  static const int kLocFieldNumber = 1;
  ::google::protobuf::int32 loc() const;
  void set_loc(::google::protobuf::int32 value);

  // float d0 = 2;
  void clear_d0();
  static const int kD0FieldNumber = 2;
  float d0() const;
  void set_d0(float value);

  // float phi = 3;
  void clear_phi();
  static const int kPhiFieldNumber = 3;
  float phi() const;
  void set_phi(float value);

  // float omega = 4;
  void clear_omega();
  static const int kOmegaFieldNumber = 4;
  float omega() const;
  void set_omega(float value);

  // float z0 = 5;
  void clear_z0();
  static const int kZ0FieldNumber = 5;
  float z0() const;
  void set_z0(float value);

  // float tanL = 6;
  void clear_tanl();
  static const int kTanLFieldNumber = 6;
  float tanl() const;
  void set_tanl(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.Track.TrackState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ref_;
  mutable int _ref_cached_byte_size_;
  ::google::protobuf::int32 loc_;
  float d0_;
  float phi_;
  float omega_;
  float z0_;
  float tanl_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Track : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();

  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Track* other);
  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const PROTOBUF_FINAL { return New(NULL); }

  Track* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Track* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Track_TrackState TrackState;

  // accessors -------------------------------------------------------

  // repeated int32 subDetHits = 8;
  int subdethits_size() const;
  void clear_subdethits();
  static const int kSubDetHitsFieldNumber = 8;
  ::google::protobuf::int32 subdethits(int index) const;
  void set_subdethits(int index, ::google::protobuf::int32 value);
  void add_subdethits(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      subdethits() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_subdethits();

  // repeated .proio.model.lcio.Track.TrackState states = 9;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 9;
  const ::proio::model::lcio::Track_TrackState& states(int index) const;
  ::proio::model::lcio::Track_TrackState* mutable_states(int index);
  ::proio::model::lcio::Track_TrackState* add_states();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track_TrackState >*
      mutable_states();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track_TrackState >&
      states() const;

  // repeated .proio.model.Reference hits = 10;
  int hits_size() const;
  void clear_hits();
  static const int kHitsFieldNumber = 10;
  const ::proio::model::Reference& hits(int index) const;
  ::proio::model::Reference* mutable_hits(int index);
  ::proio::model::Reference* add_hits();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_hits();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      hits() const;

  // repeated .proio.model.Reference tracks = 11;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 11;
  const ::proio::model::Reference& tracks(int index) const;
  ::proio::model::Reference* mutable_tracks(int index);
  ::proio::model::Reference* add_tracks();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_tracks();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      tracks() const;

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float chi2 = 3;
  void clear_chi2();
  static const int kChi2FieldNumber = 3;
  float chi2() const;
  void set_chi2(float value);

  // int32 NDF = 4;
  void clear_ndf();
  static const int kNDFFieldNumber = 4;
  ::google::protobuf::int32 ndf() const;
  void set_ndf(::google::protobuf::int32 value);

  // float dEdx = 5;
  void clear_dedx();
  static const int kDEdxFieldNumber = 5;
  float dedx() const;
  void set_dedx(float value);

  // float dEdxErr = 6;
  void clear_dedxerr();
  static const int kDEdxErrFieldNumber = 6;
  float dedxerr() const;
  void set_dedxerr(float value);

  // float radius = 7;
  void clear_radius();
  static const int kRadiusFieldNumber = 7;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.Track)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > subdethits_;
  mutable int _subdethits_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track_TrackState > states_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > hits_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > tracks_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 type_;
  float chi2_;
  ::google::protobuf::int32 ndf_;
  float dedx_;
  float dedxerr_;
  float radius_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.TrackCollection) */ {
 public:
  TrackCollection();
  virtual ~TrackCollection();

  TrackCollection(const TrackCollection& from);

  inline TrackCollection& operator=(const TrackCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackCollection(TrackCollection&& from) noexcept
    : TrackCollection() {
    *this = ::std::move(from);
  }

  inline TrackCollection& operator=(TrackCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackCollection& default_instance();

  static inline const TrackCollection* internal_default_instance() {
    return reinterpret_cast<const TrackCollection*>(
               &_TrackCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(TrackCollection* other);
  friend void swap(TrackCollection& a, TrackCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackCollection& from);
  void MergeFrom(const TrackCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.Track entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::Track& entries(int index) const;
  ::proio::model::lcio::Track* mutable_entries(int index);
  ::proio::model::lcio::Track* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.TrackCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHit_Contrib : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.SimCalorimeterHit.Contrib) */ {
 public:
  SimCalorimeterHit_Contrib();
  virtual ~SimCalorimeterHit_Contrib();

  SimCalorimeterHit_Contrib(const SimCalorimeterHit_Contrib& from);

  inline SimCalorimeterHit_Contrib& operator=(const SimCalorimeterHit_Contrib& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimCalorimeterHit_Contrib(SimCalorimeterHit_Contrib&& from) noexcept
    : SimCalorimeterHit_Contrib() {
    *this = ::std::move(from);
  }

  inline SimCalorimeterHit_Contrib& operator=(SimCalorimeterHit_Contrib&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCalorimeterHit_Contrib& default_instance();

  static inline const SimCalorimeterHit_Contrib* internal_default_instance() {
    return reinterpret_cast<const SimCalorimeterHit_Contrib*>(
               &_SimCalorimeterHit_Contrib_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(SimCalorimeterHit_Contrib* other);
  friend void swap(SimCalorimeterHit_Contrib& a, SimCalorimeterHit_Contrib& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimCalorimeterHit_Contrib* New() const PROTOBUF_FINAL { return New(NULL); }

  SimCalorimeterHit_Contrib* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimCalorimeterHit_Contrib& from);
  void MergeFrom(const SimCalorimeterHit_Contrib& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimCalorimeterHit_Contrib* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float stepPos = 5;
  int steppos_size() const;
  void clear_steppos();
  static const int kStepPosFieldNumber = 5;
  float steppos(int index) const;
  void set_steppos(int index, float value);
  void add_steppos(float value);
  const ::google::protobuf::RepeatedField< float >&
      steppos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_steppos();

  // .proio.model.Reference MCParticle = 1;
  bool has_mcparticle() const;
  void clear_mcparticle();
  static const int kMCParticleFieldNumber = 1;
  const ::proio::model::Reference& mcparticle() const;
  ::proio::model::Reference* mutable_mcparticle();
  ::proio::model::Reference* release_mcparticle();
  void set_allocated_mcparticle(::proio::model::Reference* mcparticle);

  // float energy = 2;
  void clear_energy();
  static const int kEnergyFieldNumber = 2;
  float energy() const;
  void set_energy(float value);

  // float time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  float time() const;
  void set_time(float value);

  // int32 PDG = 4;
  void clear_pdg();
  static const int kPDGFieldNumber = 4;
  ::google::protobuf::int32 pdg() const;
  void set_pdg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.SimCalorimeterHit.Contrib)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > steppos_;
  mutable int _steppos_cached_byte_size_;
  ::proio::model::Reference* mcparticle_;
  float energy_;
  float time_;
  ::google::protobuf::int32 pdg_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.SimCalorimeterHit) */ {
 public:
  SimCalorimeterHit();
  virtual ~SimCalorimeterHit();

  SimCalorimeterHit(const SimCalorimeterHit& from);

  inline SimCalorimeterHit& operator=(const SimCalorimeterHit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimCalorimeterHit(SimCalorimeterHit&& from) noexcept
    : SimCalorimeterHit() {
    *this = ::std::move(from);
  }

  inline SimCalorimeterHit& operator=(SimCalorimeterHit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCalorimeterHit& default_instance();

  static inline const SimCalorimeterHit* internal_default_instance() {
    return reinterpret_cast<const SimCalorimeterHit*>(
               &_SimCalorimeterHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SimCalorimeterHit* other);
  friend void swap(SimCalorimeterHit& a, SimCalorimeterHit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimCalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

  SimCalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimCalorimeterHit& from);
  void MergeFrom(const SimCalorimeterHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimCalorimeterHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SimCalorimeterHit_Contrib Contrib;

  // accessors -------------------------------------------------------

  // repeated float pos = 6;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // repeated .proio.model.lcio.SimCalorimeterHit.Contrib contributions = 7;
  int contributions_size() const;
  void clear_contributions();
  static const int kContributionsFieldNumber = 7;
  const ::proio::model::lcio::SimCalorimeterHit_Contrib& contributions(int index) const;
  ::proio::model::lcio::SimCalorimeterHit_Contrib* mutable_contributions(int index);
  ::proio::model::lcio::SimCalorimeterHit_Contrib* add_contributions();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit_Contrib >*
      mutable_contributions();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit_Contrib >&
      contributions() const;

  // .proio.model.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 3;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 3;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 4;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 4;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float energy = 5;
  void clear_energy();
  static const int kEnergyFieldNumber = 5;
  float energy() const;
  void set_energy(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.SimCalorimeterHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit_Contrib > contributions_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float energy_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.SimCalorimeterHitCollection) */ {
 public:
  SimCalorimeterHitCollection();
  virtual ~SimCalorimeterHitCollection();

  SimCalorimeterHitCollection(const SimCalorimeterHitCollection& from);

  inline SimCalorimeterHitCollection& operator=(const SimCalorimeterHitCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimCalorimeterHitCollection(SimCalorimeterHitCollection&& from) noexcept
    : SimCalorimeterHitCollection() {
    *this = ::std::move(from);
  }

  inline SimCalorimeterHitCollection& operator=(SimCalorimeterHitCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCalorimeterHitCollection& default_instance();

  static inline const SimCalorimeterHitCollection* internal_default_instance() {
    return reinterpret_cast<const SimCalorimeterHitCollection*>(
               &_SimCalorimeterHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SimCalorimeterHitCollection* other);
  friend void swap(SimCalorimeterHitCollection& a, SimCalorimeterHitCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimCalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  SimCalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimCalorimeterHitCollection& from);
  void MergeFrom(const SimCalorimeterHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimCalorimeterHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.SimCalorimeterHit entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::SimCalorimeterHit& entries(int index) const;
  ::proio::model::lcio::SimCalorimeterHit* mutable_entries(int index);
  ::proio::model::lcio::SimCalorimeterHit* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.SimCalorimeterHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawCalorimeterHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.RawCalorimeterHit) */ {
 public:
  RawCalorimeterHit();
  virtual ~RawCalorimeterHit();

  RawCalorimeterHit(const RawCalorimeterHit& from);

  inline RawCalorimeterHit& operator=(const RawCalorimeterHit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RawCalorimeterHit(RawCalorimeterHit&& from) noexcept
    : RawCalorimeterHit() {
    *this = ::std::move(from);
  }

  inline RawCalorimeterHit& operator=(RawCalorimeterHit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RawCalorimeterHit& default_instance();

  static inline const RawCalorimeterHit* internal_default_instance() {
    return reinterpret_cast<const RawCalorimeterHit*>(
               &_RawCalorimeterHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(RawCalorimeterHit* other);
  friend void swap(RawCalorimeterHit& a, RawCalorimeterHit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawCalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

  RawCalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RawCalorimeterHit& from);
  void MergeFrom(const RawCalorimeterHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RawCalorimeterHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 amplitude = 4;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 4;
  ::google::protobuf::int32 amplitude() const;
  void set_amplitude(::google::protobuf::int32 value);

  // int32 timeStamp = 5;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.RawCalorimeterHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 amplitude_;
  ::google::protobuf::int32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawCalorimeterHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.RawCalorimeterHitCollection) */ {
 public:
  RawCalorimeterHitCollection();
  virtual ~RawCalorimeterHitCollection();

  RawCalorimeterHitCollection(const RawCalorimeterHitCollection& from);

  inline RawCalorimeterHitCollection& operator=(const RawCalorimeterHitCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RawCalorimeterHitCollection(RawCalorimeterHitCollection&& from) noexcept
    : RawCalorimeterHitCollection() {
    *this = ::std::move(from);
  }

  inline RawCalorimeterHitCollection& operator=(RawCalorimeterHitCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RawCalorimeterHitCollection& default_instance();

  static inline const RawCalorimeterHitCollection* internal_default_instance() {
    return reinterpret_cast<const RawCalorimeterHitCollection*>(
               &_RawCalorimeterHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(RawCalorimeterHitCollection* other);
  friend void swap(RawCalorimeterHitCollection& a, RawCalorimeterHitCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawCalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  RawCalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RawCalorimeterHitCollection& from);
  void MergeFrom(const RawCalorimeterHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RawCalorimeterHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.RawCalorimeterHit entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::RawCalorimeterHit& entries(int index) const;
  ::proio::model::lcio::RawCalorimeterHit* mutable_entries(int index);
  ::proio::model::lcio::RawCalorimeterHit* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RawCalorimeterHit >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RawCalorimeterHit >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.RawCalorimeterHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RawCalorimeterHit > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalorimeterHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.CalorimeterHit) */ {
 public:
  CalorimeterHit();
  virtual ~CalorimeterHit();

  CalorimeterHit(const CalorimeterHit& from);

  inline CalorimeterHit& operator=(const CalorimeterHit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalorimeterHit(CalorimeterHit&& from) noexcept
    : CalorimeterHit() {
    *this = ::std::move(from);
  }

  inline CalorimeterHit& operator=(CalorimeterHit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalorimeterHit& default_instance();

  static inline const CalorimeterHit* internal_default_instance() {
    return reinterpret_cast<const CalorimeterHit*>(
               &_CalorimeterHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CalorimeterHit* other);
  friend void swap(CalorimeterHit& a, CalorimeterHit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

  CalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CalorimeterHit& from);
  void MergeFrom(const CalorimeterHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CalorimeterHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pos = 7;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 7;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // .proio.model.Reference raw = 9;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 9;
  const ::proio::model::Reference& raw() const;
  ::proio::model::Reference* mutable_raw();
  ::proio::model::Reference* release_raw();
  void set_allocated_raw(::proio::model::Reference* raw);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float energy = 4;
  void clear_energy();
  static const int kEnergyFieldNumber = 4;
  float energy() const;
  void set_energy(float value);

  // float energyErr = 5;
  void clear_energyerr();
  static const int kEnergyErrFieldNumber = 5;
  float energyerr() const;
  void set_energyerr(float value);

  // float time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  float time() const;
  void set_time(float value);

  // int32 type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.CalorimeterHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::proio::model::Reference* raw_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float energy_;
  float energyerr_;
  float time_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalorimeterHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.CalorimeterHitCollection) */ {
 public:
  CalorimeterHitCollection();
  virtual ~CalorimeterHitCollection();

  CalorimeterHitCollection(const CalorimeterHitCollection& from);

  inline CalorimeterHitCollection& operator=(const CalorimeterHitCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalorimeterHitCollection(CalorimeterHitCollection&& from) noexcept
    : CalorimeterHitCollection() {
    *this = ::std::move(from);
  }

  inline CalorimeterHitCollection& operator=(CalorimeterHitCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalorimeterHitCollection& default_instance();

  static inline const CalorimeterHitCollection* internal_default_instance() {
    return reinterpret_cast<const CalorimeterHitCollection*>(
               &_CalorimeterHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(CalorimeterHitCollection* other);
  friend void swap(CalorimeterHitCollection& a, CalorimeterHitCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  CalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CalorimeterHitCollection& from);
  void MergeFrom(const CalorimeterHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CalorimeterHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.CalorimeterHit entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::CalorimeterHit& entries(int index) const;
  ::proio::model::lcio::CalorimeterHit* mutable_entries(int index);
  ::proio::model::lcio::CalorimeterHit* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::CalorimeterHit >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::CalorimeterHit >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.CalorimeterHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::CalorimeterHit > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Cluster* other);
  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pos = 5;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // repeated float posErr = 6;
  int poserr_size() const;
  void clear_poserr();
  static const int kPosErrFieldNumber = 6;
  float poserr(int index) const;
  void set_poserr(int index, float value);
  void add_poserr(float value);
  const ::google::protobuf::RepeatedField< float >&
      poserr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_poserr();

  // repeated float dirErr = 9;
  int direrr_size() const;
  void clear_direrr();
  static const int kDirErrFieldNumber = 9;
  float direrr(int index) const;
  void set_direrr(int index, float value);
  void add_direrr(float value);
  const ::google::protobuf::RepeatedField< float >&
      direrr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_direrr();

  // repeated float shape = 10;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 10;
  float shape(int index) const;
  void set_shape(int index, float value);
  void add_shape(float value);
  const ::google::protobuf::RepeatedField< float >&
      shape() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_shape();

  // repeated .proio.model.lcio.ParticleID PIDs = 11;
  int pids_size() const;
  void clear_pids();
  static const int kPIDsFieldNumber = 11;
  const ::proio::model::lcio::ParticleID& pids(int index) const;
  ::proio::model::lcio::ParticleID* mutable_pids(int index);
  ::proio::model::lcio::ParticleID* add_pids();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >*
      mutable_pids();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >&
      pids() const;

  // repeated .proio.model.Reference clusters = 12;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 12;
  const ::proio::model::Reference& clusters(int index) const;
  ::proio::model::Reference* mutable_clusters(int index);
  ::proio::model::Reference* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      clusters() const;

  // repeated .proio.model.Reference hits = 13;
  int hits_size() const;
  void clear_hits();
  static const int kHitsFieldNumber = 13;
  const ::proio::model::Reference& hits(int index) const;
  ::proio::model::Reference* mutable_hits(int index);
  ::proio::model::Reference* add_hits();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_hits();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      hits() const;

  // repeated float weights = 14;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 14;
  float weights(int index) const;
  void set_weights(int index, float value);
  void add_weights(float value);
  const ::google::protobuf::RepeatedField< float >&
      weights() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weights();

  // repeated float subDetEnes = 15;
  int subdetenes_size() const;
  void clear_subdetenes();
  static const int kSubDetEnesFieldNumber = 15;
  float subdetenes(int index) const;
  void set_subdetenes(int index, float value);
  void add_subdetenes(float value);
  const ::google::protobuf::RepeatedField< float >&
      subdetenes() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_subdetenes();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float energy = 3;
  void clear_energy();
  static const int kEnergyFieldNumber = 3;
  float energy() const;
  void set_energy(float value);

  // float energyErr = 4;
  void clear_energyerr();
  static const int kEnergyErrFieldNumber = 4;
  float energyerr() const;
  void set_energyerr(float value);

  // float theta = 7;
  void clear_theta();
  static const int kThetaFieldNumber = 7;
  float theta() const;
  void set_theta(float value);

  // float phi = 8;
  void clear_phi();
  static const int kPhiFieldNumber = 8;
  float phi() const;
  void set_phi(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > poserr_;
  mutable int _poserr_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > direrr_;
  mutable int _direrr_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID > pids_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > clusters_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > hits_;
  ::google::protobuf::RepeatedField< float > weights_;
  mutable int _weights_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > subdetenes_;
  mutable int _subdetenes_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 type_;
  float energy_;
  float energyerr_;
  float theta_;
  float phi_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.ClusterCollection) */ {
 public:
  ClusterCollection();
  virtual ~ClusterCollection();

  ClusterCollection(const ClusterCollection& from);

  inline ClusterCollection& operator=(const ClusterCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterCollection(ClusterCollection&& from) noexcept
    : ClusterCollection() {
    *this = ::std::move(from);
  }

  inline ClusterCollection& operator=(ClusterCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterCollection& default_instance();

  static inline const ClusterCollection* internal_default_instance() {
    return reinterpret_cast<const ClusterCollection*>(
               &_ClusterCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(ClusterCollection* other);
  friend void swap(ClusterCollection& a, ClusterCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterCollection& from);
  void MergeFrom(const ClusterCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.Cluster entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::Cluster& entries(int index) const;
  ::proio::model::lcio::Cluster* mutable_entries(int index);
  ::proio::model::lcio::Cluster* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Cluster >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Cluster >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.ClusterCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Cluster > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecParticle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.RecParticle) */ {
 public:
  RecParticle();
  virtual ~RecParticle();

  RecParticle(const RecParticle& from);

  inline RecParticle& operator=(const RecParticle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecParticle(RecParticle&& from) noexcept
    : RecParticle() {
    *this = ::std::move(from);
  }

  inline RecParticle& operator=(RecParticle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecParticle& default_instance();

  static inline const RecParticle* internal_default_instance() {
    return reinterpret_cast<const RecParticle*>(
               &_RecParticle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(RecParticle* other);
  friend void swap(RecParticle& a, RecParticle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecParticle* New() const PROTOBUF_FINAL { return New(NULL); }

  RecParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecParticle& from);
  void MergeFrom(const RecParticle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecParticle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float p = 3;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 3;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::google::protobuf::RepeatedField< float >&
      p() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_p();

  // repeated float cov = 5;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 5;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // repeated float ref = 8;
  int ref_size() const;
  void clear_ref();
  static const int kRefFieldNumber = 8;
  float ref(int index) const;
  void set_ref(int index, float value);
  void add_ref(float value);
  const ::google::protobuf::RepeatedField< float >&
      ref() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ref();

  // repeated .proio.model.lcio.ParticleID PIDs = 9;
  int pids_size() const;
  void clear_pids();
  static const int kPIDsFieldNumber = 9;
  const ::proio::model::lcio::ParticleID& pids(int index) const;
  ::proio::model::lcio::ParticleID* mutable_pids(int index);
  ::proio::model::lcio::ParticleID* add_pids();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >*
      mutable_pids();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >&
      pids() const;

  // repeated .proio.model.Reference recs = 12;
  int recs_size() const;
  void clear_recs();
  static const int kRecsFieldNumber = 12;
  const ::proio::model::Reference& recs(int index) const;
  ::proio::model::Reference* mutable_recs(int index);
  ::proio::model::Reference* add_recs();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_recs();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      recs() const;

  // repeated .proio.model.Reference tracks = 13;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 13;
  const ::proio::model::Reference& tracks(int index) const;
  ::proio::model::Reference* mutable_tracks(int index);
  ::proio::model::Reference* add_tracks();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_tracks();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      tracks() const;

  // repeated .proio.model.Reference clusters = 14;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 14;
  const ::proio::model::Reference& clusters(int index) const;
  ::proio::model::Reference* mutable_clusters(int index);
  ::proio::model::Reference* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
      clusters() const;

  // .proio.model.Reference startVtx = 15;
  bool has_startvtx() const;
  void clear_startvtx();
  static const int kStartVtxFieldNumber = 15;
  const ::proio::model::Reference& startvtx() const;
  ::proio::model::Reference* mutable_startvtx();
  ::proio::model::Reference* release_startvtx();
  void set_allocated_startvtx(::proio::model::Reference* startvtx);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float energy = 4;
  void clear_energy();
  static const int kEnergyFieldNumber = 4;
  float energy() const;
  void set_energy(float value);

  // float mass = 6;
  void clear_mass();
  static const int kMassFieldNumber = 6;
  float mass() const;
  void set_mass(float value);

  // float charge = 7;
  void clear_charge();
  static const int kChargeFieldNumber = 7;
  float charge() const;
  void set_charge(float value);

  // int32 PIDUsed = 10;
  void clear_pidused();
  static const int kPIDUsedFieldNumber = 10;
  ::google::protobuf::int32 pidused() const;
  void set_pidused(::google::protobuf::int32 value);

  // float goodnessOfPID = 11;
  void clear_goodnessofpid();
  static const int kGoodnessOfPIDFieldNumber = 11;
  float goodnessofpid() const;
  void set_goodnessofpid(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.RecParticle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > p_;
  mutable int _p_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ref_;
  mutable int _ref_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID > pids_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > recs_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > tracks_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::Reference > clusters_;
  ::proio::model::Reference* startvtx_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 type_;
  float energy_;
  float mass_;
  float charge_;
  ::google::protobuf::int32 pidused_;
  float goodnessofpid_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecParticleCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.RecParticleCollection) */ {
 public:
  RecParticleCollection();
  virtual ~RecParticleCollection();

  RecParticleCollection(const RecParticleCollection& from);

  inline RecParticleCollection& operator=(const RecParticleCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecParticleCollection(RecParticleCollection&& from) noexcept
    : RecParticleCollection() {
    *this = ::std::move(from);
  }

  inline RecParticleCollection& operator=(RecParticleCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecParticleCollection& default_instance();

  static inline const RecParticleCollection* internal_default_instance() {
    return reinterpret_cast<const RecParticleCollection*>(
               &_RecParticleCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(RecParticleCollection* other);
  friend void swap(RecParticleCollection& a, RecParticleCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecParticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  RecParticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecParticleCollection& from);
  void MergeFrom(const RecParticleCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecParticleCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.RecParticle entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::RecParticle& entries(int index) const;
  ::proio::model::lcio::RecParticle* mutable_entries(int index);
  ::proio::model::lcio::RecParticle* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RecParticle >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RecParticle >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.RecParticleCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RecParticle > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vertex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vertex(Vertex&& from) noexcept
    : Vertex() {
    *this = ::std::move(from);
  }

  inline Vertex& operator=(Vertex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex& default_instance();

  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(Vertex* other);
  friend void swap(Vertex& a, Vertex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vertex* New() const PROTOBUF_FINAL { return New(NULL); }

  Vertex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pos = 6;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // repeated float cov = 7;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 7;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // repeated float params = 8;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 8;
  float params(int index) const;
  void set_params(int index, float value);
  void add_params(float value);
  const ::google::protobuf::RepeatedField< float >&
      params() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_params();

  // .proio.model.Reference recPart = 9;
  bool has_recpart() const;
  void clear_recpart();
  static const int kRecPartFieldNumber = 9;
  const ::proio::model::Reference& recpart() const;
  ::proio::model::Reference* mutable_recpart();
  ::proio::model::Reference* release_recpart();
  void set_allocated_recpart(::proio::model::Reference* recpart);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 primary = 2;
  void clear_primary();
  static const int kPrimaryFieldNumber = 2;
  ::google::protobuf::int32 primary() const;
  void set_primary(::google::protobuf::int32 value);

  // int32 algType = 3;
  void clear_algtype();
  static const int kAlgTypeFieldNumber = 3;
  ::google::protobuf::int32 algtype() const;
  void set_algtype(::google::protobuf::int32 value);

  // float chi2 = 4;
  void clear_chi2();
  static const int kChi2FieldNumber = 4;
  float chi2() const;
  void set_chi2(float value);

  // float prob = 5;
  void clear_prob();
  static const int kProbFieldNumber = 5;
  float prob() const;
  void set_prob(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.Vertex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > params_;
  mutable int _params_cached_byte_size_;
  ::proio::model::Reference* recpart_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 primary_;
  ::google::protobuf::int32 algtype_;
  float chi2_;
  float prob_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VertexCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.VertexCollection) */ {
 public:
  VertexCollection();
  virtual ~VertexCollection();

  VertexCollection(const VertexCollection& from);

  inline VertexCollection& operator=(const VertexCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VertexCollection(VertexCollection&& from) noexcept
    : VertexCollection() {
    *this = ::std::move(from);
  }

  inline VertexCollection& operator=(VertexCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VertexCollection& default_instance();

  static inline const VertexCollection* internal_default_instance() {
    return reinterpret_cast<const VertexCollection*>(
               &_VertexCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(VertexCollection* other);
  friend void swap(VertexCollection& a, VertexCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VertexCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  VertexCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VertexCollection& from);
  void MergeFrom(const VertexCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VertexCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.Vertex entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::Vertex& entries(int index) const;
  ::proio::model::lcio::Vertex* mutable_entries(int index);
  ::proio::model::lcio::Vertex* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Vertex >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Vertex >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.VertexCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Vertex > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Relation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.Relation) */ {
 public:
  Relation();
  virtual ~Relation();

  Relation(const Relation& from);

  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Relation(Relation&& from) noexcept
    : Relation() {
    *this = ::std::move(from);
  }

  inline Relation& operator=(Relation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation& default_instance();

  static inline const Relation* internal_default_instance() {
    return reinterpret_cast<const Relation*>(
               &_Relation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(Relation* other);
  friend void swap(Relation& a, Relation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Relation* New() const PROTOBUF_FINAL { return New(NULL); }

  Relation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Relation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proio.model.Reference from = 2;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::proio::model::Reference& from() const;
  ::proio::model::Reference* mutable_from();
  ::proio::model::Reference* release_from();
  void set_allocated_from(::proio::model::Reference* from);

  // .proio.model.Reference to = 3;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 3;
  const ::proio::model::Reference& to() const;
  ::proio::model::Reference* mutable_to();
  ::proio::model::Reference* release_to();
  void set_allocated_to(::proio::model::Reference* to);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // float weight = 4;
  void clear_weight();
  static const int kWeightFieldNumber = 4;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.Relation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proio::model::Reference* from_;
  ::proio::model::Reference* to_;
  ::google::protobuf::uint32 id_;
  float weight_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelationCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.model.lcio.RelationCollection) */ {
 public:
  RelationCollection();
  virtual ~RelationCollection();

  RelationCollection(const RelationCollection& from);

  inline RelationCollection& operator=(const RelationCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelationCollection(RelationCollection&& from) noexcept
    : RelationCollection() {
    *this = ::std::move(from);
  }

  inline RelationCollection& operator=(RelationCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationCollection& default_instance();

  static inline const RelationCollection* internal_default_instance() {
    return reinterpret_cast<const RelationCollection*>(
               &_RelationCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(RelationCollection* other);
  friend void swap(RelationCollection& a, RelationCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelationCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  RelationCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelationCollection& from);
  void MergeFrom(const RelationCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelationCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proio.model.lcio.Relation entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  const ::proio::model::lcio::Relation& entries(int index) const;
  ::proio::model::lcio::Relation* mutable_entries(int index);
  ::proio::model::lcio::Relation* add_entries();
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Relation >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Relation >&
      entries() const;

  // .proio.model.Params params = 3;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 3;
  const ::proio::model::Params& params() const;
  ::proio::model::Params* mutable_params();
  ::proio::model::Params* release_params();
  void set_allocated_params(::proio::model::Params* params);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proio.model.lcio.RelationCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Relation > entries_;
  ::proio::model::Params* params_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_proio_2fmodel_2flcio_2flcio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParticleID

// float likelihood = 1;
inline void ParticleID::clear_likelihood() {
  likelihood_ = 0;
}
inline float ParticleID::likelihood() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ParticleID.likelihood)
  return likelihood_;
}
inline void ParticleID::set_likelihood(float value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.ParticleID.likelihood)
}

// int32 type = 2;
inline void ParticleID::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ParticleID::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ParticleID.type)
  return type_;
}
inline void ParticleID::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.ParticleID.type)
}

// int32 PDG = 3;
inline void ParticleID::clear_pdg() {
  pdg_ = 0;
}
inline ::google::protobuf::int32 ParticleID::pdg() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ParticleID.PDG)
  return pdg_;
}
inline void ParticleID::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.ParticleID.PDG)
}

// int32 algType = 4;
inline void ParticleID::clear_algtype() {
  algtype_ = 0;
}
inline ::google::protobuf::int32 ParticleID::algtype() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ParticleID.algType)
  return algtype_;
}
inline void ParticleID::set_algtype(::google::protobuf::int32 value) {
  
  algtype_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.ParticleID.algType)
}

// repeated float params = 5;
inline int ParticleID::params_size() const {
  return params_.size();
}
inline void ParticleID::clear_params() {
  params_.Clear();
}
inline float ParticleID::params(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ParticleID.params)
  return params_.Get(index);
}
inline void ParticleID::set_params(int index, float value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.ParticleID.params)
}
inline void ParticleID::add_params(float value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.ParticleID.params)
}
inline const ::google::protobuf::RepeatedField< float >&
ParticleID::params() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.ParticleID.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< float >*
ParticleID::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.ParticleID.params)
  return &params_;
}

// -------------------------------------------------------------------

// MCParticle

// uint32 id = 1;
inline void MCParticle::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MCParticle::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.id)
  return id_;
}
inline void MCParticle::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.id)
}

// repeated .proio.model.Reference parents = 2;
inline int MCParticle::parents_size() const {
  return parents_.size();
}
inline void MCParticle::clear_parents() {
  parents_.Clear();
}
inline const ::proio::model::Reference& MCParticle::parents(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.parents)
  return parents_.Get(index);
}
inline ::proio::model::Reference* MCParticle::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.MCParticle.parents)
  return parents_.Mutable(index);
}
inline ::proio::model::Reference* MCParticle::add_parents() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticle.parents)
  return parents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
MCParticle::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticle.parents)
  return &parents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
MCParticle::parents() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticle.parents)
  return parents_;
}

// repeated .proio.model.Reference children = 3;
inline int MCParticle::children_size() const {
  return children_.size();
}
inline void MCParticle::clear_children() {
  children_.Clear();
}
inline const ::proio::model::Reference& MCParticle::children(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.children)
  return children_.Get(index);
}
inline ::proio::model::Reference* MCParticle::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.MCParticle.children)
  return children_.Mutable(index);
}
inline ::proio::model::Reference* MCParticle::add_children() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticle.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
MCParticle::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticle.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
MCParticle::children() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticle.children)
  return children_;
}

// int32 PDG = 4;
inline void MCParticle::clear_pdg() {
  pdg_ = 0;
}
inline ::google::protobuf::int32 MCParticle::pdg() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.PDG)
  return pdg_;
}
inline void MCParticle::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.PDG)
}

// repeated double vertex = 5;
inline int MCParticle::vertex_size() const {
  return vertex_.size();
}
inline void MCParticle::clear_vertex() {
  vertex_.Clear();
}
inline double MCParticle::vertex(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.vertex)
  return vertex_.Get(index);
}
inline void MCParticle::set_vertex(int index, double value) {
  vertex_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.vertex)
}
inline void MCParticle::add_vertex(double value) {
  vertex_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticle.vertex)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::vertex() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticle.vertex)
  return vertex_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticle.vertex)
  return &vertex_;
}

// float time = 6;
inline void MCParticle::clear_time() {
  time_ = 0;
}
inline float MCParticle::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.time)
  return time_;
}
inline void MCParticle::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.time)
}

// repeated double p = 7;
inline int MCParticle::p_size() const {
  return p_.size();
}
inline void MCParticle::clear_p() {
  p_.Clear();
}
inline double MCParticle::p(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.p)
  return p_.Get(index);
}
inline void MCParticle::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.p)
}
inline void MCParticle::add_p(double value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticle.p)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::p() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticle.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticle.p)
  return &p_;
}

// double mass = 8;
inline void MCParticle::clear_mass() {
  mass_ = 0;
}
inline double MCParticle::mass() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.mass)
  return mass_;
}
inline void MCParticle::set_mass(double value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.mass)
}

// float charge = 9;
inline void MCParticle::clear_charge() {
  charge_ = 0;
}
inline float MCParticle::charge() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.charge)
  return charge_;
}
inline void MCParticle::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.charge)
}

// repeated double PEndPoint = 10;
inline int MCParticle::pendpoint_size() const {
  return pendpoint_.size();
}
inline void MCParticle::clear_pendpoint() {
  pendpoint_.Clear();
}
inline double MCParticle::pendpoint(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.PEndPoint)
  return pendpoint_.Get(index);
}
inline void MCParticle::set_pendpoint(int index, double value) {
  pendpoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.PEndPoint)
}
inline void MCParticle::add_pendpoint(double value) {
  pendpoint_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticle.PEndPoint)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::pendpoint() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticle.PEndPoint)
  return pendpoint_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_pendpoint() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticle.PEndPoint)
  return &pendpoint_;
}

// repeated float spin = 11;
inline int MCParticle::spin_size() const {
  return spin_.size();
}
inline void MCParticle::clear_spin() {
  spin_.Clear();
}
inline float MCParticle::spin(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.spin)
  return spin_.Get(index);
}
inline void MCParticle::set_spin(int index, float value) {
  spin_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.spin)
}
inline void MCParticle::add_spin(float value) {
  spin_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticle.spin)
}
inline const ::google::protobuf::RepeatedField< float >&
MCParticle::spin() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticle.spin)
  return spin_;
}
inline ::google::protobuf::RepeatedField< float >*
MCParticle::mutable_spin() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticle.spin)
  return &spin_;
}

// repeated int32 colorFlow = 12;
inline int MCParticle::colorflow_size() const {
  return colorflow_.size();
}
inline void MCParticle::clear_colorflow() {
  colorflow_.Clear();
}
inline ::google::protobuf::int32 MCParticle::colorflow(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.colorFlow)
  return colorflow_.Get(index);
}
inline void MCParticle::set_colorflow(int index, ::google::protobuf::int32 value) {
  colorflow_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.colorFlow)
}
inline void MCParticle::add_colorflow(::google::protobuf::int32 value) {
  colorflow_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticle.colorFlow)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::colorflow() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticle.colorFlow)
  return colorflow_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_colorflow() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticle.colorFlow)
  return &colorflow_;
}

// int32 genStatus = 13;
inline void MCParticle::clear_genstatus() {
  genstatus_ = 0;
}
inline ::google::protobuf::int32 MCParticle::genstatus() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.genStatus)
  return genstatus_;
}
inline void MCParticle::set_genstatus(::google::protobuf::int32 value) {
  
  genstatus_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.genStatus)
}

// uint32 simStatus = 14;
inline void MCParticle::clear_simstatus() {
  simstatus_ = 0u;
}
inline ::google::protobuf::uint32 MCParticle::simstatus() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticle.simStatus)
  return simstatus_;
}
inline void MCParticle::set_simstatus(::google::protobuf::uint32 value) {
  
  simstatus_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticle.simStatus)
}

// -------------------------------------------------------------------

// MCParticleCollection

// uint32 id = 1;
inline void MCParticleCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MCParticleCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticleCollection.id)
  return id_;
}
inline void MCParticleCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticleCollection.id)
}

// uint32 flags = 2;
inline void MCParticleCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 MCParticleCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticleCollection.flags)
  return flags_;
}
inline void MCParticleCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.MCParticleCollection.flags)
}

// .proio.model.Params params = 3;
inline bool MCParticleCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void MCParticleCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& MCParticleCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticleCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* MCParticleCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.MCParticleCollection.params)
  return params_;
}
inline ::proio::model::Params* MCParticleCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.MCParticleCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void MCParticleCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.MCParticleCollection.params)
}

// repeated .proio.model.lcio.MCParticle entries = 4;
inline int MCParticleCollection::entries_size() const {
  return entries_.size();
}
inline void MCParticleCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::MCParticle& MCParticleCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.MCParticleCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::MCParticle* MCParticleCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.MCParticleCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::MCParticle* MCParticleCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.MCParticleCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::MCParticle >*
MCParticleCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.MCParticleCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::MCParticle >&
MCParticleCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.MCParticleCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// SimTrackerHit

// uint32 id = 1;
inline void SimTrackerHit::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SimTrackerHit::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.id)
  return id_;
}
inline void SimTrackerHit::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.id)
}

// int32 cellID0 = 2;
inline void SimTrackerHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.cellID0)
  return cellid0_;
}
inline void SimTrackerHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.cellID0)
}

// int32 cellID1 = 3;
inline void SimTrackerHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.cellID1)
  return cellid1_;
}
inline void SimTrackerHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.cellID1)
}

// repeated double pos = 4;
inline int SimTrackerHit::pos_size() const {
  return pos_.size();
}
inline void SimTrackerHit::clear_pos() {
  pos_.Clear();
}
inline double SimTrackerHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.pos)
  return pos_.Get(index);
}
inline void SimTrackerHit::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.pos)
}
inline void SimTrackerHit::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.SimTrackerHit.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
SimTrackerHit::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.SimTrackerHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
SimTrackerHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.SimTrackerHit.pos)
  return &pos_;
}

// float EDep = 5;
inline void SimTrackerHit::clear_edep() {
  edep_ = 0;
}
inline float SimTrackerHit::edep() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.EDep)
  return edep_;
}
inline void SimTrackerHit::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.EDep)
}

// float time = 6;
inline void SimTrackerHit::clear_time() {
  time_ = 0;
}
inline float SimTrackerHit::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.time)
  return time_;
}
inline void SimTrackerHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.time)
}

// .proio.model.Reference mc = 7;
inline bool SimTrackerHit::has_mc() const {
  return this != internal_default_instance() && mc_ != NULL;
}
inline void SimTrackerHit::clear_mc() {
  if (GetArenaNoVirtual() == NULL && mc_ != NULL) delete mc_;
  mc_ = NULL;
}
inline const ::proio::model::Reference& SimTrackerHit::mc() const {
  const ::proio::model::Reference* p = mc_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.mc)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* SimTrackerHit::mutable_mc() {
  
  if (mc_ == NULL) {
    mc_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimTrackerHit.mc)
  return mc_;
}
inline ::proio::model::Reference* SimTrackerHit::release_mc() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.SimTrackerHit.mc)
  
  ::proio::model::Reference* temp = mc_;
  mc_ = NULL;
  return temp;
}
inline void SimTrackerHit::set_allocated_mc(::proio::model::Reference* mc) {
  delete mc_;
  mc_ = mc;
  if (mc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.SimTrackerHit.mc)
}

// repeated float p = 8;
inline int SimTrackerHit::p_size() const {
  return p_.size();
}
inline void SimTrackerHit::clear_p() {
  p_.Clear();
}
inline float SimTrackerHit::p(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.p)
  return p_.Get(index);
}
inline void SimTrackerHit::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.p)
}
inline void SimTrackerHit::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.SimTrackerHit.p)
}
inline const ::google::protobuf::RepeatedField< float >&
SimTrackerHit::p() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.SimTrackerHit.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< float >*
SimTrackerHit::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.SimTrackerHit.p)
  return &p_;
}

// float pathLength = 9;
inline void SimTrackerHit::clear_pathlength() {
  pathlength_ = 0;
}
inline float SimTrackerHit::pathlength() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.pathLength)
  return pathlength_;
}
inline void SimTrackerHit::set_pathlength(float value) {
  
  pathlength_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.pathLength)
}

// int32 quality = 10;
inline void SimTrackerHit::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::quality() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHit.quality)
  return quality_;
}
inline void SimTrackerHit::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHit.quality)
}

// -------------------------------------------------------------------

// SimTrackerHitCollection

// uint32 id = 1;
inline void SimTrackerHitCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SimTrackerHitCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHitCollection.id)
  return id_;
}
inline void SimTrackerHitCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHitCollection.id)
}

// uint32 flags = 2;
inline void SimTrackerHitCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 SimTrackerHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHitCollection.flags)
  return flags_;
}
inline void SimTrackerHitCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimTrackerHitCollection.flags)
}

// .proio.model.Params params = 3;
inline bool SimTrackerHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void SimTrackerHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& SimTrackerHitCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHitCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* SimTrackerHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimTrackerHitCollection.params)
  return params_;
}
inline ::proio::model::Params* SimTrackerHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.SimTrackerHitCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void SimTrackerHitCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.SimTrackerHitCollection.params)
}

// repeated .proio.model.lcio.SimTrackerHit entries = 4;
inline int SimTrackerHitCollection::entries_size() const {
  return entries_.size();
}
inline void SimTrackerHitCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::SimTrackerHit& SimTrackerHitCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimTrackerHitCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::SimTrackerHit* SimTrackerHitCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimTrackerHitCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::SimTrackerHit* SimTrackerHitCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.SimTrackerHitCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimTrackerHit >*
SimTrackerHitCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.SimTrackerHitCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimTrackerHit >&
SimTrackerHitCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.SimTrackerHitCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TrackerRawData

// uint32 id = 1;
inline void TrackerRawData::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerRawData::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawData.id)
  return id_;
}
inline void TrackerRawData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerRawData.id)
}

// int32 cellID0 = 2;
inline void TrackerRawData::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerRawData::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawData.cellID0)
  return cellid0_;
}
inline void TrackerRawData::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerRawData.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerRawData::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerRawData::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawData.cellID1)
  return cellid1_;
}
inline void TrackerRawData::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerRawData.cellID1)
}

// int32 time = 4;
inline void TrackerRawData::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 TrackerRawData::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawData.time)
  return time_;
}
inline void TrackerRawData::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerRawData.time)
}

// repeated uint32 ADCs = 5;
inline int TrackerRawData::adcs_size() const {
  return adcs_.size();
}
inline void TrackerRawData::clear_adcs() {
  adcs_.Clear();
}
inline ::google::protobuf::uint32 TrackerRawData::adcs(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawData.ADCs)
  return adcs_.Get(index);
}
inline void TrackerRawData::set_adcs(int index, ::google::protobuf::uint32 value) {
  adcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerRawData.ADCs)
}
inline void TrackerRawData::add_adcs(::google::protobuf::uint32 value) {
  adcs_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerRawData.ADCs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrackerRawData::adcs() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerRawData.ADCs)
  return adcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrackerRawData::mutable_adcs() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerRawData.ADCs)
  return &adcs_;
}

// -------------------------------------------------------------------

// TrackerRawDataCollection

// uint32 id = 1;
inline void TrackerRawDataCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerRawDataCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawDataCollection.id)
  return id_;
}
inline void TrackerRawDataCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerRawDataCollection.id)
}

// uint32 flags = 2;
inline void TrackerRawDataCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 TrackerRawDataCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawDataCollection.flags)
  return flags_;
}
inline void TrackerRawDataCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerRawDataCollection.flags)
}

// .proio.model.Params params = 3;
inline bool TrackerRawDataCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerRawDataCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& TrackerRawDataCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawDataCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* TrackerRawDataCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerRawDataCollection.params)
  return params_;
}
inline ::proio::model::Params* TrackerRawDataCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackerRawDataCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerRawDataCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackerRawDataCollection.params)
}

// repeated .proio.model.lcio.TrackerRawData entries = 4;
inline int TrackerRawDataCollection::entries_size() const {
  return entries_.size();
}
inline void TrackerRawDataCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::TrackerRawData& TrackerRawDataCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerRawDataCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::TrackerRawData* TrackerRawDataCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerRawDataCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::TrackerRawData* TrackerRawDataCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerRawDataCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerRawData >*
TrackerRawDataCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerRawDataCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerRawData >&
TrackerRawDataCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerRawDataCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TrackerData

// uint32 id = 1;
inline void TrackerData::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerData::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerData.id)
  return id_;
}
inline void TrackerData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerData.id)
}

// int32 cellID0 = 2;
inline void TrackerData::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerData::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerData.cellID0)
  return cellid0_;
}
inline void TrackerData::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerData.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerData::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerData::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerData.cellID1)
  return cellid1_;
}
inline void TrackerData::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerData.cellID1)
}

// float time = 4;
inline void TrackerData::clear_time() {
  time_ = 0;
}
inline float TrackerData::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerData.time)
  return time_;
}
inline void TrackerData::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerData.time)
}

// repeated float charges = 5;
inline int TrackerData::charges_size() const {
  return charges_.size();
}
inline void TrackerData::clear_charges() {
  charges_.Clear();
}
inline float TrackerData::charges(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerData.charges)
  return charges_.Get(index);
}
inline void TrackerData::set_charges(int index, float value) {
  charges_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerData.charges)
}
inline void TrackerData::add_charges(float value) {
  charges_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerData.charges)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerData::charges() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerData.charges)
  return charges_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerData::mutable_charges() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerData.charges)
  return &charges_;
}

// -------------------------------------------------------------------

// TrackerDataCollection

// uint32 id = 1;
inline void TrackerDataCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerDataCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerDataCollection.id)
  return id_;
}
inline void TrackerDataCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerDataCollection.id)
}

// uint32 flags = 2;
inline void TrackerDataCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 TrackerDataCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerDataCollection.flags)
  return flags_;
}
inline void TrackerDataCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerDataCollection.flags)
}

// .proio.model.Params params = 3;
inline bool TrackerDataCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerDataCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& TrackerDataCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerDataCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* TrackerDataCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerDataCollection.params)
  return params_;
}
inline ::proio::model::Params* TrackerDataCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackerDataCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerDataCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackerDataCollection.params)
}

// repeated .proio.model.lcio.TrackerData entries = 4;
inline int TrackerDataCollection::entries_size() const {
  return entries_.size();
}
inline void TrackerDataCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::TrackerData& TrackerDataCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerDataCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::TrackerData* TrackerDataCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerDataCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::TrackerData* TrackerDataCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerDataCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerData >*
TrackerDataCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerDataCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerData >&
TrackerDataCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerDataCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TrackerHit

// uint32 id = 1;
inline void TrackerHit::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHit::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.id)
  return id_;
}
inline void TrackerHit::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.id)
}

// int32 cellID0 = 2;
inline void TrackerHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.cellID0)
  return cellid0_;
}
inline void TrackerHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.cellID1)
  return cellid1_;
}
inline void TrackerHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.cellID1)
}

// int32 type = 4;
inline void TrackerHit::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.type)
  return type_;
}
inline void TrackerHit::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.type)
}

// repeated double pos = 5;
inline int TrackerHit::pos_size() const {
  return pos_.size();
}
inline void TrackerHit::clear_pos() {
  pos_.Clear();
}
inline double TrackerHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.pos)
  return pos_.Get(index);
}
inline void TrackerHit::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.pos)
}
inline void TrackerHit::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHit.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHit::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHit.pos)
  return &pos_;
}

// repeated double cov = 6;
inline int TrackerHit::cov_size() const {
  return cov_.size();
}
inline void TrackerHit::clear_cov() {
  cov_.Clear();
}
inline double TrackerHit::cov(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.cov)
  return cov_.Get(index);
}
inline void TrackerHit::set_cov(int index, double value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.cov)
}
inline void TrackerHit::add_cov(double value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHit.cov)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHit::cov() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHit.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHit::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHit.cov)
  return &cov_;
}

// float EDep = 7;
inline void TrackerHit::clear_edep() {
  edep_ = 0;
}
inline float TrackerHit::edep() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.EDep)
  return edep_;
}
inline void TrackerHit::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.EDep)
}

// float EDepErr = 8;
inline void TrackerHit::clear_edeperr() {
  edeperr_ = 0;
}
inline float TrackerHit::edeperr() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.EDepErr)
  return edeperr_;
}
inline void TrackerHit::set_edeperr(float value) {
  
  edeperr_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.EDepErr)
}

// float time = 9;
inline void TrackerHit::clear_time() {
  time_ = 0;
}
inline float TrackerHit::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.time)
  return time_;
}
inline void TrackerHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.time)
}

// int32 quality = 10;
inline void TrackerHit::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::quality() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.quality)
  return quality_;
}
inline void TrackerHit::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHit.quality)
}

// repeated .proio.model.Reference rawHits = 11;
inline int TrackerHit::rawhits_size() const {
  return rawhits_.size();
}
inline void TrackerHit::clear_rawhits() {
  rawhits_.Clear();
}
inline const ::proio::model::Reference& TrackerHit::rawhits(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHit.rawHits)
  return rawhits_.Get(index);
}
inline ::proio::model::Reference* TrackerHit::mutable_rawhits(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHit.rawHits)
  return rawhits_.Mutable(index);
}
inline ::proio::model::Reference* TrackerHit::add_rawhits() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHit.rawHits)
  return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
TrackerHit::mutable_rawhits() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHit.rawHits)
  return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
TrackerHit::rawhits() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHit.rawHits)
  return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitCollection

// uint32 id = 1;
inline void TrackerHitCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitCollection.id)
  return id_;
}
inline void TrackerHitCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitCollection.id)
}

// uint32 flags = 2;
inline void TrackerHitCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitCollection.flags)
  return flags_;
}
inline void TrackerHitCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitCollection.flags)
}

// .proio.model.Params params = 3;
inline bool TrackerHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& TrackerHitCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* TrackerHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitCollection.params)
  return params_;
}
inline ::proio::model::Params* TrackerHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackerHitCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerHitCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackerHitCollection.params)
}

// repeated .proio.model.lcio.TrackerHit entries = 4;
inline int TrackerHitCollection::entries_size() const {
  return entries_.size();
}
inline void TrackerHitCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::TrackerHit& TrackerHitCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::TrackerHit* TrackerHitCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::TrackerHit* TrackerHitCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHit >*
TrackerHitCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHit >&
TrackerHitCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TrackerPulse

// uint32 id = 1;
inline void TrackerPulse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerPulse::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.id)
  return id_;
}
inline void TrackerPulse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulse.id)
}

// int32 cellID0 = 2;
inline void TrackerPulse::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerPulse::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.cellID0)
  return cellid0_;
}
inline void TrackerPulse::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulse.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerPulse::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerPulse::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.cellID1)
  return cellid1_;
}
inline void TrackerPulse::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulse.cellID1)
}

// float time = 4;
inline void TrackerPulse::clear_time() {
  time_ = 0;
}
inline float TrackerPulse::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.time)
  return time_;
}
inline void TrackerPulse::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulse.time)
}

// float charge = 5;
inline void TrackerPulse::clear_charge() {
  charge_ = 0;
}
inline float TrackerPulse::charge() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.charge)
  return charge_;
}
inline void TrackerPulse::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulse.charge)
}

// repeated float cov = 6;
inline int TrackerPulse::cov_size() const {
  return cov_.size();
}
inline void TrackerPulse::clear_cov() {
  cov_.Clear();
}
inline float TrackerPulse::cov(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.cov)
  return cov_.Get(index);
}
inline void TrackerPulse::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulse.cov)
}
inline void TrackerPulse::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerPulse.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerPulse::cov() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerPulse.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerPulse::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerPulse.cov)
  return &cov_;
}

// int32 quality = 7;
inline void TrackerPulse::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerPulse::quality() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.quality)
  return quality_;
}
inline void TrackerPulse::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulse.quality)
}

// .proio.model.Reference TPC = 8;
inline bool TrackerPulse::has_tpc() const {
  return this != internal_default_instance() && tpc_ != NULL;
}
inline void TrackerPulse::clear_tpc() {
  if (GetArenaNoVirtual() == NULL && tpc_ != NULL) delete tpc_;
  tpc_ = NULL;
}
inline const ::proio::model::Reference& TrackerPulse::tpc() const {
  const ::proio::model::Reference* p = tpc_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulse.TPC)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* TrackerPulse::mutable_tpc() {
  
  if (tpc_ == NULL) {
    tpc_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerPulse.TPC)
  return tpc_;
}
inline ::proio::model::Reference* TrackerPulse::release_tpc() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackerPulse.TPC)
  
  ::proio::model::Reference* temp = tpc_;
  tpc_ = NULL;
  return temp;
}
inline void TrackerPulse::set_allocated_tpc(::proio::model::Reference* tpc) {
  delete tpc_;
  tpc_ = tpc;
  if (tpc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackerPulse.TPC)
}

// -------------------------------------------------------------------

// TrackerPulseCollection

// uint32 id = 1;
inline void TrackerPulseCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerPulseCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulseCollection.id)
  return id_;
}
inline void TrackerPulseCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulseCollection.id)
}

// uint32 flags = 2;
inline void TrackerPulseCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 TrackerPulseCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulseCollection.flags)
  return flags_;
}
inline void TrackerPulseCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerPulseCollection.flags)
}

// .proio.model.Params params = 3;
inline bool TrackerPulseCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerPulseCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& TrackerPulseCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulseCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* TrackerPulseCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerPulseCollection.params)
  return params_;
}
inline ::proio::model::Params* TrackerPulseCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackerPulseCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerPulseCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackerPulseCollection.params)
}

// repeated .proio.model.lcio.TrackerPulse entries = 4;
inline int TrackerPulseCollection::entries_size() const {
  return entries_.size();
}
inline void TrackerPulseCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::TrackerPulse& TrackerPulseCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerPulseCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::TrackerPulse* TrackerPulseCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerPulseCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::TrackerPulse* TrackerPulseCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerPulseCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerPulse >*
TrackerPulseCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerPulseCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerPulse >&
TrackerPulseCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerPulseCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TrackerHitPlane

// uint32 id = 1;
inline void TrackerHitPlane::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitPlane::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.id)
  return id_;
}
inline void TrackerHitPlane::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.id)
}

// int32 cellID0 = 2;
inline void TrackerHitPlane::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.cellID0)
  return cellid0_;
}
inline void TrackerHitPlane::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerHitPlane::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.cellID1)
  return cellid1_;
}
inline void TrackerHitPlane::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.cellID1)
}

// int32 type = 4;
inline void TrackerHitPlane::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.type)
  return type_;
}
inline void TrackerHitPlane::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.type)
}

// repeated double pos = 5;
inline int TrackerHitPlane::pos_size() const {
  return pos_.size();
}
inline void TrackerHitPlane::clear_pos() {
  pos_.Clear();
}
inline double TrackerHitPlane::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.pos)
  return pos_.Get(index);
}
inline void TrackerHitPlane::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.pos)
}
inline void TrackerHitPlane::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitPlane.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHitPlane::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitPlane.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHitPlane::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitPlane.pos)
  return &pos_;
}

// repeated float U = 6;
inline int TrackerHitPlane::u_size() const {
  return u_.size();
}
inline void TrackerHitPlane::clear_u() {
  u_.Clear();
}
inline float TrackerHitPlane::u(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.U)
  return u_.Get(index);
}
inline void TrackerHitPlane::set_u(int index, float value) {
  u_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.U)
}
inline void TrackerHitPlane::add_u(float value) {
  u_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitPlane.U)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerHitPlane::u() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitPlane.U)
  return u_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerHitPlane::mutable_u() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitPlane.U)
  return &u_;
}

// repeated float V = 7;
inline int TrackerHitPlane::v_size() const {
  return v_.size();
}
inline void TrackerHitPlane::clear_v() {
  v_.Clear();
}
inline float TrackerHitPlane::v(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.V)
  return v_.Get(index);
}
inline void TrackerHitPlane::set_v(int index, float value) {
  v_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.V)
}
inline void TrackerHitPlane::add_v(float value) {
  v_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitPlane.V)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerHitPlane::v() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitPlane.V)
  return v_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerHitPlane::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitPlane.V)
  return &v_;
}

// float dU = 8;
inline void TrackerHitPlane::clear_du() {
  du_ = 0;
}
inline float TrackerHitPlane::du() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.dU)
  return du_;
}
inline void TrackerHitPlane::set_du(float value) {
  
  du_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.dU)
}

// float dV = 9;
inline void TrackerHitPlane::clear_dv() {
  dv_ = 0;
}
inline float TrackerHitPlane::dv() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.dV)
  return dv_;
}
inline void TrackerHitPlane::set_dv(float value) {
  
  dv_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.dV)
}

// float EDep = 10;
inline void TrackerHitPlane::clear_edep() {
  edep_ = 0;
}
inline float TrackerHitPlane::edep() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.EDep)
  return edep_;
}
inline void TrackerHitPlane::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.EDep)
}

// float EDepErr = 11;
inline void TrackerHitPlane::clear_edeperr() {
  edeperr_ = 0;
}
inline float TrackerHitPlane::edeperr() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.EDepErr)
  return edeperr_;
}
inline void TrackerHitPlane::set_edeperr(float value) {
  
  edeperr_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.EDepErr)
}

// float time = 12;
inline void TrackerHitPlane::clear_time() {
  time_ = 0;
}
inline float TrackerHitPlane::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.time)
  return time_;
}
inline void TrackerHitPlane::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.time)
}

// int32 quality = 13;
inline void TrackerHitPlane::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::quality() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.quality)
  return quality_;
}
inline void TrackerHitPlane::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlane.quality)
}

// repeated .proio.model.Reference rawHits = 14;
inline int TrackerHitPlane::rawhits_size() const {
  return rawhits_.size();
}
inline void TrackerHitPlane::clear_rawhits() {
  rawhits_.Clear();
}
inline const ::proio::model::Reference& TrackerHitPlane::rawhits(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlane.rawHits)
  return rawhits_.Get(index);
}
inline ::proio::model::Reference* TrackerHitPlane::mutable_rawhits(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitPlane.rawHits)
  return rawhits_.Mutable(index);
}
inline ::proio::model::Reference* TrackerHitPlane::add_rawhits() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitPlane.rawHits)
  return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
TrackerHitPlane::mutable_rawhits() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitPlane.rawHits)
  return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
TrackerHitPlane::rawhits() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitPlane.rawHits)
  return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitPlaneCollection

// uint32 id = 1;
inline void TrackerHitPlaneCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitPlaneCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlaneCollection.id)
  return id_;
}
inline void TrackerHitPlaneCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlaneCollection.id)
}

// uint32 flags = 2;
inline void TrackerHitPlaneCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitPlaneCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlaneCollection.flags)
  return flags_;
}
inline void TrackerHitPlaneCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitPlaneCollection.flags)
}

// .proio.model.Params params = 3;
inline bool TrackerHitPlaneCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitPlaneCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& TrackerHitPlaneCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlaneCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* TrackerHitPlaneCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitPlaneCollection.params)
  return params_;
}
inline ::proio::model::Params* TrackerHitPlaneCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackerHitPlaneCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerHitPlaneCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackerHitPlaneCollection.params)
}

// repeated .proio.model.lcio.TrackerHitPlane entries = 4;
inline int TrackerHitPlaneCollection::entries_size() const {
  return entries_.size();
}
inline void TrackerHitPlaneCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::TrackerHitPlane& TrackerHitPlaneCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitPlaneCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::TrackerHitPlane* TrackerHitPlaneCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitPlaneCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::TrackerHitPlane* TrackerHitPlaneCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitPlaneCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitPlane >*
TrackerHitPlaneCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitPlaneCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitPlane >&
TrackerHitPlaneCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitPlaneCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TrackerHitZCylinder

// uint32 id = 1;
inline void TrackerHitZCylinder::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitZCylinder::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.id)
  return id_;
}
inline void TrackerHitZCylinder::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.id)
}

// int32 cellID0 = 2;
inline void TrackerHitZCylinder::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.cellID0)
  return cellid0_;
}
inline void TrackerHitZCylinder::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.cellID0)
}

// int32 cellID1 = 3;
inline void TrackerHitZCylinder::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.cellID1)
  return cellid1_;
}
inline void TrackerHitZCylinder::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.cellID1)
}

// int32 type = 4;
inline void TrackerHitZCylinder::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.type)
  return type_;
}
inline void TrackerHitZCylinder::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.type)
}

// repeated double pos = 5;
inline int TrackerHitZCylinder::pos_size() const {
  return pos_.size();
}
inline void TrackerHitZCylinder::clear_pos() {
  pos_.Clear();
}
inline double TrackerHitZCylinder::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.pos)
  return pos_.Get(index);
}
inline void TrackerHitZCylinder::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.pos)
}
inline void TrackerHitZCylinder::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitZCylinder.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHitZCylinder::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitZCylinder.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHitZCylinder::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitZCylinder.pos)
  return &pos_;
}

// repeated float center = 6;
inline int TrackerHitZCylinder::center_size() const {
  return center_.size();
}
inline void TrackerHitZCylinder::clear_center() {
  center_.Clear();
}
inline float TrackerHitZCylinder::center(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.center)
  return center_.Get(index);
}
inline void TrackerHitZCylinder::set_center(int index, float value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.center)
}
inline void TrackerHitZCylinder::add_center(float value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitZCylinder.center)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerHitZCylinder::center() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitZCylinder.center)
  return center_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerHitZCylinder::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitZCylinder.center)
  return &center_;
}

// float dRPhi = 7;
inline void TrackerHitZCylinder::clear_drphi() {
  drphi_ = 0;
}
inline float TrackerHitZCylinder::drphi() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.dRPhi)
  return drphi_;
}
inline void TrackerHitZCylinder::set_drphi(float value) {
  
  drphi_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.dRPhi)
}

// float dZ = 8;
inline void TrackerHitZCylinder::clear_dz() {
  dz_ = 0;
}
inline float TrackerHitZCylinder::dz() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.dZ)
  return dz_;
}
inline void TrackerHitZCylinder::set_dz(float value) {
  
  dz_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.dZ)
}

// float EDep = 9;
inline void TrackerHitZCylinder::clear_edep() {
  edep_ = 0;
}
inline float TrackerHitZCylinder::edep() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.EDep)
  return edep_;
}
inline void TrackerHitZCylinder::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.EDep)
}

// float EDepErr = 10;
inline void TrackerHitZCylinder::clear_edeperr() {
  edeperr_ = 0;
}
inline float TrackerHitZCylinder::edeperr() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.EDepErr)
  return edeperr_;
}
inline void TrackerHitZCylinder::set_edeperr(float value) {
  
  edeperr_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.EDepErr)
}

// float time = 11;
inline void TrackerHitZCylinder::clear_time() {
  time_ = 0;
}
inline float TrackerHitZCylinder::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.time)
  return time_;
}
inline void TrackerHitZCylinder::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.time)
}

// int32 quality = 12;
inline void TrackerHitZCylinder::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::quality() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.quality)
  return quality_;
}
inline void TrackerHitZCylinder::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinder.quality)
}

// repeated .proio.model.Reference rawHits = 13;
inline int TrackerHitZCylinder::rawhits_size() const {
  return rawhits_.size();
}
inline void TrackerHitZCylinder::clear_rawhits() {
  rawhits_.Clear();
}
inline const ::proio::model::Reference& TrackerHitZCylinder::rawhits(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinder.rawHits)
  return rawhits_.Get(index);
}
inline ::proio::model::Reference* TrackerHitZCylinder::mutable_rawhits(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitZCylinder.rawHits)
  return rawhits_.Mutable(index);
}
inline ::proio::model::Reference* TrackerHitZCylinder::add_rawhits() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitZCylinder.rawHits)
  return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
TrackerHitZCylinder::mutable_rawhits() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitZCylinder.rawHits)
  return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
TrackerHitZCylinder::rawhits() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitZCylinder.rawHits)
  return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitZCylinderCollection

// uint32 id = 1;
inline void TrackerHitZCylinderCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitZCylinderCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinderCollection.id)
  return id_;
}
inline void TrackerHitZCylinderCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinderCollection.id)
}

// uint32 flags = 2;
inline void TrackerHitZCylinderCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 TrackerHitZCylinderCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinderCollection.flags)
  return flags_;
}
inline void TrackerHitZCylinderCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackerHitZCylinderCollection.flags)
}

// .proio.model.Params params = 3;
inline bool TrackerHitZCylinderCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitZCylinderCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& TrackerHitZCylinderCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinderCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* TrackerHitZCylinderCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitZCylinderCollection.params)
  return params_;
}
inline ::proio::model::Params* TrackerHitZCylinderCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackerHitZCylinderCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerHitZCylinderCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackerHitZCylinderCollection.params)
}

// repeated .proio.model.lcio.TrackerHitZCylinder entries = 4;
inline int TrackerHitZCylinderCollection::entries_size() const {
  return entries_.size();
}
inline void TrackerHitZCylinderCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::TrackerHitZCylinder& TrackerHitZCylinderCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackerHitZCylinderCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::TrackerHitZCylinder* TrackerHitZCylinderCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackerHitZCylinderCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::TrackerHitZCylinder* TrackerHitZCylinderCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackerHitZCylinderCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitZCylinder >*
TrackerHitZCylinderCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackerHitZCylinderCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::TrackerHitZCylinder >&
TrackerHitZCylinderCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackerHitZCylinderCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Track_TrackState

// int32 loc = 1;
inline void Track_TrackState::clear_loc() {
  loc_ = 0;
}
inline ::google::protobuf::int32 Track_TrackState::loc() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.loc)
  return loc_;
}
inline void Track_TrackState::set_loc(::google::protobuf::int32 value) {
  
  loc_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.loc)
}

// float d0 = 2;
inline void Track_TrackState::clear_d0() {
  d0_ = 0;
}
inline float Track_TrackState::d0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.d0)
  return d0_;
}
inline void Track_TrackState::set_d0(float value) {
  
  d0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.d0)
}

// float phi = 3;
inline void Track_TrackState::clear_phi() {
  phi_ = 0;
}
inline float Track_TrackState::phi() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.phi)
  return phi_;
}
inline void Track_TrackState::set_phi(float value) {
  
  phi_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.phi)
}

// float omega = 4;
inline void Track_TrackState::clear_omega() {
  omega_ = 0;
}
inline float Track_TrackState::omega() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.omega)
  return omega_;
}
inline void Track_TrackState::set_omega(float value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.omega)
}

// float z0 = 5;
inline void Track_TrackState::clear_z0() {
  z0_ = 0;
}
inline float Track_TrackState::z0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.z0)
  return z0_;
}
inline void Track_TrackState::set_z0(float value) {
  
  z0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.z0)
}

// float tanL = 6;
inline void Track_TrackState::clear_tanl() {
  tanl_ = 0;
}
inline float Track_TrackState::tanl() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.tanL)
  return tanl_;
}
inline void Track_TrackState::set_tanl(float value) {
  
  tanl_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.tanL)
}

// repeated float cov = 7;
inline int Track_TrackState::cov_size() const {
  return cov_.size();
}
inline void Track_TrackState::clear_cov() {
  cov_.Clear();
}
inline float Track_TrackState::cov(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.cov)
  return cov_.Get(index);
}
inline void Track_TrackState::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.cov)
}
inline void Track_TrackState::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Track.TrackState.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
Track_TrackState::cov() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Track.TrackState.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
Track_TrackState::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Track.TrackState.cov)
  return &cov_;
}

// repeated float ref = 8;
inline int Track_TrackState::ref_size() const {
  return ref_.size();
}
inline void Track_TrackState::clear_ref() {
  ref_.Clear();
}
inline float Track_TrackState::ref(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.TrackState.ref)
  return ref_.Get(index);
}
inline void Track_TrackState::set_ref(int index, float value) {
  ref_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.TrackState.ref)
}
inline void Track_TrackState::add_ref(float value) {
  ref_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Track.TrackState.ref)
}
inline const ::google::protobuf::RepeatedField< float >&
Track_TrackState::ref() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Track.TrackState.ref)
  return ref_;
}
inline ::google::protobuf::RepeatedField< float >*
Track_TrackState::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Track.TrackState.ref)
  return &ref_;
}

// -------------------------------------------------------------------

// Track

// uint32 id = 1;
inline void Track::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Track::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.id)
  return id_;
}
inline void Track::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.id)
}

// int32 type = 2;
inline void Track::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Track::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.type)
  return type_;
}
inline void Track::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.type)
}

// float chi2 = 3;
inline void Track::clear_chi2() {
  chi2_ = 0;
}
inline float Track::chi2() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.chi2)
  return chi2_;
}
inline void Track::set_chi2(float value) {
  
  chi2_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.chi2)
}

// int32 NDF = 4;
inline void Track::clear_ndf() {
  ndf_ = 0;
}
inline ::google::protobuf::int32 Track::ndf() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.NDF)
  return ndf_;
}
inline void Track::set_ndf(::google::protobuf::int32 value) {
  
  ndf_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.NDF)
}

// float dEdx = 5;
inline void Track::clear_dedx() {
  dedx_ = 0;
}
inline float Track::dedx() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.dEdx)
  return dedx_;
}
inline void Track::set_dedx(float value) {
  
  dedx_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.dEdx)
}

// float dEdxErr = 6;
inline void Track::clear_dedxerr() {
  dedxerr_ = 0;
}
inline float Track::dedxerr() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.dEdxErr)
  return dedxerr_;
}
inline void Track::set_dedxerr(float value) {
  
  dedxerr_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.dEdxErr)
}

// float radius = 7;
inline void Track::clear_radius() {
  radius_ = 0;
}
inline float Track::radius() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.radius)
  return radius_;
}
inline void Track::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.radius)
}

// repeated int32 subDetHits = 8;
inline int Track::subdethits_size() const {
  return subdethits_.size();
}
inline void Track::clear_subdethits() {
  subdethits_.Clear();
}
inline ::google::protobuf::int32 Track::subdethits(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.subDetHits)
  return subdethits_.Get(index);
}
inline void Track::set_subdethits(int index, ::google::protobuf::int32 value) {
  subdethits_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Track.subDetHits)
}
inline void Track::add_subdethits(::google::protobuf::int32 value) {
  subdethits_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Track.subDetHits)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Track::subdethits() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Track.subDetHits)
  return subdethits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Track::mutable_subdethits() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Track.subDetHits)
  return &subdethits_;
}

// repeated .proio.model.lcio.Track.TrackState states = 9;
inline int Track::states_size() const {
  return states_.size();
}
inline void Track::clear_states() {
  states_.Clear();
}
inline const ::proio::model::lcio::Track_TrackState& Track::states(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.states)
  return states_.Get(index);
}
inline ::proio::model::lcio::Track_TrackState* Track::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Track.states)
  return states_.Mutable(index);
}
inline ::proio::model::lcio::Track_TrackState* Track::add_states() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.Track.states)
  return states_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track_TrackState >*
Track::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Track.states)
  return &states_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track_TrackState >&
Track::states() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Track.states)
  return states_;
}

// repeated .proio.model.Reference hits = 10;
inline int Track::hits_size() const {
  return hits_.size();
}
inline void Track::clear_hits() {
  hits_.Clear();
}
inline const ::proio::model::Reference& Track::hits(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.hits)
  return hits_.Get(index);
}
inline ::proio::model::Reference* Track::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Track.hits)
  return hits_.Mutable(index);
}
inline ::proio::model::Reference* Track::add_hits() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.Track.hits)
  return hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
Track::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Track.hits)
  return &hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
Track::hits() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Track.hits)
  return hits_;
}

// repeated .proio.model.Reference tracks = 11;
inline int Track::tracks_size() const {
  return tracks_.size();
}
inline void Track::clear_tracks() {
  tracks_.Clear();
}
inline const ::proio::model::Reference& Track::tracks(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Track.tracks)
  return tracks_.Get(index);
}
inline ::proio::model::Reference* Track::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Track.tracks)
  return tracks_.Mutable(index);
}
inline ::proio::model::Reference* Track::add_tracks() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.Track.tracks)
  return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
Track::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Track.tracks)
  return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
Track::tracks() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Track.tracks)
  return tracks_;
}

// -------------------------------------------------------------------

// TrackCollection

// uint32 id = 1;
inline void TrackCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackCollection.id)
  return id_;
}
inline void TrackCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackCollection.id)
}

// uint32 flags = 2;
inline void TrackCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 TrackCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackCollection.flags)
  return flags_;
}
inline void TrackCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.TrackCollection.flags)
}

// .proio.model.Params params = 3;
inline bool TrackCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& TrackCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* TrackCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackCollection.params)
  return params_;
}
inline ::proio::model::Params* TrackCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.TrackCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.TrackCollection.params)
}

// repeated .proio.model.lcio.Track entries = 4;
inline int TrackCollection::entries_size() const {
  return entries_.size();
}
inline void TrackCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::Track& TrackCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.TrackCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::Track* TrackCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.TrackCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::Track* TrackCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.TrackCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track >*
TrackCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.TrackCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Track >&
TrackCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.TrackCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// SimCalorimeterHit_Contrib

// .proio.model.Reference MCParticle = 1;
inline bool SimCalorimeterHit_Contrib::has_mcparticle() const {
  return this != internal_default_instance() && mcparticle_ != NULL;
}
inline void SimCalorimeterHit_Contrib::clear_mcparticle() {
  if (GetArenaNoVirtual() == NULL && mcparticle_ != NULL) delete mcparticle_;
  mcparticle_ = NULL;
}
inline const ::proio::model::Reference& SimCalorimeterHit_Contrib::mcparticle() const {
  const ::proio::model::Reference* p = mcparticle_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.Contrib.MCParticle)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* SimCalorimeterHit_Contrib::mutable_mcparticle() {
  
  if (mcparticle_ == NULL) {
    mcparticle_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimCalorimeterHit.Contrib.MCParticle)
  return mcparticle_;
}
inline ::proio::model::Reference* SimCalorimeterHit_Contrib::release_mcparticle() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.SimCalorimeterHit.Contrib.MCParticle)
  
  ::proio::model::Reference* temp = mcparticle_;
  mcparticle_ = NULL;
  return temp;
}
inline void SimCalorimeterHit_Contrib::set_allocated_mcparticle(::proio::model::Reference* mcparticle) {
  delete mcparticle_;
  mcparticle_ = mcparticle;
  if (mcparticle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.SimCalorimeterHit.Contrib.MCParticle)
}

// float energy = 2;
inline void SimCalorimeterHit_Contrib::clear_energy() {
  energy_ = 0;
}
inline float SimCalorimeterHit_Contrib::energy() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.Contrib.energy)
  return energy_;
}
inline void SimCalorimeterHit_Contrib::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.Contrib.energy)
}

// float time = 3;
inline void SimCalorimeterHit_Contrib::clear_time() {
  time_ = 0;
}
inline float SimCalorimeterHit_Contrib::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.Contrib.time)
  return time_;
}
inline void SimCalorimeterHit_Contrib::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.Contrib.time)
}

// int32 PDG = 4;
inline void SimCalorimeterHit_Contrib::clear_pdg() {
  pdg_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHit_Contrib::pdg() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.Contrib.PDG)
  return pdg_;
}
inline void SimCalorimeterHit_Contrib::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.Contrib.PDG)
}

// repeated float stepPos = 5;
inline int SimCalorimeterHit_Contrib::steppos_size() const {
  return steppos_.size();
}
inline void SimCalorimeterHit_Contrib::clear_steppos() {
  steppos_.Clear();
}
inline float SimCalorimeterHit_Contrib::steppos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.Contrib.stepPos)
  return steppos_.Get(index);
}
inline void SimCalorimeterHit_Contrib::set_steppos(int index, float value) {
  steppos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.Contrib.stepPos)
}
inline void SimCalorimeterHit_Contrib::add_steppos(float value) {
  steppos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.SimCalorimeterHit.Contrib.stepPos)
}
inline const ::google::protobuf::RepeatedField< float >&
SimCalorimeterHit_Contrib::steppos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.SimCalorimeterHit.Contrib.stepPos)
  return steppos_;
}
inline ::google::protobuf::RepeatedField< float >*
SimCalorimeterHit_Contrib::mutable_steppos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.SimCalorimeterHit.Contrib.stepPos)
  return &steppos_;
}

// -------------------------------------------------------------------

// SimCalorimeterHit

// uint32 id = 1;
inline void SimCalorimeterHit::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SimCalorimeterHit::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.id)
  return id_;
}
inline void SimCalorimeterHit::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.id)
}

// .proio.model.Params params = 2;
inline bool SimCalorimeterHit::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void SimCalorimeterHit::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& SimCalorimeterHit::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* SimCalorimeterHit::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimCalorimeterHit.params)
  return params_;
}
inline ::proio::model::Params* SimCalorimeterHit::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.SimCalorimeterHit.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void SimCalorimeterHit::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.SimCalorimeterHit.params)
}

// int32 cellID0 = 3;
inline void SimCalorimeterHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHit::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.cellID0)
  return cellid0_;
}
inline void SimCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.cellID0)
}

// int32 cellID1 = 4;
inline void SimCalorimeterHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHit::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.cellID1)
  return cellid1_;
}
inline void SimCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.cellID1)
}

// float energy = 5;
inline void SimCalorimeterHit::clear_energy() {
  energy_ = 0;
}
inline float SimCalorimeterHit::energy() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.energy)
  return energy_;
}
inline void SimCalorimeterHit::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.energy)
}

// repeated float pos = 6;
inline int SimCalorimeterHit::pos_size() const {
  return pos_.size();
}
inline void SimCalorimeterHit::clear_pos() {
  pos_.Clear();
}
inline float SimCalorimeterHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.pos)
  return pos_.Get(index);
}
inline void SimCalorimeterHit::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHit.pos)
}
inline void SimCalorimeterHit::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.SimCalorimeterHit.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
SimCalorimeterHit::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.SimCalorimeterHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
SimCalorimeterHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.SimCalorimeterHit.pos)
  return &pos_;
}

// repeated .proio.model.lcio.SimCalorimeterHit.Contrib contributions = 7;
inline int SimCalorimeterHit::contributions_size() const {
  return contributions_.size();
}
inline void SimCalorimeterHit::clear_contributions() {
  contributions_.Clear();
}
inline const ::proio::model::lcio::SimCalorimeterHit_Contrib& SimCalorimeterHit::contributions(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHit.contributions)
  return contributions_.Get(index);
}
inline ::proio::model::lcio::SimCalorimeterHit_Contrib* SimCalorimeterHit::mutable_contributions(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimCalorimeterHit.contributions)
  return contributions_.Mutable(index);
}
inline ::proio::model::lcio::SimCalorimeterHit_Contrib* SimCalorimeterHit::add_contributions() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.SimCalorimeterHit.contributions)
  return contributions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit_Contrib >*
SimCalorimeterHit::mutable_contributions() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.SimCalorimeterHit.contributions)
  return &contributions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit_Contrib >&
SimCalorimeterHit::contributions() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.SimCalorimeterHit.contributions)
  return contributions_;
}

// -------------------------------------------------------------------

// SimCalorimeterHitCollection

// uint32 id = 1;
inline void SimCalorimeterHitCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SimCalorimeterHitCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHitCollection.id)
  return id_;
}
inline void SimCalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHitCollection.id)
}

// uint32 flags = 2;
inline void SimCalorimeterHitCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 SimCalorimeterHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHitCollection.flags)
  return flags_;
}
inline void SimCalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.SimCalorimeterHitCollection.flags)
}

// .proio.model.Params params = 3;
inline bool SimCalorimeterHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void SimCalorimeterHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& SimCalorimeterHitCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHitCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* SimCalorimeterHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimCalorimeterHitCollection.params)
  return params_;
}
inline ::proio::model::Params* SimCalorimeterHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.SimCalorimeterHitCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void SimCalorimeterHitCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.SimCalorimeterHitCollection.params)
}

// repeated .proio.model.lcio.SimCalorimeterHit entries = 4;
inline int SimCalorimeterHitCollection::entries_size() const {
  return entries_.size();
}
inline void SimCalorimeterHitCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::SimCalorimeterHit& SimCalorimeterHitCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.SimCalorimeterHitCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::SimCalorimeterHit* SimCalorimeterHitCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.SimCalorimeterHitCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::SimCalorimeterHit* SimCalorimeterHitCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.SimCalorimeterHitCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit >*
SimCalorimeterHitCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.SimCalorimeterHitCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::SimCalorimeterHit >&
SimCalorimeterHitCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.SimCalorimeterHitCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RawCalorimeterHit

// uint32 id = 1;
inline void RawCalorimeterHit::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RawCalorimeterHit::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHit.id)
  return id_;
}
inline void RawCalorimeterHit::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RawCalorimeterHit.id)
}

// int32 cellID0 = 2;
inline void RawCalorimeterHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHit.cellID0)
  return cellid0_;
}
inline void RawCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RawCalorimeterHit.cellID0)
}

// int32 cellID1 = 3;
inline void RawCalorimeterHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHit.cellID1)
  return cellid1_;
}
inline void RawCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RawCalorimeterHit.cellID1)
}

// int32 amplitude = 4;
inline void RawCalorimeterHit::clear_amplitude() {
  amplitude_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::amplitude() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHit.amplitude)
  return amplitude_;
}
inline void RawCalorimeterHit::set_amplitude(::google::protobuf::int32 value) {
  
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RawCalorimeterHit.amplitude)
}

// int32 timeStamp = 5;
inline void RawCalorimeterHit::clear_timestamp() {
  timestamp_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::timestamp() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHit.timeStamp)
  return timestamp_;
}
inline void RawCalorimeterHit::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RawCalorimeterHit.timeStamp)
}

// -------------------------------------------------------------------

// RawCalorimeterHitCollection

// uint32 id = 1;
inline void RawCalorimeterHitCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RawCalorimeterHitCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHitCollection.id)
  return id_;
}
inline void RawCalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RawCalorimeterHitCollection.id)
}

// uint32 flags = 2;
inline void RawCalorimeterHitCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 RawCalorimeterHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHitCollection.flags)
  return flags_;
}
inline void RawCalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RawCalorimeterHitCollection.flags)
}

// .proio.model.Params params = 3;
inline bool RawCalorimeterHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void RawCalorimeterHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& RawCalorimeterHitCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHitCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* RawCalorimeterHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RawCalorimeterHitCollection.params)
  return params_;
}
inline ::proio::model::Params* RawCalorimeterHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.RawCalorimeterHitCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void RawCalorimeterHitCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.RawCalorimeterHitCollection.params)
}

// repeated .proio.model.lcio.RawCalorimeterHit entries = 4;
inline int RawCalorimeterHitCollection::entries_size() const {
  return entries_.size();
}
inline void RawCalorimeterHitCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::RawCalorimeterHit& RawCalorimeterHitCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RawCalorimeterHitCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::RawCalorimeterHit* RawCalorimeterHitCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RawCalorimeterHitCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::RawCalorimeterHit* RawCalorimeterHitCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.RawCalorimeterHitCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RawCalorimeterHit >*
RawCalorimeterHitCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RawCalorimeterHitCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RawCalorimeterHit >&
RawCalorimeterHitCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RawCalorimeterHitCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CalorimeterHit

// uint32 id = 1;
inline void CalorimeterHit::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CalorimeterHit::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.id)
  return id_;
}
inline void CalorimeterHit::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.id)
}

// int32 cellID0 = 2;
inline void CalorimeterHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 CalorimeterHit::cellid0() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.cellID0)
  return cellid0_;
}
inline void CalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.cellID0)
}

// int32 cellID1 = 3;
inline void CalorimeterHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 CalorimeterHit::cellid1() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.cellID1)
  return cellid1_;
}
inline void CalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.cellID1)
}

// float energy = 4;
inline void CalorimeterHit::clear_energy() {
  energy_ = 0;
}
inline float CalorimeterHit::energy() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.energy)
  return energy_;
}
inline void CalorimeterHit::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.energy)
}

// float energyErr = 5;
inline void CalorimeterHit::clear_energyerr() {
  energyerr_ = 0;
}
inline float CalorimeterHit::energyerr() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.energyErr)
  return energyerr_;
}
inline void CalorimeterHit::set_energyerr(float value) {
  
  energyerr_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.energyErr)
}

// float time = 6;
inline void CalorimeterHit::clear_time() {
  time_ = 0;
}
inline float CalorimeterHit::time() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.time)
  return time_;
}
inline void CalorimeterHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.time)
}

// repeated float pos = 7;
inline int CalorimeterHit::pos_size() const {
  return pos_.size();
}
inline void CalorimeterHit::clear_pos() {
  pos_.Clear();
}
inline float CalorimeterHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.pos)
  return pos_.Get(index);
}
inline void CalorimeterHit::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.pos)
}
inline void CalorimeterHit::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.CalorimeterHit.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
CalorimeterHit::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.CalorimeterHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
CalorimeterHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.CalorimeterHit.pos)
  return &pos_;
}

// int32 type = 8;
inline void CalorimeterHit::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CalorimeterHit::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.type)
  return type_;
}
inline void CalorimeterHit::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHit.type)
}

// .proio.model.Reference raw = 9;
inline bool CalorimeterHit::has_raw() const {
  return this != internal_default_instance() && raw_ != NULL;
}
inline void CalorimeterHit::clear_raw() {
  if (GetArenaNoVirtual() == NULL && raw_ != NULL) delete raw_;
  raw_ = NULL;
}
inline const ::proio::model::Reference& CalorimeterHit::raw() const {
  const ::proio::model::Reference* p = raw_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHit.raw)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* CalorimeterHit::mutable_raw() {
  
  if (raw_ == NULL) {
    raw_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.CalorimeterHit.raw)
  return raw_;
}
inline ::proio::model::Reference* CalorimeterHit::release_raw() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.CalorimeterHit.raw)
  
  ::proio::model::Reference* temp = raw_;
  raw_ = NULL;
  return temp;
}
inline void CalorimeterHit::set_allocated_raw(::proio::model::Reference* raw) {
  delete raw_;
  raw_ = raw;
  if (raw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.CalorimeterHit.raw)
}

// -------------------------------------------------------------------

// CalorimeterHitCollection

// uint32 id = 1;
inline void CalorimeterHitCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 CalorimeterHitCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHitCollection.id)
  return id_;
}
inline void CalorimeterHitCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHitCollection.id)
}

// uint32 flags = 2;
inline void CalorimeterHitCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 CalorimeterHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHitCollection.flags)
  return flags_;
}
inline void CalorimeterHitCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.CalorimeterHitCollection.flags)
}

// .proio.model.Params params = 3;
inline bool CalorimeterHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void CalorimeterHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& CalorimeterHitCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHitCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* CalorimeterHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.CalorimeterHitCollection.params)
  return params_;
}
inline ::proio::model::Params* CalorimeterHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.CalorimeterHitCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void CalorimeterHitCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.CalorimeterHitCollection.params)
}

// repeated .proio.model.lcio.CalorimeterHit entries = 4;
inline int CalorimeterHitCollection::entries_size() const {
  return entries_.size();
}
inline void CalorimeterHitCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::CalorimeterHit& CalorimeterHitCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.CalorimeterHitCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::CalorimeterHit* CalorimeterHitCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.CalorimeterHitCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::CalorimeterHit* CalorimeterHitCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.CalorimeterHitCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::CalorimeterHit >*
CalorimeterHitCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.CalorimeterHitCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::CalorimeterHit >&
CalorimeterHitCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.CalorimeterHitCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Cluster

// uint32 id = 1;
inline void Cluster::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Cluster::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.id)
  return id_;
}
inline void Cluster::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.id)
}

// int32 type = 2;
inline void Cluster::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Cluster::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.type)
  return type_;
}
inline void Cluster::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.type)
}

// float energy = 3;
inline void Cluster::clear_energy() {
  energy_ = 0;
}
inline float Cluster::energy() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.energy)
  return energy_;
}
inline void Cluster::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.energy)
}

// float energyErr = 4;
inline void Cluster::clear_energyerr() {
  energyerr_ = 0;
}
inline float Cluster::energyerr() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.energyErr)
  return energyerr_;
}
inline void Cluster::set_energyerr(float value) {
  
  energyerr_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.energyErr)
}

// repeated float pos = 5;
inline int Cluster::pos_size() const {
  return pos_.size();
}
inline void Cluster::clear_pos() {
  pos_.Clear();
}
inline float Cluster::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.pos)
  return pos_.Get(index);
}
inline void Cluster::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.pos)
}
inline void Cluster::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.pos)
  return &pos_;
}

// repeated float posErr = 6;
inline int Cluster::poserr_size() const {
  return poserr_.size();
}
inline void Cluster::clear_poserr() {
  poserr_.Clear();
}
inline float Cluster::poserr(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.posErr)
  return poserr_.Get(index);
}
inline void Cluster::set_poserr(int index, float value) {
  poserr_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.posErr)
}
inline void Cluster::add_poserr(float value) {
  poserr_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.posErr)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::poserr() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.posErr)
  return poserr_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_poserr() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.posErr)
  return &poserr_;
}

// float theta = 7;
inline void Cluster::clear_theta() {
  theta_ = 0;
}
inline float Cluster::theta() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.theta)
  return theta_;
}
inline void Cluster::set_theta(float value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.theta)
}

// float phi = 8;
inline void Cluster::clear_phi() {
  phi_ = 0;
}
inline float Cluster::phi() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.phi)
  return phi_;
}
inline void Cluster::set_phi(float value) {
  
  phi_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.phi)
}

// repeated float dirErr = 9;
inline int Cluster::direrr_size() const {
  return direrr_.size();
}
inline void Cluster::clear_direrr() {
  direrr_.Clear();
}
inline float Cluster::direrr(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.dirErr)
  return direrr_.Get(index);
}
inline void Cluster::set_direrr(int index, float value) {
  direrr_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.dirErr)
}
inline void Cluster::add_direrr(float value) {
  direrr_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.dirErr)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::direrr() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.dirErr)
  return direrr_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_direrr() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.dirErr)
  return &direrr_;
}

// repeated float shape = 10;
inline int Cluster::shape_size() const {
  return shape_.size();
}
inline void Cluster::clear_shape() {
  shape_.Clear();
}
inline float Cluster::shape(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.shape)
  return shape_.Get(index);
}
inline void Cluster::set_shape(int index, float value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.shape)
}
inline void Cluster::add_shape(float value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.shape)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::shape() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.shape)
  return &shape_;
}

// repeated .proio.model.lcio.ParticleID PIDs = 11;
inline int Cluster::pids_size() const {
  return pids_.size();
}
inline void Cluster::clear_pids() {
  pids_.Clear();
}
inline const ::proio::model::lcio::ParticleID& Cluster::pids(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.PIDs)
  return pids_.Get(index);
}
inline ::proio::model::lcio::ParticleID* Cluster::mutable_pids(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Cluster.PIDs)
  return pids_.Mutable(index);
}
inline ::proio::model::lcio::ParticleID* Cluster::add_pids() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.PIDs)
  return pids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >*
Cluster::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.PIDs)
  return &pids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >&
Cluster::pids() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.PIDs)
  return pids_;
}

// repeated .proio.model.Reference clusters = 12;
inline int Cluster::clusters_size() const {
  return clusters_.size();
}
inline void Cluster::clear_clusters() {
  clusters_.Clear();
}
inline const ::proio::model::Reference& Cluster::clusters(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.clusters)
  return clusters_.Get(index);
}
inline ::proio::model::Reference* Cluster::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Cluster.clusters)
  return clusters_.Mutable(index);
}
inline ::proio::model::Reference* Cluster::add_clusters() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
Cluster::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
Cluster::clusters() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.clusters)
  return clusters_;
}

// repeated .proio.model.Reference hits = 13;
inline int Cluster::hits_size() const {
  return hits_.size();
}
inline void Cluster::clear_hits() {
  hits_.Clear();
}
inline const ::proio::model::Reference& Cluster::hits(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.hits)
  return hits_.Get(index);
}
inline ::proio::model::Reference* Cluster::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Cluster.hits)
  return hits_.Mutable(index);
}
inline ::proio::model::Reference* Cluster::add_hits() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.hits)
  return hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
Cluster::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.hits)
  return &hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
Cluster::hits() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.hits)
  return hits_;
}

// repeated float weights = 14;
inline int Cluster::weights_size() const {
  return weights_.size();
}
inline void Cluster::clear_weights() {
  weights_.Clear();
}
inline float Cluster::weights(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.weights)
  return weights_.Get(index);
}
inline void Cluster::set_weights(int index, float value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.weights)
}
inline void Cluster::add_weights(float value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.weights)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::weights() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.weights)
  return weights_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.weights)
  return &weights_;
}

// repeated float subDetEnes = 15;
inline int Cluster::subdetenes_size() const {
  return subdetenes_.size();
}
inline void Cluster::clear_subdetenes() {
  subdetenes_.Clear();
}
inline float Cluster::subdetenes(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Cluster.subDetEnes)
  return subdetenes_.Get(index);
}
inline void Cluster::set_subdetenes(int index, float value) {
  subdetenes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Cluster.subDetEnes)
}
inline void Cluster::add_subdetenes(float value) {
  subdetenes_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Cluster.subDetEnes)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::subdetenes() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Cluster.subDetEnes)
  return subdetenes_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_subdetenes() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Cluster.subDetEnes)
  return &subdetenes_;
}

// -------------------------------------------------------------------

// ClusterCollection

// uint32 id = 1;
inline void ClusterCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ClusterCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ClusterCollection.id)
  return id_;
}
inline void ClusterCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.ClusterCollection.id)
}

// uint32 flags = 2;
inline void ClusterCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 ClusterCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ClusterCollection.flags)
  return flags_;
}
inline void ClusterCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.ClusterCollection.flags)
}

// .proio.model.Params params = 3;
inline bool ClusterCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void ClusterCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& ClusterCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.ClusterCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* ClusterCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.ClusterCollection.params)
  return params_;
}
inline ::proio::model::Params* ClusterCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.ClusterCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void ClusterCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.ClusterCollection.params)
}

// repeated .proio.model.lcio.Cluster entries = 4;
inline int ClusterCollection::entries_size() const {
  return entries_.size();
}
inline void ClusterCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::Cluster& ClusterCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.ClusterCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::Cluster* ClusterCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.ClusterCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::Cluster* ClusterCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.ClusterCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Cluster >*
ClusterCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.ClusterCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Cluster >&
ClusterCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.ClusterCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// RecParticle

// uint32 id = 1;
inline void RecParticle::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RecParticle::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.id)
  return id_;
}
inline void RecParticle::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.id)
}

// int32 type = 2;
inline void RecParticle::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 RecParticle::type() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.type)
  return type_;
}
inline void RecParticle::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.type)
}

// repeated float p = 3;
inline int RecParticle::p_size() const {
  return p_.size();
}
inline void RecParticle::clear_p() {
  p_.Clear();
}
inline float RecParticle::p(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.p)
  return p_.Get(index);
}
inline void RecParticle::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.p)
}
inline void RecParticle::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticle.p)
}
inline const ::google::protobuf::RepeatedField< float >&
RecParticle::p() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticle.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< float >*
RecParticle::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticle.p)
  return &p_;
}

// float energy = 4;
inline void RecParticle::clear_energy() {
  energy_ = 0;
}
inline float RecParticle::energy() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.energy)
  return energy_;
}
inline void RecParticle::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.energy)
}

// repeated float cov = 5;
inline int RecParticle::cov_size() const {
  return cov_.size();
}
inline void RecParticle::clear_cov() {
  cov_.Clear();
}
inline float RecParticle::cov(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.cov)
  return cov_.Get(index);
}
inline void RecParticle::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.cov)
}
inline void RecParticle::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticle.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
RecParticle::cov() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticle.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
RecParticle::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticle.cov)
  return &cov_;
}

// float mass = 6;
inline void RecParticle::clear_mass() {
  mass_ = 0;
}
inline float RecParticle::mass() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.mass)
  return mass_;
}
inline void RecParticle::set_mass(float value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.mass)
}

// float charge = 7;
inline void RecParticle::clear_charge() {
  charge_ = 0;
}
inline float RecParticle::charge() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.charge)
  return charge_;
}
inline void RecParticle::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.charge)
}

// repeated float ref = 8;
inline int RecParticle::ref_size() const {
  return ref_.size();
}
inline void RecParticle::clear_ref() {
  ref_.Clear();
}
inline float RecParticle::ref(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.ref)
  return ref_.Get(index);
}
inline void RecParticle::set_ref(int index, float value) {
  ref_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.ref)
}
inline void RecParticle::add_ref(float value) {
  ref_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticle.ref)
}
inline const ::google::protobuf::RepeatedField< float >&
RecParticle::ref() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticle.ref)
  return ref_;
}
inline ::google::protobuf::RepeatedField< float >*
RecParticle::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticle.ref)
  return &ref_;
}

// repeated .proio.model.lcio.ParticleID PIDs = 9;
inline int RecParticle::pids_size() const {
  return pids_.size();
}
inline void RecParticle::clear_pids() {
  pids_.Clear();
}
inline const ::proio::model::lcio::ParticleID& RecParticle::pids(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.PIDs)
  return pids_.Get(index);
}
inline ::proio::model::lcio::ParticleID* RecParticle::mutable_pids(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RecParticle.PIDs)
  return pids_.Mutable(index);
}
inline ::proio::model::lcio::ParticleID* RecParticle::add_pids() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticle.PIDs)
  return pids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >*
RecParticle::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticle.PIDs)
  return &pids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::ParticleID >&
RecParticle::pids() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticle.PIDs)
  return pids_;
}

// int32 PIDUsed = 10;
inline void RecParticle::clear_pidused() {
  pidused_ = 0;
}
inline ::google::protobuf::int32 RecParticle::pidused() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.PIDUsed)
  return pidused_;
}
inline void RecParticle::set_pidused(::google::protobuf::int32 value) {
  
  pidused_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.PIDUsed)
}

// float goodnessOfPID = 11;
inline void RecParticle::clear_goodnessofpid() {
  goodnessofpid_ = 0;
}
inline float RecParticle::goodnessofpid() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.goodnessOfPID)
  return goodnessofpid_;
}
inline void RecParticle::set_goodnessofpid(float value) {
  
  goodnessofpid_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticle.goodnessOfPID)
}

// repeated .proio.model.Reference recs = 12;
inline int RecParticle::recs_size() const {
  return recs_.size();
}
inline void RecParticle::clear_recs() {
  recs_.Clear();
}
inline const ::proio::model::Reference& RecParticle::recs(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.recs)
  return recs_.Get(index);
}
inline ::proio::model::Reference* RecParticle::mutable_recs(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RecParticle.recs)
  return recs_.Mutable(index);
}
inline ::proio::model::Reference* RecParticle::add_recs() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticle.recs)
  return recs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
RecParticle::mutable_recs() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticle.recs)
  return &recs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
RecParticle::recs() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticle.recs)
  return recs_;
}

// repeated .proio.model.Reference tracks = 13;
inline int RecParticle::tracks_size() const {
  return tracks_.size();
}
inline void RecParticle::clear_tracks() {
  tracks_.Clear();
}
inline const ::proio::model::Reference& RecParticle::tracks(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.tracks)
  return tracks_.Get(index);
}
inline ::proio::model::Reference* RecParticle::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RecParticle.tracks)
  return tracks_.Mutable(index);
}
inline ::proio::model::Reference* RecParticle::add_tracks() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticle.tracks)
  return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
RecParticle::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticle.tracks)
  return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
RecParticle::tracks() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticle.tracks)
  return tracks_;
}

// repeated .proio.model.Reference clusters = 14;
inline int RecParticle::clusters_size() const {
  return clusters_.size();
}
inline void RecParticle::clear_clusters() {
  clusters_.Clear();
}
inline const ::proio::model::Reference& RecParticle::clusters(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.clusters)
  return clusters_.Get(index);
}
inline ::proio::model::Reference* RecParticle::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RecParticle.clusters)
  return clusters_.Mutable(index);
}
inline ::proio::model::Reference* RecParticle::add_clusters() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticle.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >*
RecParticle::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticle.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::Reference >&
RecParticle::clusters() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticle.clusters)
  return clusters_;
}

// .proio.model.Reference startVtx = 15;
inline bool RecParticle::has_startvtx() const {
  return this != internal_default_instance() && startvtx_ != NULL;
}
inline void RecParticle::clear_startvtx() {
  if (GetArenaNoVirtual() == NULL && startvtx_ != NULL) delete startvtx_;
  startvtx_ = NULL;
}
inline const ::proio::model::Reference& RecParticle::startvtx() const {
  const ::proio::model::Reference* p = startvtx_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticle.startVtx)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* RecParticle::mutable_startvtx() {
  
  if (startvtx_ == NULL) {
    startvtx_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RecParticle.startVtx)
  return startvtx_;
}
inline ::proio::model::Reference* RecParticle::release_startvtx() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.RecParticle.startVtx)
  
  ::proio::model::Reference* temp = startvtx_;
  startvtx_ = NULL;
  return temp;
}
inline void RecParticle::set_allocated_startvtx(::proio::model::Reference* startvtx) {
  delete startvtx_;
  startvtx_ = startvtx;
  if (startvtx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.RecParticle.startVtx)
}

// -------------------------------------------------------------------

// RecParticleCollection

// uint32 id = 1;
inline void RecParticleCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RecParticleCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticleCollection.id)
  return id_;
}
inline void RecParticleCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticleCollection.id)
}

// uint32 flags = 2;
inline void RecParticleCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 RecParticleCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticleCollection.flags)
  return flags_;
}
inline void RecParticleCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RecParticleCollection.flags)
}

// .proio.model.Params params = 3;
inline bool RecParticleCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void RecParticleCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& RecParticleCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticleCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* RecParticleCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RecParticleCollection.params)
  return params_;
}
inline ::proio::model::Params* RecParticleCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.RecParticleCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void RecParticleCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.RecParticleCollection.params)
}

// repeated .proio.model.lcio.RecParticle entries = 4;
inline int RecParticleCollection::entries_size() const {
  return entries_.size();
}
inline void RecParticleCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::RecParticle& RecParticleCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RecParticleCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::RecParticle* RecParticleCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RecParticleCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::RecParticle* RecParticleCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.RecParticleCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RecParticle >*
RecParticleCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RecParticleCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::RecParticle >&
RecParticleCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RecParticleCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Vertex

// uint32 id = 1;
inline void Vertex::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Vertex::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.id)
  return id_;
}
inline void Vertex::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.id)
}

// int32 primary = 2;
inline void Vertex::clear_primary() {
  primary_ = 0;
}
inline ::google::protobuf::int32 Vertex::primary() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.primary)
  return primary_;
}
inline void Vertex::set_primary(::google::protobuf::int32 value) {
  
  primary_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.primary)
}

// int32 algType = 3;
inline void Vertex::clear_algtype() {
  algtype_ = 0;
}
inline ::google::protobuf::int32 Vertex::algtype() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.algType)
  return algtype_;
}
inline void Vertex::set_algtype(::google::protobuf::int32 value) {
  
  algtype_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.algType)
}

// float chi2 = 4;
inline void Vertex::clear_chi2() {
  chi2_ = 0;
}
inline float Vertex::chi2() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.chi2)
  return chi2_;
}
inline void Vertex::set_chi2(float value) {
  
  chi2_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.chi2)
}

// float prob = 5;
inline void Vertex::clear_prob() {
  prob_ = 0;
}
inline float Vertex::prob() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.prob)
  return prob_;
}
inline void Vertex::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.prob)
}

// repeated float pos = 6;
inline int Vertex::pos_size() const {
  return pos_.size();
}
inline void Vertex::clear_pos() {
  pos_.Clear();
}
inline float Vertex::pos(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.pos)
  return pos_.Get(index);
}
inline void Vertex::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.pos)
}
inline void Vertex::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Vertex.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
Vertex::pos() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Vertex.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
Vertex::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Vertex.pos)
  return &pos_;
}

// repeated float cov = 7;
inline int Vertex::cov_size() const {
  return cov_.size();
}
inline void Vertex::clear_cov() {
  cov_.Clear();
}
inline float Vertex::cov(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.cov)
  return cov_.Get(index);
}
inline void Vertex::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.cov)
}
inline void Vertex::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Vertex.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
Vertex::cov() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Vertex.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
Vertex::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Vertex.cov)
  return &cov_;
}

// repeated float params = 8;
inline int Vertex::params_size() const {
  return params_.size();
}
inline void Vertex::clear_params() {
  params_.Clear();
}
inline float Vertex::params(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.params)
  return params_.Get(index);
}
inline void Vertex::set_params(int index, float value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.model.lcio.Vertex.params)
}
inline void Vertex::add_params(float value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:proio.model.lcio.Vertex.params)
}
inline const ::google::protobuf::RepeatedField< float >&
Vertex::params() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.Vertex.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< float >*
Vertex::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.Vertex.params)
  return &params_;
}

// .proio.model.Reference recPart = 9;
inline bool Vertex::has_recpart() const {
  return this != internal_default_instance() && recpart_ != NULL;
}
inline void Vertex::clear_recpart() {
  if (GetArenaNoVirtual() == NULL && recpart_ != NULL) delete recpart_;
  recpart_ = NULL;
}
inline const ::proio::model::Reference& Vertex::recpart() const {
  const ::proio::model::Reference* p = recpart_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.Vertex.recPart)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* Vertex::mutable_recpart() {
  
  if (recpart_ == NULL) {
    recpart_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Vertex.recPart)
  return recpart_;
}
inline ::proio::model::Reference* Vertex::release_recpart() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.Vertex.recPart)
  
  ::proio::model::Reference* temp = recpart_;
  recpart_ = NULL;
  return temp;
}
inline void Vertex::set_allocated_recpart(::proio::model::Reference* recpart) {
  delete recpart_;
  recpart_ = recpart;
  if (recpart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.Vertex.recPart)
}

// -------------------------------------------------------------------

// VertexCollection

// uint32 id = 1;
inline void VertexCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 VertexCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.VertexCollection.id)
  return id_;
}
inline void VertexCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.VertexCollection.id)
}

// uint32 flags = 2;
inline void VertexCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 VertexCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.VertexCollection.flags)
  return flags_;
}
inline void VertexCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.VertexCollection.flags)
}

// .proio.model.Params params = 3;
inline bool VertexCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void VertexCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& VertexCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.VertexCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* VertexCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.VertexCollection.params)
  return params_;
}
inline ::proio::model::Params* VertexCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.VertexCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void VertexCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.VertexCollection.params)
}

// repeated .proio.model.lcio.Vertex entries = 4;
inline int VertexCollection::entries_size() const {
  return entries_.size();
}
inline void VertexCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::Vertex& VertexCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.VertexCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::Vertex* VertexCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.VertexCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::Vertex* VertexCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.VertexCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Vertex >*
VertexCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.VertexCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Vertex >&
VertexCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.VertexCollection.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Relation

// uint32 id = 1;
inline void Relation::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Relation::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Relation.id)
  return id_;
}
inline void Relation::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Relation.id)
}

// .proio.model.Reference from = 2;
inline bool Relation::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void Relation::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
inline const ::proio::model::Reference& Relation::from() const {
  const ::proio::model::Reference* p = from_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.Relation.from)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* Relation::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Relation.from)
  return from_;
}
inline ::proio::model::Reference* Relation::release_from() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.Relation.from)
  
  ::proio::model::Reference* temp = from_;
  from_ = NULL;
  return temp;
}
inline void Relation::set_allocated_from(::proio::model::Reference* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.Relation.from)
}

// .proio.model.Reference to = 3;
inline bool Relation::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline void Relation::clear_to() {
  if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
  to_ = NULL;
}
inline const ::proio::model::Reference& Relation::to() const {
  const ::proio::model::Reference* p = to_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.Relation.to)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Reference*>(
      &::proio::model::_Reference_default_instance_);
}
inline ::proio::model::Reference* Relation::mutable_to() {
  
  if (to_ == NULL) {
    to_ = new ::proio::model::Reference;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.Relation.to)
  return to_;
}
inline ::proio::model::Reference* Relation::release_to() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.Relation.to)
  
  ::proio::model::Reference* temp = to_;
  to_ = NULL;
  return temp;
}
inline void Relation::set_allocated_to(::proio::model::Reference* to) {
  delete to_;
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.Relation.to)
}

// float weight = 4;
inline void Relation::clear_weight() {
  weight_ = 0;
}
inline float Relation::weight() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.Relation.weight)
  return weight_;
}
inline void Relation::set_weight(float value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.Relation.weight)
}

// -------------------------------------------------------------------

// RelationCollection

// uint32 id = 1;
inline void RelationCollection::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RelationCollection::id() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RelationCollection.id)
  return id_;
}
inline void RelationCollection::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RelationCollection.id)
}

// uint32 flags = 2;
inline void RelationCollection::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 RelationCollection::flags() const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RelationCollection.flags)
  return flags_;
}
inline void RelationCollection::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proio.model.lcio.RelationCollection.flags)
}

// .proio.model.Params params = 3;
inline bool RelationCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void RelationCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::proio::model::Params& RelationCollection::params() const {
  const ::proio::model::Params* p = params_;
  // @@protoc_insertion_point(field_get:proio.model.lcio.RelationCollection.params)
  return p != NULL ? *p : *reinterpret_cast<const ::proio::model::Params*>(
      &::proio::model::_Params_default_instance_);
}
inline ::proio::model::Params* RelationCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::proio::model::Params;
  }
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RelationCollection.params)
  return params_;
}
inline ::proio::model::Params* RelationCollection::release_params() {
  // @@protoc_insertion_point(field_release:proio.model.lcio.RelationCollection.params)
  
  ::proio::model::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void RelationCollection::set_allocated_params(::proio::model::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proio.model.lcio.RelationCollection.params)
}

// repeated .proio.model.lcio.Relation entries = 4;
inline int RelationCollection::entries_size() const {
  return entries_.size();
}
inline void RelationCollection::clear_entries() {
  entries_.Clear();
}
inline const ::proio::model::lcio::Relation& RelationCollection::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.model.lcio.RelationCollection.entries)
  return entries_.Get(index);
}
inline ::proio::model::lcio::Relation* RelationCollection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proio.model.lcio.RelationCollection.entries)
  return entries_.Mutable(index);
}
inline ::proio::model::lcio::Relation* RelationCollection::add_entries() {
  // @@protoc_insertion_point(field_add:proio.model.lcio.RelationCollection.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Relation >*
RelationCollection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.model.lcio.RelationCollection.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::model::lcio::Relation >&
RelationCollection::entries() const {
  // @@protoc_insertion_point(field_list:proio.model.lcio.RelationCollection.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace lcio
}  // namespace model
}  // namespace proio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proio_2fmodel_2flcio_2flcio_2eproto__INCLUDED
