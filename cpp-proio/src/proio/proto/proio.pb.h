// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/proio.proto

#ifndef PROTOBUF_proto_2fproio_2eproto__INCLUDED
#define PROTOBUF_proto_2fproio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proio {
namespace proto {
class BucketHeader;
class BucketHeaderDefaultTypeInternal;
extern BucketHeaderDefaultTypeInternal _BucketHeader_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_EntriesEntry;
class Event_EntriesEntryDefaultTypeInternal;
extern Event_EntriesEntryDefaultTypeInternal _Event_EntriesEntry_default_instance_;
class Event_TagsEntry;
class Event_TagsEntryDefaultTypeInternal;
extern Event_TagsEntryDefaultTypeInternal _Event_TagsEntry_default_instance_;
class Event_TypesEntry;
class Event_TypesEntryDefaultTypeInternal;
extern Event_TypesEntryDefaultTypeInternal _Event_TypesEntry_default_instance_;
class Meta;
class MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
}  // namespace proto
}  // namespace proio

namespace proio {
namespace proto {

namespace protobuf_proto_2fproio_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_2fproio_2eproto

enum BucketHeader_CompType {
  BucketHeader_CompType_NONE = 0,
  BucketHeader_CompType_GZIP = 1,
  BucketHeader_CompType_LZ4 = 2,
  BucketHeader_CompType_BucketHeader_CompType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BucketHeader_CompType_BucketHeader_CompType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BucketHeader_CompType_IsValid(int value);
const BucketHeader_CompType BucketHeader_CompType_CompType_MIN = BucketHeader_CompType_NONE;
const BucketHeader_CompType BucketHeader_CompType_CompType_MAX = BucketHeader_CompType_LZ4;
const int BucketHeader_CompType_CompType_ARRAYSIZE = BucketHeader_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BucketHeader_CompType_descriptor();
inline const ::std::string& BucketHeader_CompType_Name(BucketHeader_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BucketHeader_CompType_descriptor(), value);
}
inline bool BucketHeader_CompType_Parse(
    const ::std::string& name, BucketHeader_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BucketHeader_CompType>(
    BucketHeader_CompType_descriptor(), name, value);
}
// ===================================================================

class Meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.proto.Meta) */ {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Meta* other);
  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const PROTOBUF_FINAL { return New(NULL); }

  Meta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proio.proto.Meta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fproio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BucketHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.proto.BucketHeader) */ {
 public:
  BucketHeader();
  virtual ~BucketHeader();

  BucketHeader(const BucketHeader& from);

  inline BucketHeader& operator=(const BucketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketHeader(BucketHeader&& from) noexcept
    : BucketHeader() {
    *this = ::std::move(from);
  }

  inline BucketHeader& operator=(BucketHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketHeader& default_instance();

  static inline const BucketHeader* internal_default_instance() {
    return reinterpret_cast<const BucketHeader*>(
               &_BucketHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BucketHeader* other);
  friend void swap(BucketHeader& a, BucketHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  BucketHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BucketHeader& from);
  void MergeFrom(const BucketHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BucketHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BucketHeader_CompType CompType;
  static const CompType NONE =
    BucketHeader_CompType_NONE;
  static const CompType GZIP =
    BucketHeader_CompType_GZIP;
  static const CompType LZ4 =
    BucketHeader_CompType_LZ4;
  static inline bool CompType_IsValid(int value) {
    return BucketHeader_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    BucketHeader_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    BucketHeader_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    BucketHeader_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return BucketHeader_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return BucketHeader_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return BucketHeader_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes fileDescriptors = 4;
  int filedescriptors_size() const;
  void clear_filedescriptors();
  static const int kFileDescriptorsFieldNumber = 4;
  const ::std::string& filedescriptors(int index) const;
  ::std::string* mutable_filedescriptors(int index);
  void set_filedescriptors(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_filedescriptors(int index, ::std::string&& value);
  #endif
  void set_filedescriptors(int index, const char* value);
  void set_filedescriptors(int index, const void* value, size_t size);
  ::std::string* add_filedescriptors();
  void add_filedescriptors(const ::std::string& value);
  #if LANG_CXX11
  void add_filedescriptors(::std::string&& value);
  #endif
  void add_filedescriptors(const char* value);
  void add_filedescriptors(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& filedescriptors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filedescriptors();

  // repeated .proio.proto.Meta metaData = 5;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetaDataFieldNumber = 5;
  const ::proio::proto::Meta& metadata(int index) const;
  ::proio::proto::Meta* mutable_metadata(int index);
  ::proio::proto::Meta* add_metadata();
  ::google::protobuf::RepeatedPtrField< ::proio::proto::Meta >*
      mutable_metadata();
  const ::google::protobuf::RepeatedPtrField< ::proio::proto::Meta >&
      metadata() const;

  // uint64 nEvents = 1;
  void clear_nevents();
  static const int kNEventsFieldNumber = 1;
  ::google::protobuf::uint64 nevents() const;
  void set_nevents(::google::protobuf::uint64 value);

  // uint64 bucketSize = 2;
  void clear_bucketsize();
  static const int kBucketSizeFieldNumber = 2;
  ::google::protobuf::uint64 bucketsize() const;
  void set_bucketsize(::google::protobuf::uint64 value);

  // .proio.proto.BucketHeader.CompType compression = 3;
  void clear_compression();
  static const int kCompressionFieldNumber = 3;
  ::proio::proto::BucketHeader_CompType compression() const;
  void set_compression(::proio::proto::BucketHeader_CompType value);

  // @@protoc_insertion_point(class_scope:proio.proto.BucketHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filedescriptors_;
  ::google::protobuf::RepeatedPtrField< ::proio::proto::Meta > metadata_;
  ::google::protobuf::uint64 nevents_;
  ::google::protobuf::uint64 bucketsize_;
  int compression_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fproio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.proto.Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tag& default_instance();

  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Tag* other);
  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const PROTOBUF_FINAL { return New(NULL); }

  Tag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::google::protobuf::uint64 entries(int index) const;
  void set_entries(int index, ::google::protobuf::uint64 value);
  void add_entries(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      entries() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:proio.proto.Tag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > entries_;
  mutable int _entries_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fproio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.proto.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint64 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proio.proto.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint64 type_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fproio_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proio.proto.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .proio.proto.Tag> tags = 1;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::proio::proto::Tag >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::proio::proto::Tag >*
      mutable_tags();

  // map<uint64, .proio.proto.Entry> entries = 3;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint64, ::proio::proto::Entry >&
      entries() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, ::proio::proto::Entry >*
      mutable_entries();

  // map<uint64, string> types = 5;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >&
      types() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >*
      mutable_types();

  // uint64 nEntries = 2;
  void clear_nentries();
  static const int kNEntriesFieldNumber = 2;
  ::google::protobuf::uint64 nentries() const;
  void set_nentries(::google::protobuf::uint64 value);

  // uint64 nTypes = 4;
  void clear_ntypes();
  static const int kNTypesFieldNumber = 4;
  ::google::protobuf::uint64 ntypes() const;
  void set_ntypes(::google::protobuf::uint64 value);

  // uint64 timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proio.proto.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class Event_TagsEntry : public ::google::protobuf::internal::MapEntry<Event_TagsEntry, 
      ::std::string, ::proio::proto::Tag,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Event_TagsEntry, 
      ::std::string, ::proio::proto::Tag,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    Event_TagsEntry();
    Event_TagsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Event_TagsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Event_TagsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Event_TagsEntry,
      ::std::string, ::proio::proto::Tag,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tags_;
  private:
  public:
  class Event_EntriesEntry : public ::google::protobuf::internal::MapEntry<Event_EntriesEntry, 
      ::google::protobuf::uint64, ::proio::proto::Entry,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Event_EntriesEntry, 
      ::google::protobuf::uint64, ::proio::proto::Entry,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    Event_EntriesEntry();
    Event_EntriesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Event_EntriesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Event_EntriesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Event_EntriesEntry,
      ::google::protobuf::uint64, ::proio::proto::Entry,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > entries_;
  private:
  public:
  class Event_TypesEntry : public ::google::protobuf::internal::MapEntry<Event_TypesEntry, 
      ::google::protobuf::uint64, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Event_TypesEntry, 
      ::google::protobuf::uint64, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    Event_TypesEntry();
    Event_TypesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Event_TypesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Event_TypesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Event_TypesEntry,
      ::google::protobuf::uint64, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > types_;
  private:
  ::google::protobuf::uint64 nentries_;
  ::google::protobuf::uint64 ntypes_;
  ::google::protobuf::uint64 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fproio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Meta

// string name = 1;
inline void Meta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Meta::name() const {
  // @@protoc_insertion_point(field_get:proio.proto.Meta.name)
  return name_.GetNoArena();
}
inline void Meta::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proio.proto.Meta.name)
}
#if LANG_CXX11
inline void Meta::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proio.proto.Meta.name)
}
#endif
inline void Meta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proio.proto.Meta.name)
}
inline void Meta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proio.proto.Meta.name)
}
inline ::std::string* Meta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proio.proto.Meta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Meta::release_name() {
  // @@protoc_insertion_point(field_release:proio.proto.Meta.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proio.proto.Meta.name)
}

// bytes data = 2;
inline void Meta::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Meta::data() const {
  // @@protoc_insertion_point(field_get:proio.proto.Meta.data)
  return data_.GetNoArena();
}
inline void Meta::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proio.proto.Meta.data)
}
#if LANG_CXX11
inline void Meta::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proio.proto.Meta.data)
}
#endif
inline void Meta::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proio.proto.Meta.data)
}
inline void Meta::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proio.proto.Meta.data)
}
inline ::std::string* Meta::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proio.proto.Meta.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Meta::release_data() {
  // @@protoc_insertion_point(field_release:proio.proto.Meta.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proio.proto.Meta.data)
}

// -------------------------------------------------------------------

// BucketHeader

// uint64 nEvents = 1;
inline void BucketHeader::clear_nevents() {
  nevents_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BucketHeader::nevents() const {
  // @@protoc_insertion_point(field_get:proio.proto.BucketHeader.nEvents)
  return nevents_;
}
inline void BucketHeader::set_nevents(::google::protobuf::uint64 value) {
  
  nevents_ = value;
  // @@protoc_insertion_point(field_set:proio.proto.BucketHeader.nEvents)
}

// uint64 bucketSize = 2;
inline void BucketHeader::clear_bucketsize() {
  bucketsize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BucketHeader::bucketsize() const {
  // @@protoc_insertion_point(field_get:proio.proto.BucketHeader.bucketSize)
  return bucketsize_;
}
inline void BucketHeader::set_bucketsize(::google::protobuf::uint64 value) {
  
  bucketsize_ = value;
  // @@protoc_insertion_point(field_set:proio.proto.BucketHeader.bucketSize)
}

// .proio.proto.BucketHeader.CompType compression = 3;
inline void BucketHeader::clear_compression() {
  compression_ = 0;
}
inline ::proio::proto::BucketHeader_CompType BucketHeader::compression() const {
  // @@protoc_insertion_point(field_get:proio.proto.BucketHeader.compression)
  return static_cast< ::proio::proto::BucketHeader_CompType >(compression_);
}
inline void BucketHeader::set_compression(::proio::proto::BucketHeader_CompType value) {
  
  compression_ = value;
  // @@protoc_insertion_point(field_set:proio.proto.BucketHeader.compression)
}

// repeated bytes fileDescriptors = 4;
inline int BucketHeader::filedescriptors_size() const {
  return filedescriptors_.size();
}
inline void BucketHeader::clear_filedescriptors() {
  filedescriptors_.Clear();
}
inline const ::std::string& BucketHeader::filedescriptors(int index) const {
  // @@protoc_insertion_point(field_get:proio.proto.BucketHeader.fileDescriptors)
  return filedescriptors_.Get(index);
}
inline ::std::string* BucketHeader::mutable_filedescriptors(int index) {
  // @@protoc_insertion_point(field_mutable:proio.proto.BucketHeader.fileDescriptors)
  return filedescriptors_.Mutable(index);
}
inline void BucketHeader::set_filedescriptors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proio.proto.BucketHeader.fileDescriptors)
  filedescriptors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BucketHeader::set_filedescriptors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proio.proto.BucketHeader.fileDescriptors)
  filedescriptors_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BucketHeader::set_filedescriptors(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filedescriptors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proio.proto.BucketHeader.fileDescriptors)
}
inline void BucketHeader::set_filedescriptors(int index, const void* value, size_t size) {
  filedescriptors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proio.proto.BucketHeader.fileDescriptors)
}
inline ::std::string* BucketHeader::add_filedescriptors() {
  // @@protoc_insertion_point(field_add_mutable:proio.proto.BucketHeader.fileDescriptors)
  return filedescriptors_.Add();
}
inline void BucketHeader::add_filedescriptors(const ::std::string& value) {
  filedescriptors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proio.proto.BucketHeader.fileDescriptors)
}
#if LANG_CXX11
inline void BucketHeader::add_filedescriptors(::std::string&& value) {
  filedescriptors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proio.proto.BucketHeader.fileDescriptors)
}
#endif
inline void BucketHeader::add_filedescriptors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filedescriptors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proio.proto.BucketHeader.fileDescriptors)
}
inline void BucketHeader::add_filedescriptors(const void* value, size_t size) {
  filedescriptors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proio.proto.BucketHeader.fileDescriptors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BucketHeader::filedescriptors() const {
  // @@protoc_insertion_point(field_list:proio.proto.BucketHeader.fileDescriptors)
  return filedescriptors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BucketHeader::mutable_filedescriptors() {
  // @@protoc_insertion_point(field_mutable_list:proio.proto.BucketHeader.fileDescriptors)
  return &filedescriptors_;
}

// repeated .proio.proto.Meta metaData = 5;
inline int BucketHeader::metadata_size() const {
  return metadata_.size();
}
inline void BucketHeader::clear_metadata() {
  metadata_.Clear();
}
inline const ::proio::proto::Meta& BucketHeader::metadata(int index) const {
  // @@protoc_insertion_point(field_get:proio.proto.BucketHeader.metaData)
  return metadata_.Get(index);
}
inline ::proio::proto::Meta* BucketHeader::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:proio.proto.BucketHeader.metaData)
  return metadata_.Mutable(index);
}
inline ::proio::proto::Meta* BucketHeader::add_metadata() {
  // @@protoc_insertion_point(field_add:proio.proto.BucketHeader.metaData)
  return metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proio::proto::Meta >*
BucketHeader::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:proio.proto.BucketHeader.metaData)
  return &metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proio::proto::Meta >&
BucketHeader::metadata() const {
  // @@protoc_insertion_point(field_list:proio.proto.BucketHeader.metaData)
  return metadata_;
}

// -------------------------------------------------------------------

// Tag

// repeated uint64 entries = 1;
inline int Tag::entries_size() const {
  return entries_.size();
}
inline void Tag::clear_entries() {
  entries_.Clear();
}
inline ::google::protobuf::uint64 Tag::entries(int index) const {
  // @@protoc_insertion_point(field_get:proio.proto.Tag.entries)
  return entries_.Get(index);
}
inline void Tag::set_entries(int index, ::google::protobuf::uint64 value) {
  entries_.Set(index, value);
  // @@protoc_insertion_point(field_set:proio.proto.Tag.entries)
}
inline void Tag::add_entries(::google::protobuf::uint64 value) {
  entries_.Add(value);
  // @@protoc_insertion_point(field_add:proio.proto.Tag.entries)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Tag::entries() const {
  // @@protoc_insertion_point(field_list:proio.proto.Tag.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Tag::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proio.proto.Tag.entries)
  return &entries_;
}

// -------------------------------------------------------------------

// Entry

// uint64 type = 1;
inline void Entry::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Entry::type() const {
  // @@protoc_insertion_point(field_get:proio.proto.Entry.type)
  return type_;
}
inline void Entry::set_type(::google::protobuf::uint64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proio.proto.Entry.type)
}

// bytes payload = 2;
inline void Entry::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::payload() const {
  // @@protoc_insertion_point(field_get:proio.proto.Entry.payload)
  return payload_.GetNoArena();
}
inline void Entry::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proio.proto.Entry.payload)
}
#if LANG_CXX11
inline void Entry::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proio.proto.Entry.payload)
}
#endif
inline void Entry::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proio.proto.Entry.payload)
}
inline void Entry::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proio.proto.Entry.payload)
}
inline ::std::string* Entry::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:proio.proto.Entry.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_payload() {
  // @@protoc_insertion_point(field_release:proio.proto.Entry.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:proio.proto.Entry.payload)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Event

// map<string, .proio.proto.Tag> tags = 1;
inline int Event::tags_size() const {
  return tags_.size();
}
inline void Event::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::proio::proto::Tag >&
Event::tags() const {
  // @@protoc_insertion_point(field_map:proio.proto.Event.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::proio::proto::Tag >*
Event::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:proio.proto.Event.tags)
  return tags_.MutableMap();
}

// uint64 nEntries = 2;
inline void Event::clear_nentries() {
  nentries_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event::nentries() const {
  // @@protoc_insertion_point(field_get:proio.proto.Event.nEntries)
  return nentries_;
}
inline void Event::set_nentries(::google::protobuf::uint64 value) {
  
  nentries_ = value;
  // @@protoc_insertion_point(field_set:proio.proto.Event.nEntries)
}

// map<uint64, .proio.proto.Entry> entries = 3;
inline int Event::entries_size() const {
  return entries_.size();
}
inline void Event::clear_entries() {
  entries_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, ::proio::proto::Entry >&
Event::entries() const {
  // @@protoc_insertion_point(field_map:proio.proto.Event.entries)
  return entries_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, ::proio::proto::Entry >*
Event::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_map:proio.proto.Event.entries)
  return entries_.MutableMap();
}

// uint64 nTypes = 4;
inline void Event::clear_ntypes() {
  ntypes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event::ntypes() const {
  // @@protoc_insertion_point(field_get:proio.proto.Event.nTypes)
  return ntypes_;
}
inline void Event::set_ntypes(::google::protobuf::uint64 value) {
  
  ntypes_ = value;
  // @@protoc_insertion_point(field_set:proio.proto.Event.nTypes)
}

// map<uint64, string> types = 5;
inline int Event::types_size() const {
  return types_.size();
}
inline void Event::clear_types() {
  types_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >&
Event::types() const {
  // @@protoc_insertion_point(field_map:proio.proto.Event.types)
  return types_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >*
Event::mutable_types() {
  // @@protoc_insertion_point(field_mutable_map:proio.proto.Event.types)
  return types_.MutableMap();
}

// uint64 timestamp = 6;
inline void Event::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Event::timestamp() const {
  // @@protoc_insertion_point(field_get:proio.proto.Event.timestamp)
  return timestamp_;
}
inline void Event::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proio.proto.Event.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace proio

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proio::proto::BucketHeader_CompType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proio::proto::BucketHeader_CompType>() {
  return ::proio::proto::BucketHeader_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fproio_2eproto__INCLUDED
