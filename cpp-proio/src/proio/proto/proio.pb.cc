// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/proio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/proio.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace proio {
namespace proto {
class EventHeader_CollectionHeaderDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<EventHeader_CollectionHeader> _instance;
} _EventHeader_CollectionHeader_default_instance_;
class EventHeader_AuxDataEntryDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<EventHeader::EventHeader_AuxDataEntry> _instance;
} _EventHeader_AuxDataEntry_default_instance_;
class EventHeaderDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<EventHeader> _instance;
} _EventHeader_default_instance_;
class CollectionProto_EntriesEntryDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<CollectionProto::CollectionProto_EntriesEntry>
        _instance;
} _CollectionProto_EntriesEntry_default_instance_;
class CollectionProto_AuxDataEntryDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<CollectionProto::CollectionProto_AuxDataEntry>
        _instance;
} _CollectionProto_AuxDataEntry_default_instance_;
class CollectionProtoDefaultTypeInternal {
   public:
    ::google::protobuf::internal::ExplicitlyConstructed<CollectionProto> _instance;
} _CollectionProto_default_instance_;

namespace protobuf_proto_2fproio_2eproto {

namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR::google::protobuf::internal::ParseTableField const
    TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR::google::protobuf::internal::AuxillaryParseTableField const
    TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {NULL, NULL, 0, -1, -1, -1, -1, NULL, false}, {NULL, NULL, 0, -1, -1, -1, -1, NULL, false},
        {NULL, NULL, 0, -1, -1, -1, -1, NULL, false}, {NULL, NULL, 0, -1, -1, -1, -1, NULL, false},
        {NULL, NULL, 0, -1, -1, -1, -1, NULL, false}, {NULL, NULL, 0, -1, -1, -1, -1, NULL, false},
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, entrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, payloadsize_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, runnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, eventnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, nuniquecollids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, payloadcollections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, auxdata_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionProto, nuniqueentryids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionProto, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionProto, auxdata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    {0, -1, sizeof(EventHeader_CollectionHeader)},
    {9, -1, sizeof(EventHeader)},
    {20, -1, sizeof(CollectionProto)},
};

static ::google::protobuf::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message*>(&_EventHeader_CollectionHeader_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_EventHeader_AuxDataEntry_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_EventHeader_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_CollectionProto_EntriesEntry_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_CollectionProto_AuxDataEntry_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(&_CollectionProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
    AddDescriptors();
    ::google::protobuf::MessageFactory* factory = NULL;
    AssignDescriptors("proto/proio.proto", schemas, file_default_instances, TableStruct::offsets, factory,
                      file_level_metadata, NULL, NULL);
    file_level_metadata[1].reflection = EventHeader::EventHeader_AuxDataEntry::CreateReflection(
        file_level_metadata[1].descriptor,
        _EventHeader_AuxDataEntry_default_instance_._instance.get_mutable());
    file_level_metadata[3].reflection = CollectionProto::CollectionProto_EntriesEntry::CreateReflection(
        file_level_metadata[3].descriptor,
        _CollectionProto_EntriesEntry_default_instance_._instance.get_mutable());
    file_level_metadata[4].reflection = CollectionProto::CollectionProto_AuxDataEntry::CreateReflection(
        file_level_metadata[4].descriptor,
        _CollectionProto_AuxDataEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::internal::InitProtobufDefaults();
    _EventHeader_CollectionHeader_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(&_EventHeader_CollectionHeader_default_instance_);
    _EventHeader_AuxDataEntry_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(&_EventHeader_AuxDataEntry_default_instance_);
    _EventHeader_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(&_EventHeader_default_instance_);
    _CollectionProto_EntriesEntry_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(&_CollectionProto_EntriesEntry_default_instance_);
    _CollectionProto_AuxDataEntry_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(&_CollectionProto_AuxDataEntry_default_instance_);
    _CollectionProto_default_instance_._instance.DefaultConstruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(&_CollectionProto_default_instance_);
    _EventHeader_AuxDataEntry_default_instance_._instance.get_mutable()->set_default_instance(
        _EventHeader_AuxDataEntry_default_instance_._instance.get_mutable());
    _EventHeader_AuxDataEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
    _CollectionProto_EntriesEntry_default_instance_._instance.get_mutable()->set_default_instance(
        _CollectionProto_EntriesEntry_default_instance_._instance.get_mutable());
    _CollectionProto_EntriesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
    _CollectionProto_AuxDataEntry_default_instance_._instance.get_mutable()->set_default_instance(
        _CollectionProto_AuxDataEntry_default_instance_._instance.get_mutable());
    _CollectionProto_AuxDataEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
    InitDefaults();
    static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        "\n\021proto/proio.proto\022\013proio.proto\"\345\002\n\013Eve"
        "ntHeader\022\021\n\trunNumber\030\001 \001(\004\022\023\n\013eventNumb"
        "er\030\002 \001(\004\022\021\n\ttimeStamp\030\003 \001(\004\022\026\n\016nUniqueCo"
        "llIDs\030\004 \001(\r\022E\n\022payloadCollections\030\005 \003(\0132"
        ").proio.proto.EventHeader.CollectionHead"
        "er\0226\n\007auxData\030\006 \003(\0132%.proio.proto.EventH"
        "eader.AuxDataEntry\032T\n\020CollectionHeader\022\014"
        "\n\004name\030\001 \001(\t\022\021\n\tentryType\030\002 \001(\t\022\n\n\002id\030\003 "
        "\001(\r\022\023\n\013payloadSize\030\004 \001(\r\032.\n\014AuxDataEntry"
        "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\202\002\n\017Col"
        "lectionProto\022\027\n\017nUniqueEntryIDs\030\001 \001(\r\022:\n"
        "\007entries\030\002 \003(\0132).proio.proto.CollectionP"
        "roto.EntriesEntry\022:\n\007auxData\030\003 \003(\0132).pro"
        "io.proto.CollectionProto.AuxDataEntry\032.\n"
        "\014EntriesEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001("
        "\014:\0028\001\032.\n\014AuxDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
        "lue\030\002 \001(\014:\0028\001B=\n\005proioB\005ProtoZ-github.co"
        "m/decibelcooper/proio/go-proio/protob\006pr"
        "oto3"};
    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor, 724);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("proto/proio.proto",
                                                                      &protobuf_RegisterTypes);
}
}  // anonymous namespace

void AddDescriptors() {
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
    StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2fproio_2eproto

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventHeader_CollectionHeader::kNameFieldNumber;
const int EventHeader_CollectionHeader::kEntryTypeFieldNumber;
const int EventHeader_CollectionHeader::kIdFieldNumber;
const int EventHeader_CollectionHeader::kPayloadSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventHeader_CollectionHeader::EventHeader_CollectionHeader()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_proto_2fproio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:proio.proto.EventHeader.CollectionHeader)
}
EventHeader_CollectionHeader::EventHeader_CollectionHeader(const EventHeader_CollectionHeader& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.name().size() > 0) {
        name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    entrytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.entrytype().size() > 0) {
        entrytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                     from.entrytype_);
    }
    ::memcpy(&id_, &from.id_,
             static_cast<size_t>(reinterpret_cast<char*>(&payloadsize_) - reinterpret_cast<char*>(&id_)) +
                 sizeof(payloadsize_));
    // @@protoc_insertion_point(copy_constructor:proio.proto.EventHeader.CollectionHeader)
}

void EventHeader_CollectionHeader::SharedCtor() {
    name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    entrytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&payloadsize_) - reinterpret_cast<char*>(&id_)) +
                 sizeof(payloadsize_));
    _cached_size_ = 0;
}

EventHeader_CollectionHeader::~EventHeader_CollectionHeader() {
    // @@protoc_insertion_point(destructor:proio.proto.EventHeader.CollectionHeader)
    SharedDtor();
}

void EventHeader_CollectionHeader::SharedDtor() {
    name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    entrytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventHeader_CollectionHeader::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHeader_CollectionHeader::descriptor() {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventHeader_CollectionHeader& EventHeader_CollectionHeader::default_instance() {
    protobuf_proto_2fproio_2eproto::InitDefaults();
    return *internal_default_instance();
}

EventHeader_CollectionHeader* EventHeader_CollectionHeader::New(::google::protobuf::Arena* arena) const {
    EventHeader_CollectionHeader* n = new EventHeader_CollectionHeader;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void EventHeader_CollectionHeader::Clear() {
    // @@protoc_insertion_point(message_clear_start:proio.proto.EventHeader.CollectionHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    entrytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&payloadsize_) - reinterpret_cast<char*>(&id_)) +
                 sizeof(payloadsize_));
    _internal_metadata_.Clear();
}

bool EventHeader_CollectionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:proio.proto.EventHeader.CollectionHeader)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // string name = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_name()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->name().data(), static_cast<int>(this->name().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "proio.proto.EventHeader.CollectionHeader.name"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // string entryType = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_entrytype()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->entrytype().data(), static_cast<int>(this->entrytype().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "proio.proto.EventHeader.CollectionHeader.entryType"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 id = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &id_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 payloadSize = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &payloadsize_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:proio.proto.EventHeader.CollectionHeader)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:proio.proto.EventHeader.CollectionHeader)
    return false;
#undef DO_
}

void EventHeader_CollectionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:proio.proto.EventHeader.CollectionHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string name = 1;
    if (this->name().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "proio.proto.EventHeader.CollectionHeader.name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, this->name(), output);
    }

    // string entryType = 2;
    if (this->entrytype().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entrytype().data(), static_cast<int>(this->entrytype().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "proio.proto.EventHeader.CollectionHeader.entryType");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, this->entrytype(), output);
    }

    // uint32 id = 3;
    if (this->id() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
    }

    // uint32 payloadSize = 4;
    if (this->payloadsize() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->payloadsize(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:proio.proto.EventHeader.CollectionHeader)
}

::google::protobuf::uint8* EventHeader_CollectionHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:proio.proto.EventHeader.CollectionHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string name = 1;
    if (this->name().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "proio.proto.EventHeader.CollectionHeader.name");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(1, this->name(), target);
    }

    // string entryType = 2;
    if (this->entrytype().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entrytype().data(), static_cast<int>(this->entrytype().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "proio.proto.EventHeader.CollectionHeader.entryType");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(2, this->entrytype(), target);
    }

    // uint32 id = 3;
    if (this->id() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
    }

    // uint32 payloadSize = 4;
    if (this->payloadsize() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->payloadsize(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:proio.proto.EventHeader.CollectionHeader)
    return target;
}

size_t EventHeader_CollectionHeader::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:proio.proto.EventHeader.CollectionHeader)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
    }
    // string name = 1;
    if (this->name().size() > 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->name());
    }

    // string entryType = 2;
    if (this->entrytype().size() > 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->entrytype());
    }

    // uint32 id = 3;
    if (this->id() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->id());
    }

    // uint32 payloadSize = 4;
    if (this->payloadsize() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->payloadsize());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void EventHeader_CollectionHeader::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:proio.proto.EventHeader.CollectionHeader)
    GOOGLE_DCHECK_NE(&from, this);
    const EventHeader_CollectionHeader* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const EventHeader_CollectionHeader>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:proio.proto.EventHeader.CollectionHeader)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:proio.proto.EventHeader.CollectionHeader)
        MergeFrom(*source);
    }
}

void EventHeader_CollectionHeader::MergeFrom(const EventHeader_CollectionHeader& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:proio.proto.EventHeader.CollectionHeader)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.name().size() > 0) {
        name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.entrytype().size() > 0) {
        entrytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                     from.entrytype_);
    }
    if (from.id() != 0) {
        set_id(from.id());
    }
    if (from.payloadsize() != 0) {
        set_payloadsize(from.payloadsize());
    }
}

void EventHeader_CollectionHeader::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:proio.proto.EventHeader.CollectionHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void EventHeader_CollectionHeader::CopyFrom(const EventHeader_CollectionHeader& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:proio.proto.EventHeader.CollectionHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool EventHeader_CollectionHeader::IsInitialized() const { return true; }

void EventHeader_CollectionHeader::Swap(EventHeader_CollectionHeader* other) {
    if (other == this) return;
    InternalSwap(other);
}
void EventHeader_CollectionHeader::InternalSwap(EventHeader_CollectionHeader* other) {
    using std::swap;
    name_.Swap(&other->name_);
    entrytype_.Swap(&other->entrytype_);
    swap(id_, other->id_);
    swap(payloadsize_, other->payloadsize_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventHeader_CollectionHeader::GetMetadata() const {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader_CollectionHeader

// string name = 1;
void EventHeader_CollectionHeader::clear_name() {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventHeader_CollectionHeader::name() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.CollectionHeader.name)
    return name_.GetNoArena();
}
void EventHeader_CollectionHeader::set_name(const ::std::string& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.CollectionHeader.name)
}
#if LANG_CXX11
void EventHeader_CollectionHeader::set_name(::std::string&& value) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proio.proto.EventHeader.CollectionHeader.name)
}
#endif
void EventHeader_CollectionHeader::set_name(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proio.proto.EventHeader.CollectionHeader.name)
}
void EventHeader_CollectionHeader::set_name(const char* value, size_t size) {
    name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proio.proto.EventHeader.CollectionHeader.name)
}
::std::string* EventHeader_CollectionHeader::mutable_name() {
    // @@protoc_insertion_point(field_mutable:proio.proto.EventHeader.CollectionHeader.name)
    return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventHeader_CollectionHeader::release_name() {
    // @@protoc_insertion_point(field_release:proio.proto.EventHeader.CollectionHeader.name)

    return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventHeader_CollectionHeader::set_allocated_name(::std::string* name) {
    if (name != NULL) {
    } else {
    }
    name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
    // @@protoc_insertion_point(field_set_allocated:proio.proto.EventHeader.CollectionHeader.name)
}

// string entryType = 2;
void EventHeader_CollectionHeader::clear_entrytype() {
    entrytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventHeader_CollectionHeader::entrytype() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.CollectionHeader.entryType)
    return entrytype_.GetNoArena();
}
void EventHeader_CollectionHeader::set_entrytype(const ::std::string& value) {
    entrytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.CollectionHeader.entryType)
}
#if LANG_CXX11
void EventHeader_CollectionHeader::set_entrytype(::std::string&& value) {
    entrytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:proio.proto.EventHeader.CollectionHeader.entryType)
}
#endif
void EventHeader_CollectionHeader::set_entrytype(const char* value) {
    GOOGLE_DCHECK(value != NULL);

    entrytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:proio.proto.EventHeader.CollectionHeader.entryType)
}
void EventHeader_CollectionHeader::set_entrytype(const char* value, size_t size) {
    entrytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:proio.proto.EventHeader.CollectionHeader.entryType)
}
::std::string* EventHeader_CollectionHeader::mutable_entrytype() {
    // @@protoc_insertion_point(field_mutable:proio.proto.EventHeader.CollectionHeader.entryType)
    return entrytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventHeader_CollectionHeader::release_entrytype() {
    // @@protoc_insertion_point(field_release:proio.proto.EventHeader.CollectionHeader.entryType)

    return entrytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventHeader_CollectionHeader::set_allocated_entrytype(::std::string* entrytype) {
    if (entrytype != NULL) {
    } else {
    }
    entrytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entrytype);
    // @@protoc_insertion_point(field_set_allocated:proio.proto.EventHeader.CollectionHeader.entryType)
}

// uint32 id = 3;
void EventHeader_CollectionHeader::clear_id() { id_ = 0u; }
::google::protobuf::uint32 EventHeader_CollectionHeader::id() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.CollectionHeader.id)
    return id_;
}
void EventHeader_CollectionHeader::set_id(::google::protobuf::uint32 value) {
    id_ = value;
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.CollectionHeader.id)
}

// uint32 payloadSize = 4;
void EventHeader_CollectionHeader::clear_payloadsize() { payloadsize_ = 0u; }
::google::protobuf::uint32 EventHeader_CollectionHeader::payloadsize() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.CollectionHeader.payloadSize)
    return payloadsize_;
}
void EventHeader_CollectionHeader::set_payloadsize(::google::protobuf::uint32 value) {
    payloadsize_ = value;
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.CollectionHeader.payloadSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

EventHeader::EventHeader_AuxDataEntry::EventHeader_AuxDataEntry() {}
EventHeader::EventHeader_AuxDataEntry::EventHeader_AuxDataEntry(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata EventHeader::EventHeader_AuxDataEntry::GetMetadata() const {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[1];
}
void EventHeader::EventHeader_AuxDataEntry::MergeFrom(const ::google::protobuf::Message& other) {
    ::google::protobuf::Message::MergeFrom(other);
}
void EventHeader::EventHeader_AuxDataEntry::MergeFrom(const EventHeader_AuxDataEntry& other) {
    MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventHeader::kRunNumberFieldNumber;
const int EventHeader::kEventNumberFieldNumber;
const int EventHeader::kTimeStampFieldNumber;
const int EventHeader::kNUniqueCollIDsFieldNumber;
const int EventHeader::kPayloadCollectionsFieldNumber;
const int EventHeader::kAuxDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventHeader::EventHeader() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_proto_2fproio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:proio.proto.EventHeader)
}
EventHeader::EventHeader(const EventHeader& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      payloadcollections_(from.payloadcollections_),
      _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    auxdata_.MergeFrom(from.auxdata_);
    ::memcpy(&runnumber_, &from.runnumber_,
             static_cast<size_t>(reinterpret_cast<char*>(&nuniquecollids_) -
                                 reinterpret_cast<char*>(&runnumber_)) +
                 sizeof(nuniquecollids_));
    // @@protoc_insertion_point(copy_constructor:proio.proto.EventHeader)
}

void EventHeader::SharedCtor() {
    ::memset(&runnumber_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&nuniquecollids_) -
                                 reinterpret_cast<char*>(&runnumber_)) +
                 sizeof(nuniquecollids_));
    _cached_size_ = 0;
}

EventHeader::~EventHeader() {
    // @@protoc_insertion_point(destructor:proio.proto.EventHeader)
    SharedDtor();
}

void EventHeader::SharedDtor() {}

void EventHeader::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHeader::descriptor() {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventHeader& EventHeader::default_instance() {
    protobuf_proto_2fproio_2eproto::InitDefaults();
    return *internal_default_instance();
}

EventHeader* EventHeader::New(::google::protobuf::Arena* arena) const {
    EventHeader* n = new EventHeader;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void EventHeader::Clear() {
    // @@protoc_insertion_point(message_clear_start:proio.proto.EventHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    payloadcollections_.Clear();
    auxdata_.Clear();
    ::memset(&runnumber_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&nuniquecollids_) -
                                 reinterpret_cast<char*>(&runnumber_)) +
                 sizeof(nuniquecollids_));
    _internal_metadata_.Clear();
}

bool EventHeader::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:proio.proto.EventHeader)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint64 runNumber = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &runnumber_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint64 eventNumber = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &eventnumber_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint64 timeStamp = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &timestamp_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // uint32 nUniqueCollIDs = 4;
            case 4: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input,
                                                                                    &nuniquecollids_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .proio.proto.EventHeader.CollectionHeader payloadCollections = 5;
            case 5: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                        input, add_payloadcollections()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // map<string, bytes> auxData = 6;
            case 6: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
                    EventHeader_AuxDataEntry::Parser<
                        ::google::protobuf::internal::MapField<
                            EventHeader_AuxDataEntry, ::std::string, ::std::string,
                            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                            ::google::protobuf::internal::WireFormatLite::TYPE_BYTES, 0>,
                        ::google::protobuf::Map< ::std::string, ::std::string> >
                        parser(&auxdata_);
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input, &parser));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        parser.key().data(), static_cast<int>(parser.key().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "proio.proto.EventHeader.AuxDataEntry.key"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:proio.proto.EventHeader)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:proio.proto.EventHeader)
    return false;
#undef DO_
}

void EventHeader::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:proio.proto.EventHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint64 runNumber = 1;
    if (this->runnumber() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->runnumber(), output);
    }

    // uint64 eventNumber = 2;
    if (this->eventnumber() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->eventnumber(), output);
    }

    // uint64 timeStamp = 3;
    if (this->timestamp() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
    }

    // uint32 nUniqueCollIDs = 4;
    if (this->nuniquecollids() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nuniquecollids(), output);
    }

    // repeated .proio.proto.EventHeader.CollectionHeader payloadCollections = 5;
    for (unsigned int i = 0, n = static_cast<unsigned int>(this->payloadcollections_size()); i < n; i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, this->payloadcollections(static_cast<int>(i)), output);
    }

    // map<string, bytes> auxData = 6;
    if (!this->auxdata().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::std::string>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), static_cast<int>(p->first.length()),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "proio.proto.EventHeader.AuxDataEntry.key");
            }
        };

        if (output->IsSerializationDeterministic() && this->auxdata().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->auxdata().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator
                     it = this->auxdata().begin();
                 it != this->auxdata().end(); ++it, ++n) {
                items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
            ::google::protobuf::scoped_ptr<EventHeader_AuxDataEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(auxdata_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first,
                                                     items[static_cast<ptrdiff_t>(i)]->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(6, *entry, output);
                Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
            }
        } else {
            ::google::protobuf::scoped_ptr<EventHeader_AuxDataEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator it =
                     this->auxdata().begin();
                 it != this->auxdata().end(); ++it) {
                entry.reset(auxdata_.NewEntryWrapper(it->first, it->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(6, *entry, output);
                Utf8Check::Check(&*it);
            }
        }
    }

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:proio.proto.EventHeader)
}

::google::protobuf::uint8* EventHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:proio.proto.EventHeader)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint64 runNumber = 1;
    if (this->runnumber() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->runnumber(), target);
    }

    // uint64 eventNumber = 2;
    if (this->eventnumber() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->eventnumber(), target);
    }

    // uint64 timeStamp = 3;
    if (this->timestamp() != 0) {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
    }

    // uint32 nUniqueCollIDs = 4;
    if (this->nuniquecollids() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nuniquecollids(),
                                                                                  target);
    }

    // repeated .proio.proto.EventHeader.CollectionHeader payloadCollections = 5;
    for (unsigned int i = 0, n = static_cast<unsigned int>(this->payloadcollections_size()); i < n; i++) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
            5, this->payloadcollections(static_cast<int>(i)), deterministic, target);
    }

    // map<string, bytes> auxData = 6;
    if (!this->auxdata().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::std::string>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), static_cast<int>(p->first.length()),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "proio.proto.EventHeader.AuxDataEntry.key");
            }
        };

        if (deterministic && this->auxdata().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->auxdata().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator
                     it = this->auxdata().begin();
                 it != this->auxdata().end(); ++it, ++n) {
                items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
            ::google::protobuf::scoped_ptr<EventHeader_AuxDataEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(auxdata_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first,
                                                     items[static_cast<ptrdiff_t>(i)]->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    6, *entry, deterministic, target);
                ;
                Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
            }
        } else {
            ::google::protobuf::scoped_ptr<EventHeader_AuxDataEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator it =
                     this->auxdata().begin();
                 it != this->auxdata().end(); ++it) {
                entry.reset(auxdata_.NewEntryWrapper(it->first, it->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    6, *entry, deterministic, target);
                ;
                Utf8Check::Check(&*it);
            }
        }
    }

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:proio.proto.EventHeader)
    return target;
}

size_t EventHeader::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:proio.proto.EventHeader)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
    }
    // repeated .proio.proto.EventHeader.CollectionHeader payloadCollections = 5;
    {
        unsigned int count = static_cast<unsigned int>(this->payloadcollections_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                this->payloadcollections(static_cast<int>(i)));
        }
    }

    // map<string, bytes> auxData = 6;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(this->auxdata_size());
    {
        ::google::protobuf::scoped_ptr<EventHeader_AuxDataEntry> entry;
        for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator it =
                 this->auxdata().begin();
             it != this->auxdata().end(); ++it) {
            entry.reset(auxdata_.NewEntryWrapper(it->first, it->second));
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*entry);
        }
    }

    // uint64 runNumber = 1;
    if (this->runnumber() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->runnumber());
    }

    // uint64 eventNumber = 2;
    if (this->eventnumber() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->eventnumber());
    }

    // uint64 timeStamp = 3;
    if (this->timestamp() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->timestamp());
    }

    // uint32 nUniqueCollIDs = 4;
    if (this->nuniquecollids() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->nuniquecollids());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void EventHeader::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:proio.proto.EventHeader)
    GOOGLE_DCHECK_NE(&from, this);
    const EventHeader* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const EventHeader>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:proio.proto.EventHeader)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:proio.proto.EventHeader)
        MergeFrom(*source);
    }
}

void EventHeader::MergeFrom(const EventHeader& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:proio.proto.EventHeader)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    payloadcollections_.MergeFrom(from.payloadcollections_);
    auxdata_.MergeFrom(from.auxdata_);
    if (from.runnumber() != 0) {
        set_runnumber(from.runnumber());
    }
    if (from.eventnumber() != 0) {
        set_eventnumber(from.eventnumber());
    }
    if (from.timestamp() != 0) {
        set_timestamp(from.timestamp());
    }
    if (from.nuniquecollids() != 0) {
        set_nuniquecollids(from.nuniquecollids());
    }
}

void EventHeader::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:proio.proto.EventHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void EventHeader::CopyFrom(const EventHeader& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:proio.proto.EventHeader)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool EventHeader::IsInitialized() const { return true; }

void EventHeader::Swap(EventHeader* other) {
    if (other == this) return;
    InternalSwap(other);
}
void EventHeader::InternalSwap(EventHeader* other) {
    using std::swap;
    payloadcollections_.InternalSwap(&other->payloadcollections_);
    auxdata_.Swap(&other->auxdata_);
    swap(runnumber_, other->runnumber_);
    swap(eventnumber_, other->eventnumber_);
    swap(timestamp_, other->timestamp_);
    swap(nuniquecollids_, other->nuniquecollids_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventHeader::GetMetadata() const {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader

// uint64 runNumber = 1;
void EventHeader::clear_runnumber() { runnumber_ = GOOGLE_ULONGLONG(0); }
::google::protobuf::uint64 EventHeader::runnumber() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.runNumber)
    return runnumber_;
}
void EventHeader::set_runnumber(::google::protobuf::uint64 value) {
    runnumber_ = value;
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.runNumber)
}

// uint64 eventNumber = 2;
void EventHeader::clear_eventnumber() { eventnumber_ = GOOGLE_ULONGLONG(0); }
::google::protobuf::uint64 EventHeader::eventnumber() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.eventNumber)
    return eventnumber_;
}
void EventHeader::set_eventnumber(::google::protobuf::uint64 value) {
    eventnumber_ = value;
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.eventNumber)
}

// uint64 timeStamp = 3;
void EventHeader::clear_timestamp() { timestamp_ = GOOGLE_ULONGLONG(0); }
::google::protobuf::uint64 EventHeader::timestamp() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.timeStamp)
    return timestamp_;
}
void EventHeader::set_timestamp(::google::protobuf::uint64 value) {
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.timeStamp)
}

// uint32 nUniqueCollIDs = 4;
void EventHeader::clear_nuniquecollids() { nuniquecollids_ = 0u; }
::google::protobuf::uint32 EventHeader::nuniquecollids() const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.nUniqueCollIDs)
    return nuniquecollids_;
}
void EventHeader::set_nuniquecollids(::google::protobuf::uint32 value) {
    nuniquecollids_ = value;
    // @@protoc_insertion_point(field_set:proio.proto.EventHeader.nUniqueCollIDs)
}

// repeated .proio.proto.EventHeader.CollectionHeader payloadCollections = 5;
int EventHeader::payloadcollections_size() const { return payloadcollections_.size(); }
void EventHeader::clear_payloadcollections() { payloadcollections_.Clear(); }
const ::proio::proto::EventHeader_CollectionHeader& EventHeader::payloadcollections(int index) const {
    // @@protoc_insertion_point(field_get:proio.proto.EventHeader.payloadCollections)
    return payloadcollections_.Get(index);
}
::proio::proto::EventHeader_CollectionHeader* EventHeader::mutable_payloadcollections(int index) {
    // @@protoc_insertion_point(field_mutable:proio.proto.EventHeader.payloadCollections)
    return payloadcollections_.Mutable(index);
}
::proio::proto::EventHeader_CollectionHeader* EventHeader::add_payloadcollections() {
    // @@protoc_insertion_point(field_add:proio.proto.EventHeader.payloadCollections)
    return payloadcollections_.Add();
}
::google::protobuf::RepeatedPtrField< ::proio::proto::EventHeader_CollectionHeader>*
EventHeader::mutable_payloadcollections() {
    // @@protoc_insertion_point(field_mutable_list:proio.proto.EventHeader.payloadCollections)
    return &payloadcollections_;
}
const ::google::protobuf::RepeatedPtrField< ::proio::proto::EventHeader_CollectionHeader>&
EventHeader::payloadcollections() const {
    // @@protoc_insertion_point(field_list:proio.proto.EventHeader.payloadCollections)
    return payloadcollections_;
}

// map<string, bytes> auxData = 6;
int EventHeader::auxdata_size() const { return auxdata_.size(); }
void EventHeader::clear_auxdata() { auxdata_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::std::string>& EventHeader::auxdata() const {
    // @@protoc_insertion_point(field_map:proio.proto.EventHeader.auxData)
    return auxdata_.GetMap();
}
::google::protobuf::Map< ::std::string, ::std::string>* EventHeader::mutable_auxdata() {
    // @@protoc_insertion_point(field_mutable_map:proio.proto.EventHeader.auxData)
    return auxdata_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

CollectionProto::CollectionProto_EntriesEntry::CollectionProto_EntriesEntry() {}
CollectionProto::CollectionProto_EntriesEntry::CollectionProto_EntriesEntry(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata CollectionProto::CollectionProto_EntriesEntry::GetMetadata() const {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[3];
}
void CollectionProto::CollectionProto_EntriesEntry::MergeFrom(const ::google::protobuf::Message& other) {
    ::google::protobuf::Message::MergeFrom(other);
}
void CollectionProto::CollectionProto_EntriesEntry::MergeFrom(const CollectionProto_EntriesEntry& other) {
    MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

CollectionProto::CollectionProto_AuxDataEntry::CollectionProto_AuxDataEntry() {}
CollectionProto::CollectionProto_AuxDataEntry::CollectionProto_AuxDataEntry(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata CollectionProto::CollectionProto_AuxDataEntry::GetMetadata() const {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[4];
}
void CollectionProto::CollectionProto_AuxDataEntry::MergeFrom(const ::google::protobuf::Message& other) {
    ::google::protobuf::Message::MergeFrom(other);
}
void CollectionProto::CollectionProto_AuxDataEntry::MergeFrom(const CollectionProto_AuxDataEntry& other) {
    MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionProto::kNUniqueEntryIDsFieldNumber;
const int CollectionProto::kEntriesFieldNumber;
const int CollectionProto::kAuxDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionProto::CollectionProto() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
        protobuf_proto_2fproio_2eproto::InitDefaults();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:proio.proto.CollectionProto)
}
CollectionProto::CollectionProto(const CollectionProto& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _cached_size_(0) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    entries_.MergeFrom(from.entries_);
    auxdata_.MergeFrom(from.auxdata_);
    nuniqueentryids_ = from.nuniqueentryids_;
    // @@protoc_insertion_point(copy_constructor:proio.proto.CollectionProto)
}

void CollectionProto::SharedCtor() {
    nuniqueentryids_ = 0u;
    _cached_size_ = 0;
}

CollectionProto::~CollectionProto() {
    // @@protoc_insertion_point(destructor:proio.proto.CollectionProto)
    SharedDtor();
}

void CollectionProto::SharedDtor() {}

void CollectionProto::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionProto::descriptor() {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CollectionProto& CollectionProto::default_instance() {
    protobuf_proto_2fproio_2eproto::InitDefaults();
    return *internal_default_instance();
}

CollectionProto* CollectionProto::New(::google::protobuf::Arena* arena) const {
    CollectionProto* n = new CollectionProto;
    if (arena != NULL) {
        arena->Own(n);
    }
    return n;
}

void CollectionProto::Clear() {
    // @@protoc_insertion_point(message_clear_start:proio.proto.CollectionProto)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    entries_.Clear();
    auxdata_.Clear();
    nuniqueentryids_ = 0u;
    _internal_metadata_.Clear();
}

bool CollectionProto::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:proio.proto.CollectionProto)
    for (;;) {
        ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // uint32 nUniqueEntryIDs = 1;
            case 1: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::uint32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input,
                                                                                    &nuniqueentryids_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // map<uint32, bytes> entries = 2;
            case 2: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
                    CollectionProto_EntriesEntry::Parser<
                        ::google::protobuf::internal::MapField<
                            CollectionProto_EntriesEntry, ::google::protobuf::uint32, ::std::string,
                            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
                            ::google::protobuf::internal::WireFormatLite::TYPE_BYTES, 0>,
                        ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string> >
                        parser(&entries_);
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input, &parser));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // map<string, bytes> auxData = 3;
            case 3: {
                if (static_cast< ::google::protobuf::uint8>(tag) ==
                    static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
                    CollectionProto_AuxDataEntry::Parser<
                        ::google::protobuf::internal::MapField<
                            CollectionProto_AuxDataEntry, ::std::string, ::std::string,
                            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                            ::google::protobuf::internal::WireFormatLite::TYPE_BYTES, 0>,
                        ::google::protobuf::Map< ::std::string, ::std::string> >
                        parser(&auxdata_);
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(input, &parser));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        parser.key().data(), static_cast<int>(parser.key().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "proio.proto.CollectionProto.AuxDataEntry.key"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:proio.proto.CollectionProto)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:proio.proto.CollectionProto)
    return false;
#undef DO_
}

void CollectionProto::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:proio.proto.CollectionProto)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 nUniqueEntryIDs = 1;
    if (this->nuniqueentryids() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nuniqueentryids(), output);
    }

    // map<uint32, bytes> entries = 2;
    if (!this->entries().empty()) {
        typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::const_pointer ConstPtr;
        typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr> SortItem;
        typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

        if (output->IsSerializationDeterministic() && this->entries().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->entries().size()]);
            typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::const_iterator
                     it = this->entries().begin();
                 it != this->entries().end(); ++it, ++n) {
                items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
            ::google::protobuf::scoped_ptr<CollectionProto_EntriesEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(entries_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first,
                                                     items[static_cast<ptrdiff_t>(i)].second->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
            }
        } else {
            ::google::protobuf::scoped_ptr<CollectionProto_EntriesEntry> entry;
            for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::const_iterator it =
                     this->entries().begin();
                 it != this->entries().end(); ++it) {
                entry.reset(entries_.NewEntryWrapper(it->first, it->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
            }
        }
    }

    // map<string, bytes> auxData = 3;
    if (!this->auxdata().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::std::string>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), static_cast<int>(p->first.length()),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "proio.proto.CollectionProto.AuxDataEntry.key");
            }
        };

        if (output->IsSerializationDeterministic() && this->auxdata().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->auxdata().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator
                     it = this->auxdata().begin();
                 it != this->auxdata().end(); ++it, ++n) {
                items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
            ::google::protobuf::scoped_ptr<CollectionProto_AuxDataEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(auxdata_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first,
                                                     items[static_cast<ptrdiff_t>(i)]->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
                Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
            }
        } else {
            ::google::protobuf::scoped_ptr<CollectionProto_AuxDataEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator it =
                     this->auxdata().begin();
                 it != this->auxdata().end(); ++it) {
                entry.reset(auxdata_.NewEntryWrapper(it->first, it->second));
                ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
                Utf8Check::Check(&*it);
            }
        }
    }

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:proio.proto.CollectionProto)
}

::google::protobuf::uint8* CollectionProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:proio.proto.CollectionProto)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint32 nUniqueEntryIDs = 1;
    if (this->nuniqueentryids() != 0) {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nuniqueentryids(),
                                                                                  target);
    }

    // map<uint32, bytes> entries = 2;
    if (!this->entries().empty()) {
        typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::const_pointer ConstPtr;
        typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr> SortItem;
        typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

        if (deterministic && this->entries().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->entries().size()]);
            typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::const_iterator
                     it = this->entries().begin();
                 it != this->entries().end(); ++it, ++n) {
                items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
            ::google::protobuf::scoped_ptr<CollectionProto_EntriesEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(entries_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first,
                                                     items[static_cast<ptrdiff_t>(i)].second->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    2, *entry, deterministic, target);
                ;
            }
        } else {
            ::google::protobuf::scoped_ptr<CollectionProto_EntriesEntry> entry;
            for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::const_iterator it =
                     this->entries().begin();
                 it != this->entries().end(); ++it) {
                entry.reset(entries_.NewEntryWrapper(it->first, it->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    2, *entry, deterministic, target);
                ;
            }
        }
    }

    // map<string, bytes> auxData = 3;
    if (!this->auxdata().empty()) {
        typedef ::google::protobuf::Map< ::std::string, ::std::string>::const_pointer ConstPtr;
        typedef ConstPtr SortItem;
        typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
        struct Utf8Check {
            static void Check(ConstPtr p) {
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    p->first.data(), static_cast<int>(p->first.length()),
                    ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                    "proio.proto.CollectionProto.AuxDataEntry.key");
            }
        };

        if (deterministic && this->auxdata().size() > 1) {
            ::google::protobuf::scoped_array<SortItem> items(new SortItem[this->auxdata().size()]);
            typedef ::google::protobuf::Map< ::std::string, ::std::string>::size_type size_type;
            size_type n = 0;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator
                     it = this->auxdata().begin();
                 it != this->auxdata().end(); ++it, ++n) {
                items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
            }
            ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
            ::google::protobuf::scoped_ptr<CollectionProto_AuxDataEntry> entry;
            for (size_type i = 0; i < n; i++) {
                entry.reset(auxdata_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first,
                                                     items[static_cast<ptrdiff_t>(i)]->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    3, *entry, deterministic, target);
                ;
                Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
            }
        } else {
            ::google::protobuf::scoped_ptr<CollectionProto_AuxDataEntry> entry;
            for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator it =
                     this->auxdata().begin();
                 it != this->auxdata().end(); ++it) {
                entry.reset(auxdata_.NewEntryWrapper(it->first, it->second));
                target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(
                    3, *entry, deterministic, target);
                ;
                Utf8Check::Check(&*it);
            }
        }
    }

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:proio.proto.CollectionProto)
    return target;
}

size_t CollectionProto::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:proio.proto.CollectionProto)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() &&
         ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
    }
    // map<uint32, bytes> entries = 2;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(this->entries_size());
    {
        ::google::protobuf::scoped_ptr<CollectionProto_EntriesEntry> entry;
        for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>::const_iterator it =
                 this->entries().begin();
             it != this->entries().end(); ++it) {
            entry.reset(entries_.NewEntryWrapper(it->first, it->second));
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*entry);
        }
    }

    // map<string, bytes> auxData = 3;
    total_size += 1 * ::google::protobuf::internal::FromIntSize(this->auxdata_size());
    {
        ::google::protobuf::scoped_ptr<CollectionProto_AuxDataEntry> entry;
        for (::google::protobuf::Map< ::std::string, ::std::string>::const_iterator it =
                 this->auxdata().begin();
             it != this->auxdata().end(); ++it) {
            entry.reset(auxdata_.NewEntryWrapper(it->first, it->second));
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(*entry);
        }
    }

    // uint32 nUniqueEntryIDs = 1;
    if (this->nuniqueentryids() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->nuniqueentryids());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CollectionProto::MergeFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:proio.proto.CollectionProto)
    GOOGLE_DCHECK_NE(&from, this);
    const CollectionProto* source =
        ::google::protobuf::internal::DynamicCastToGenerated<const CollectionProto>(&from);
    if (source == NULL) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:proio.proto.CollectionProto)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:proio.proto.CollectionProto)
        MergeFrom(*source);
    }
}

void CollectionProto::MergeFrom(const CollectionProto& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:proio.proto.CollectionProto)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    auxdata_.MergeFrom(from.auxdata_);
    if (from.nuniqueentryids() != 0) {
        set_nuniqueentryids(from.nuniqueentryids());
    }
}

void CollectionProto::CopyFrom(const ::google::protobuf::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:proio.proto.CollectionProto)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void CollectionProto::CopyFrom(const CollectionProto& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:proio.proto.CollectionProto)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CollectionProto::IsInitialized() const { return true; }

void CollectionProto::Swap(CollectionProto* other) {
    if (other == this) return;
    InternalSwap(other);
}
void CollectionProto::InternalSwap(CollectionProto* other) {
    using std::swap;
    entries_.Swap(&other->entries_);
    auxdata_.Swap(&other->auxdata_);
    swap(nuniqueentryids_, other->nuniqueentryids_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CollectionProto::GetMetadata() const {
    protobuf_proto_2fproio_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_proto_2fproio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CollectionProto

// uint32 nUniqueEntryIDs = 1;
void CollectionProto::clear_nuniqueentryids() { nuniqueentryids_ = 0u; }
::google::protobuf::uint32 CollectionProto::nuniqueentryids() const {
    // @@protoc_insertion_point(field_get:proio.proto.CollectionProto.nUniqueEntryIDs)
    return nuniqueentryids_;
}
void CollectionProto::set_nuniqueentryids(::google::protobuf::uint32 value) {
    nuniqueentryids_ = value;
    // @@protoc_insertion_point(field_set:proio.proto.CollectionProto.nUniqueEntryIDs)
}

// map<uint32, bytes> entries = 2;
int CollectionProto::entries_size() const { return entries_.size(); }
void CollectionProto::clear_entries() { entries_.Clear(); }
const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>& CollectionProto::entries() const {
    // @@protoc_insertion_point(field_map:proio.proto.CollectionProto.entries)
    return entries_.GetMap();
}
::google::protobuf::Map< ::google::protobuf::uint32, ::std::string>* CollectionProto::mutable_entries() {
    // @@protoc_insertion_point(field_mutable_map:proio.proto.CollectionProto.entries)
    return entries_.MutableMap();
}

// map<string, bytes> auxData = 3;
int CollectionProto::auxdata_size() const { return auxdata_.size(); }
void CollectionProto::clear_auxdata() { auxdata_.Clear(); }
const ::google::protobuf::Map< ::std::string, ::std::string>& CollectionProto::auxdata() const {
    // @@protoc_insertion_point(field_map:proio.proto.CollectionProto.auxData)
    return auxdata_.GetMap();
}
::google::protobuf::Map< ::std::string, ::std::string>* CollectionProto::mutable_auxdata() {
    // @@protoc_insertion_point(field_mutable_map:proio.proto.CollectionProto.auxData)
    return auxdata_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace proio

// @@protoc_insertion_point(global_scope)
