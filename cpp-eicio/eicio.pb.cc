// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eicio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eicio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eicio {
class EventHeader_CollectionHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventHeader_CollectionHeader> {
} _EventHeader_CollectionHeader_default_instance_;
class EventHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventHeader> {
} _EventHeader_default_instance_;
class MCParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MCParticle> {
} _MCParticle_default_instance_;
class MCParticleCollectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MCParticleCollection> {
} _MCParticleCollection_default_instance_;
class SimTrackerHitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimTrackerHit> {
} _SimTrackerHit_default_instance_;
class SimTrackerHitCollectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimTrackerHitCollection> {
} _SimTrackerHitCollection_default_instance_;

namespace protobuf_eicio_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader_CollectionHeader, payloadsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, vmajor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, vminor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventHeader, collections_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, parents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, pdg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, vertex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, mass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, pendpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, spin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, colorflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, genstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticle, simstatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticleCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCParticleCollection, particles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, cellid0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, cellid1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, edep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, mc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, pathlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHit, quality_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHitCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimTrackerHitCollection, hits_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(EventHeader_CollectionHeader)},
  { 8, -1, sizeof(EventHeader)},
  { 17, -1, sizeof(MCParticle)},
  { 35, -1, sizeof(MCParticleCollection)},
  { 41, -1, sizeof(SimTrackerHit)},
  { 55, -1, sizeof(SimTrackerHitCollection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventHeader_CollectionHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EventHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MCParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MCParticleCollection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimTrackerHit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimTrackerHitCollection_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "eicio.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _EventHeader_CollectionHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EventHeader_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MCParticle_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MCParticleCollection_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SimTrackerHit_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SimTrackerHitCollection_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EventHeader_CollectionHeader_default_instance_.DefaultConstruct();
  _EventHeader_default_instance_.DefaultConstruct();
  _MCParticle_default_instance_.DefaultConstruct();
  _MCParticleCollection_default_instance_.DefaultConstruct();
  _SimTrackerHit_default_instance_.DefaultConstruct();
  _SimTrackerHitCollection_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013eicio.proto\022\005eicio\"\243\004\n\013EventHeader\022\n\n\002"
      "id\030\001 \001(\004\022\016\n\006vMajor\030\002 \001(\r\022\016\n\006vMinor\030\003 \001(\r"
      "\0228\n\013collections\030\004 \003(\0132#.eicio.EventHeade"
      "r.CollectionHeader\032\255\003\n\020CollectionHeader\022"
      "6\n\004type\030\001 \001(\0162(.eicio.EventHeader.Collec"
      "tionHeader.Type\022\014\n\004name\030\002 \001(\t\022\023\n\013payload"
      "Size\030\003 \001(\r\"\275\002\n\004Type\022\010\n\004NONE\020\000\022\016\n\nMCParti"
      "cle\020\001\022\021\n\rSimTrackerHit\020\002\022\017\n\013TrackerData\020"
      "\003\022\022\n\016TrackerRawData\020\004\022\016\n\nTrackerHit\020\005\022\020\n"
      "\014TrackerPulse\020\006\022\023\n\017TrackerHitPlane\020\007\022\027\n\023"
      "TrackerHitZCylinder\020\010\022\t\n\005Track\020\t\022\025\n\021SimC"
      "alorimeterHit\020\n\022\025\n\021RawCalorimeterHit\020\013\022\022"
      "\n\016CalorimeterHit\020\014\022\013\n\007Cluster\020\r\022\017\n\013RecPa"
      "rticle\020\016\022\n\n\006Vertex\020\017\022\016\n\nReferences\020\020\022\014\n\010"
      "Relation\020\021\"\252\002\n\nMCParticle\022\017\n\007parents\030\001 \003"
      "(\005\022\020\n\010children\030\002 \003(\005\022\013\n\003PDG\030\003 \001(\005\022\016\n\006ver"
      "tex\030\004 \003(\001\022\014\n\004time\030\005 \001(\002\022\t\n\001p\030\006 \003(\001\022\014\n\004ma"
      "ss\030\007 \001(\001\022\016\n\006charge\030\010 \001(\002\022\021\n\tPEndPoint\030\t "
      "\003(\001\022\014\n\004spin\030\n \003(\002\022\021\n\tcolorFlow\030\013 \003(\005\022.\n\t"
      "genStatus\030\014 \001(\0162\033.eicio.MCParticle.GenSt"
      "atus\022\021\n\tsimStatus\030\r \001(\r\".\n\tGenStatus\022\016\n\n"
      "FINALSTATE\020\000\022\021\n\rDOCUMENTATION\020\001\"<\n\024MCPar"
      "ticleCollection\022$\n\tparticles\030\001 \003(\0132\021.eic"
      "io.MCParticle\"\226\001\n\rSimTrackerHit\022\017\n\007cellI"
      "D0\030\001 \001(\005\022\017\n\007cellID1\030\002 \001(\005\022\013\n\003pos\030\003 \003(\001\022\014"
      "\n\004EDep\030\004 \001(\002\022\014\n\004time\030\005 \001(\002\022\n\n\002mc\030\006 \001(\r\022\t"
      "\n\001p\030\007 \001(\002\022\022\n\npathLength\030\010 \001(\002\022\017\n\007quality"
      "\030\t \001(\005\"=\n\027SimTrackerHitCollection\022\"\n\004hit"
      "s\030\001 \003(\0132\024.eicio.SimTrackerHitb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eicio.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_eicio_2eproto

const ::google::protobuf::EnumDescriptor* EventHeader_CollectionHeader_Type_descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_enum_descriptors[0];
}
bool EventHeader_CollectionHeader_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::NONE;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::MCParticle;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::SimTrackerHit;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::TrackerData;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::TrackerRawData;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::TrackerHit;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::TrackerPulse;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::TrackerHitPlane;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::TrackerHitZCylinder;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::Track;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::SimCalorimeterHit;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::RawCalorimeterHit;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::CalorimeterHit;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::Cluster;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::RecParticle;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::Vertex;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::References;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::Relation;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::Type_MIN;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::Type_MAX;
const int EventHeader_CollectionHeader::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MCParticle_GenStatus_descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_enum_descriptors[1];
}
bool MCParticle_GenStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MCParticle_GenStatus MCParticle::FINALSTATE;
const MCParticle_GenStatus MCParticle::DOCUMENTATION;
const MCParticle_GenStatus MCParticle::GenStatus_MIN;
const MCParticle_GenStatus MCParticle::GenStatus_MAX;
const int MCParticle::GenStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventHeader_CollectionHeader::kTypeFieldNumber;
const int EventHeader_CollectionHeader::kNameFieldNumber;
const int EventHeader_CollectionHeader::kPayloadSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventHeader_CollectionHeader::EventHeader_CollectionHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eicio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eicio.EventHeader.CollectionHeader)
}
EventHeader_CollectionHeader::EventHeader_CollectionHeader(const EventHeader_CollectionHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&payloadsize_) -
    reinterpret_cast<char*>(&type_) + sizeof(payloadsize_));
  // @@protoc_insertion_point(copy_constructor:eicio.EventHeader.CollectionHeader)
}

void EventHeader_CollectionHeader::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&payloadsize_) -
    reinterpret_cast<char*>(&type_) + sizeof(payloadsize_));
  _cached_size_ = 0;
}

EventHeader_CollectionHeader::~EventHeader_CollectionHeader() {
  // @@protoc_insertion_point(destructor:eicio.EventHeader.CollectionHeader)
  SharedDtor();
}

void EventHeader_CollectionHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EventHeader_CollectionHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHeader_CollectionHeader::descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventHeader_CollectionHeader& EventHeader_CollectionHeader::default_instance() {
  protobuf_eicio_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventHeader_CollectionHeader* EventHeader_CollectionHeader::New(::google::protobuf::Arena* arena) const {
  EventHeader_CollectionHeader* n = new EventHeader_CollectionHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventHeader_CollectionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:eicio.EventHeader.CollectionHeader)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&payloadsize_) -
    reinterpret_cast<char*>(&type_) + sizeof(payloadsize_));
}

bool EventHeader_CollectionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eicio.EventHeader.CollectionHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .eicio.EventHeader.CollectionHeader.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::eicio::EventHeader_CollectionHeader_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eicio.EventHeader.CollectionHeader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 payloadSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payloadsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eicio.EventHeader.CollectionHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eicio.EventHeader.CollectionHeader)
  return false;
#undef DO_
}

void EventHeader_CollectionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eicio.EventHeader.CollectionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eicio.EventHeader.CollectionHeader.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eicio.EventHeader.CollectionHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 payloadSize = 3;
  if (this->payloadsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payloadsize(), output);
  }

  // @@protoc_insertion_point(serialize_end:eicio.EventHeader.CollectionHeader)
}

::google::protobuf::uint8* EventHeader_CollectionHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eicio.EventHeader.CollectionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eicio.EventHeader.CollectionHeader.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eicio.EventHeader.CollectionHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 payloadSize = 3;
  if (this->payloadsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->payloadsize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eicio.EventHeader.CollectionHeader)
  return target;
}

size_t EventHeader_CollectionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eicio.EventHeader.CollectionHeader)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .eicio.EventHeader.CollectionHeader.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 payloadSize = 3;
  if (this->payloadsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payloadsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventHeader_CollectionHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eicio.EventHeader.CollectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const EventHeader_CollectionHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventHeader_CollectionHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.EventHeader.CollectionHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.EventHeader.CollectionHeader)
    MergeFrom(*source);
  }
}

void EventHeader_CollectionHeader::MergeFrom(const EventHeader_CollectionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eicio.EventHeader.CollectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.payloadsize() != 0) {
    set_payloadsize(from.payloadsize());
  }
}

void EventHeader_CollectionHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eicio.EventHeader.CollectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventHeader_CollectionHeader::CopyFrom(const EventHeader_CollectionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eicio.EventHeader.CollectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventHeader_CollectionHeader::IsInitialized() const {
  return true;
}

void EventHeader_CollectionHeader::Swap(EventHeader_CollectionHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventHeader_CollectionHeader::InternalSwap(EventHeader_CollectionHeader* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(payloadsize_, other->payloadsize_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventHeader_CollectionHeader::GetMetadata() const {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader_CollectionHeader

// .eicio.EventHeader.CollectionHeader.Type type = 1;
void EventHeader_CollectionHeader::clear_type() {
  type_ = 0;
}
::eicio::EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::type() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.type)
  return static_cast< ::eicio::EventHeader_CollectionHeader_Type >(type_);
}
void EventHeader_CollectionHeader::set_type(::eicio::EventHeader_CollectionHeader_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.type)
}

// string name = 2;
void EventHeader_CollectionHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EventHeader_CollectionHeader::name() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.name)
  return name_.GetNoArena();
}
void EventHeader_CollectionHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.name)
}
#if LANG_CXX11
void EventHeader_CollectionHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eicio.EventHeader.CollectionHeader.name)
}
#endif
void EventHeader_CollectionHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eicio.EventHeader.CollectionHeader.name)
}
void EventHeader_CollectionHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eicio.EventHeader.CollectionHeader.name)
}
::std::string* EventHeader_CollectionHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.CollectionHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EventHeader_CollectionHeader::release_name() {
  // @@protoc_insertion_point(field_release:eicio.EventHeader.CollectionHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EventHeader_CollectionHeader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eicio.EventHeader.CollectionHeader.name)
}

// uint32 payloadSize = 3;
void EventHeader_CollectionHeader::clear_payloadsize() {
  payloadsize_ = 0u;
}
::google::protobuf::uint32 EventHeader_CollectionHeader::payloadsize() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.payloadSize)
  return payloadsize_;
}
void EventHeader_CollectionHeader::set_payloadsize(::google::protobuf::uint32 value) {
  
  payloadsize_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.payloadSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventHeader::kIdFieldNumber;
const int EventHeader::kVMajorFieldNumber;
const int EventHeader::kVMinorFieldNumber;
const int EventHeader::kCollectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventHeader::EventHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eicio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eicio.EventHeader)
}
EventHeader::EventHeader(const EventHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      collections_(from.collections_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&vminor_) -
    reinterpret_cast<char*>(&id_) + sizeof(vminor_));
  // @@protoc_insertion_point(copy_constructor:eicio.EventHeader)
}

void EventHeader::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&vminor_) -
    reinterpret_cast<char*>(&id_) + sizeof(vminor_));
  _cached_size_ = 0;
}

EventHeader::~EventHeader() {
  // @@protoc_insertion_point(destructor:eicio.EventHeader)
  SharedDtor();
}

void EventHeader::SharedDtor() {
}

void EventHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventHeader::descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventHeader& EventHeader::default_instance() {
  protobuf_eicio_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventHeader* EventHeader::New(::google::protobuf::Arena* arena) const {
  EventHeader* n = new EventHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:eicio.EventHeader)
  collections_.Clear();
  ::memset(&id_, 0, reinterpret_cast<char*>(&vminor_) -
    reinterpret_cast<char*>(&id_) + sizeof(vminor_));
}

bool EventHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eicio.EventHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vMajor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vmajor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vMinor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vminor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .eicio.EventHeader.CollectionHeader collections = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eicio.EventHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eicio.EventHeader)
  return false;
#undef DO_
}

void EventHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eicio.EventHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint32 vMajor = 2;
  if (this->vmajor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vmajor(), output);
  }

  // uint32 vMinor = 3;
  if (this->vminor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vminor(), output);
  }

  // repeated .eicio.EventHeader.CollectionHeader collections = 4;
  for (unsigned int i = 0, n = this->collections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->collections(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eicio.EventHeader)
}

::google::protobuf::uint8* EventHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eicio.EventHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint32 vMajor = 2;
  if (this->vmajor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vmajor(), target);
  }

  // uint32 vMinor = 3;
  if (this->vminor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vminor(), target);
  }

  // repeated .eicio.EventHeader.CollectionHeader collections = 4;
  for (unsigned int i = 0, n = this->collections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->collections(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eicio.EventHeader)
  return target;
}

size_t EventHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eicio.EventHeader)
  size_t total_size = 0;

  // repeated .eicio.EventHeader.CollectionHeader collections = 4;
  {
    unsigned int count = this->collections_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collections(i));
    }
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 vMajor = 2;
  if (this->vmajor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vmajor());
  }

  // uint32 vMinor = 3;
  if (this->vminor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vminor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eicio.EventHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const EventHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.EventHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.EventHeader)
    MergeFrom(*source);
  }
}

void EventHeader::MergeFrom(const EventHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eicio.EventHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collections_.MergeFrom(from.collections_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.vmajor() != 0) {
    set_vmajor(from.vmajor());
  }
  if (from.vminor() != 0) {
    set_vminor(from.vminor());
  }
}

void EventHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eicio.EventHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventHeader::CopyFrom(const EventHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eicio.EventHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventHeader::IsInitialized() const {
  return true;
}

void EventHeader::Swap(EventHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventHeader::InternalSwap(EventHeader* other) {
  collections_.InternalSwap(&other->collections_);
  std::swap(id_, other->id_);
  std::swap(vmajor_, other->vmajor_);
  std::swap(vminor_, other->vminor_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventHeader::GetMetadata() const {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader

// uint64 id = 1;
void EventHeader::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventHeader::id() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.id)
  return id_;
}
void EventHeader::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.id)
}

// uint32 vMajor = 2;
void EventHeader::clear_vmajor() {
  vmajor_ = 0u;
}
::google::protobuf::uint32 EventHeader::vmajor() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.vMajor)
  return vmajor_;
}
void EventHeader::set_vmajor(::google::protobuf::uint32 value) {
  
  vmajor_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.vMajor)
}

// uint32 vMinor = 3;
void EventHeader::clear_vminor() {
  vminor_ = 0u;
}
::google::protobuf::uint32 EventHeader::vminor() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.vMinor)
  return vminor_;
}
void EventHeader::set_vminor(::google::protobuf::uint32 value) {
  
  vminor_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.vMinor)
}

// repeated .eicio.EventHeader.CollectionHeader collections = 4;
int EventHeader::collections_size() const {
  return collections_.size();
}
void EventHeader::clear_collections() {
  collections_.Clear();
}
const ::eicio::EventHeader_CollectionHeader& EventHeader::collections(int index) const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.collections)
  return collections_.Get(index);
}
::eicio::EventHeader_CollectionHeader* EventHeader::mutable_collections(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.collections)
  return collections_.Mutable(index);
}
::eicio::EventHeader_CollectionHeader* EventHeader::add_collections() {
  // @@protoc_insertion_point(field_add:eicio.EventHeader.collections)
  return collections_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >*
EventHeader::mutable_collections() {
  // @@protoc_insertion_point(field_mutable_list:eicio.EventHeader.collections)
  return &collections_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >&
EventHeader::collections() const {
  // @@protoc_insertion_point(field_list:eicio.EventHeader.collections)
  return collections_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MCParticle::kParentsFieldNumber;
const int MCParticle::kChildrenFieldNumber;
const int MCParticle::kPDGFieldNumber;
const int MCParticle::kVertexFieldNumber;
const int MCParticle::kTimeFieldNumber;
const int MCParticle::kPFieldNumber;
const int MCParticle::kMassFieldNumber;
const int MCParticle::kChargeFieldNumber;
const int MCParticle::kPEndPointFieldNumber;
const int MCParticle::kSpinFieldNumber;
const int MCParticle::kColorFlowFieldNumber;
const int MCParticle::kGenStatusFieldNumber;
const int MCParticle::kSimStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MCParticle::MCParticle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eicio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eicio.MCParticle)
}
MCParticle::MCParticle(const MCParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parents_(from.parents_),
      children_(from.children_),
      vertex_(from.vertex_),
      p_(from.p_),
      pendpoint_(from.pendpoint_),
      spin_(from.spin_),
      colorflow_(from.colorflow_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pdg_, &from.pdg_,
    reinterpret_cast<char*>(&simstatus_) -
    reinterpret_cast<char*>(&pdg_) + sizeof(simstatus_));
  // @@protoc_insertion_point(copy_constructor:eicio.MCParticle)
}

void MCParticle::SharedCtor() {
  ::memset(&pdg_, 0, reinterpret_cast<char*>(&simstatus_) -
    reinterpret_cast<char*>(&pdg_) + sizeof(simstatus_));
  _cached_size_ = 0;
}

MCParticle::~MCParticle() {
  // @@protoc_insertion_point(destructor:eicio.MCParticle)
  SharedDtor();
}

void MCParticle::SharedDtor() {
}

void MCParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCParticle::descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MCParticle& MCParticle::default_instance() {
  protobuf_eicio_2eproto::InitDefaults();
  return *internal_default_instance();
}

MCParticle* MCParticle::New(::google::protobuf::Arena* arena) const {
  MCParticle* n = new MCParticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MCParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:eicio.MCParticle)
  parents_.Clear();
  children_.Clear();
  vertex_.Clear();
  p_.Clear();
  pendpoint_.Clear();
  spin_.Clear();
  colorflow_.Clear();
  ::memset(&pdg_, 0, reinterpret_cast<char*>(&simstatus_) -
    reinterpret_cast<char*>(&pdg_) + sizeof(simstatus_));
}

bool MCParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eicio.MCParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 parents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_parents())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_parents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 children = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_children())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_children())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PDG = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double vertex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vertex())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_vertex())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double p = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_p())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(49u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_p())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mass = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float charge = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double PEndPoint = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pendpoint())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(73u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74u, input, this->mutable_pendpoint())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float spin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_spin())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(85u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_spin())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 colorFlow = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colorflow())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(88u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_colorflow())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eicio.MCParticle.GenStatus genStatus = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_genstatus(static_cast< ::eicio::MCParticle_GenStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 simStatus = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &simstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eicio.MCParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eicio.MCParticle)
  return false;
#undef DO_
}

void MCParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eicio.MCParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 parents = 1;
  if (this->parents_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_parents_cached_byte_size_);
  }
  for (int i = 0, n = this->parents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->parents(i), output);
  }

  // repeated int32 children = 2;
  if (this->children_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_children_cached_byte_size_);
  }
  for (int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->children(i), output);
  }

  // int32 PDG = 3;
  if (this->pdg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pdg(), output);
  }

  // repeated double vertex = 4;
  if (this->vertex_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vertex_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->vertex().data(), this->vertex_size(), output);
  }

  // float time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time(), output);
  }

  // repeated double p = 6;
  if (this->p_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_p_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->p().data(), this->p_size(), output);
  }

  // double mass = 7;
  if (this->mass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->mass(), output);
  }

  // float charge = 8;
  if (this->charge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->charge(), output);
  }

  // repeated double PEndPoint = 9;
  if (this->pendpoint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pendpoint_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->pendpoint().data(), this->pendpoint_size(), output);
  }

  // repeated float spin = 10;
  if (this->spin_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spin_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->spin().data(), this->spin_size(), output);
  }

  // repeated int32 colorFlow = 11;
  if (this->colorflow_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_colorflow_cached_byte_size_);
  }
  for (int i = 0, n = this->colorflow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->colorflow(i), output);
  }

  // .eicio.MCParticle.GenStatus genStatus = 12;
  if (this->genstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->genstatus(), output);
  }

  // uint32 simStatus = 13;
  if (this->simstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->simstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:eicio.MCParticle)
}

::google::protobuf::uint8* MCParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eicio.MCParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 parents = 1;
  if (this->parents_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _parents_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->parents_, target);
  }

  // repeated int32 children = 2;
  if (this->children_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _children_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->children_, target);
  }

  // int32 PDG = 3;
  if (this->pdg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pdg(), target);
  }

  // repeated double vertex = 4;
  if (this->vertex_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vertex_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->vertex_, target);
  }

  // float time = 5;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time(), target);
  }

  // repeated double p = 6;
  if (this->p_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _p_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->p_, target);
  }

  // double mass = 7;
  if (this->mass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->mass(), target);
  }

  // float charge = 8;
  if (this->charge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->charge(), target);
  }

  // repeated double PEndPoint = 9;
  if (this->pendpoint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pendpoint_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pendpoint_, target);
  }

  // repeated float spin = 10;
  if (this->spin_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _spin_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->spin_, target);
  }

  // repeated int32 colorFlow = 11;
  if (this->colorflow_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _colorflow_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->colorflow_, target);
  }

  // .eicio.MCParticle.GenStatus genStatus = 12;
  if (this->genstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->genstatus(), target);
  }

  // uint32 simStatus = 13;
  if (this->simstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->simstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eicio.MCParticle)
  return target;
}

size_t MCParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eicio.MCParticle)
  size_t total_size = 0;

  // repeated int32 parents = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->parents_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _parents_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 children = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->children_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _children_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double vertex = 4;
  {
    unsigned int count = this->vertex_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vertex_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double p = 6;
  {
    unsigned int count = this->p_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _p_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double PEndPoint = 9;
  {
    unsigned int count = this->pendpoint_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pendpoint_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float spin = 10;
  {
    unsigned int count = this->spin_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spin_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 colorFlow = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->colorflow_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _colorflow_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 PDG = 3;
  if (this->pdg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pdg());
  }

  // float time = 5;
  if (this->time() != 0) {
    total_size += 1 + 4;
  }

  // double mass = 7;
  if (this->mass() != 0) {
    total_size += 1 + 8;
  }

  // float charge = 8;
  if (this->charge() != 0) {
    total_size += 1 + 4;
  }

  // .eicio.MCParticle.GenStatus genStatus = 12;
  if (this->genstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->genstatus());
  }

  // uint32 simStatus = 13;
  if (this->simstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->simstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eicio.MCParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const MCParticle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MCParticle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.MCParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.MCParticle)
    MergeFrom(*source);
  }
}

void MCParticle::MergeFrom(const MCParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eicio.MCParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parents_.MergeFrom(from.parents_);
  children_.MergeFrom(from.children_);
  vertex_.MergeFrom(from.vertex_);
  p_.MergeFrom(from.p_);
  pendpoint_.MergeFrom(from.pendpoint_);
  spin_.MergeFrom(from.spin_);
  colorflow_.MergeFrom(from.colorflow_);
  if (from.pdg() != 0) {
    set_pdg(from.pdg());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.mass() != 0) {
    set_mass(from.mass());
  }
  if (from.charge() != 0) {
    set_charge(from.charge());
  }
  if (from.genstatus() != 0) {
    set_genstatus(from.genstatus());
  }
  if (from.simstatus() != 0) {
    set_simstatus(from.simstatus());
  }
}

void MCParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eicio.MCParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCParticle::CopyFrom(const MCParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eicio.MCParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCParticle::IsInitialized() const {
  return true;
}

void MCParticle::Swap(MCParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MCParticle::InternalSwap(MCParticle* other) {
  parents_.InternalSwap(&other->parents_);
  children_.InternalSwap(&other->children_);
  vertex_.InternalSwap(&other->vertex_);
  p_.InternalSwap(&other->p_);
  pendpoint_.InternalSwap(&other->pendpoint_);
  spin_.InternalSwap(&other->spin_);
  colorflow_.InternalSwap(&other->colorflow_);
  std::swap(pdg_, other->pdg_);
  std::swap(time_, other->time_);
  std::swap(mass_, other->mass_);
  std::swap(charge_, other->charge_);
  std::swap(genstatus_, other->genstatus_);
  std::swap(simstatus_, other->simstatus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MCParticle::GetMetadata() const {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MCParticle

// repeated int32 parents = 1;
int MCParticle::parents_size() const {
  return parents_.size();
}
void MCParticle::clear_parents() {
  parents_.Clear();
}
::google::protobuf::int32 MCParticle::parents(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.parents)
  return parents_.Get(index);
}
void MCParticle::set_parents(int index, ::google::protobuf::int32 value) {
  parents_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.parents)
}
void MCParticle::add_parents(::google::protobuf::int32 value) {
  parents_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.parents)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::parents() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.parents)
  return parents_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.parents)
  return &parents_;
}

// repeated int32 children = 2;
int MCParticle::children_size() const {
  return children_.size();
}
void MCParticle::clear_children() {
  children_.Clear();
}
::google::protobuf::int32 MCParticle::children(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.children)
  return children_.Get(index);
}
void MCParticle::set_children(int index, ::google::protobuf::int32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.children)
}
void MCParticle::add_children(::google::protobuf::int32 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.children)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::children() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.children)
  return children_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.children)
  return &children_;
}

// int32 PDG = 3;
void MCParticle::clear_pdg() {
  pdg_ = 0;
}
::google::protobuf::int32 MCParticle::pdg() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.PDG)
  return pdg_;
}
void MCParticle::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.PDG)
}

// repeated double vertex = 4;
int MCParticle::vertex_size() const {
  return vertex_.size();
}
void MCParticle::clear_vertex() {
  vertex_.Clear();
}
double MCParticle::vertex(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.vertex)
  return vertex_.Get(index);
}
void MCParticle::set_vertex(int index, double value) {
  vertex_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.vertex)
}
void MCParticle::add_vertex(double value) {
  vertex_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.vertex)
}
const ::google::protobuf::RepeatedField< double >&
MCParticle::vertex() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.vertex)
  return vertex_;
}
::google::protobuf::RepeatedField< double >*
MCParticle::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.vertex)
  return &vertex_;
}

// float time = 5;
void MCParticle::clear_time() {
  time_ = 0;
}
float MCParticle::time() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.time)
  return time_;
}
void MCParticle::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.time)
}

// repeated double p = 6;
int MCParticle::p_size() const {
  return p_.size();
}
void MCParticle::clear_p() {
  p_.Clear();
}
double MCParticle::p(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.p)
  return p_.Get(index);
}
void MCParticle::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.p)
}
void MCParticle::add_p(double value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.p)
}
const ::google::protobuf::RepeatedField< double >&
MCParticle::p() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.p)
  return p_;
}
::google::protobuf::RepeatedField< double >*
MCParticle::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.p)
  return &p_;
}

// double mass = 7;
void MCParticle::clear_mass() {
  mass_ = 0;
}
double MCParticle::mass() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.mass)
  return mass_;
}
void MCParticle::set_mass(double value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.mass)
}

// float charge = 8;
void MCParticle::clear_charge() {
  charge_ = 0;
}
float MCParticle::charge() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.charge)
  return charge_;
}
void MCParticle::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.charge)
}

// repeated double PEndPoint = 9;
int MCParticle::pendpoint_size() const {
  return pendpoint_.size();
}
void MCParticle::clear_pendpoint() {
  pendpoint_.Clear();
}
double MCParticle::pendpoint(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.PEndPoint)
  return pendpoint_.Get(index);
}
void MCParticle::set_pendpoint(int index, double value) {
  pendpoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.PEndPoint)
}
void MCParticle::add_pendpoint(double value) {
  pendpoint_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.PEndPoint)
}
const ::google::protobuf::RepeatedField< double >&
MCParticle::pendpoint() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.PEndPoint)
  return pendpoint_;
}
::google::protobuf::RepeatedField< double >*
MCParticle::mutable_pendpoint() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.PEndPoint)
  return &pendpoint_;
}

// repeated float spin = 10;
int MCParticle::spin_size() const {
  return spin_.size();
}
void MCParticle::clear_spin() {
  spin_.Clear();
}
float MCParticle::spin(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.spin)
  return spin_.Get(index);
}
void MCParticle::set_spin(int index, float value) {
  spin_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.spin)
}
void MCParticle::add_spin(float value) {
  spin_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.spin)
}
const ::google::protobuf::RepeatedField< float >&
MCParticle::spin() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.spin)
  return spin_;
}
::google::protobuf::RepeatedField< float >*
MCParticle::mutable_spin() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.spin)
  return &spin_;
}

// repeated int32 colorFlow = 11;
int MCParticle::colorflow_size() const {
  return colorflow_.size();
}
void MCParticle::clear_colorflow() {
  colorflow_.Clear();
}
::google::protobuf::int32 MCParticle::colorflow(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.colorFlow)
  return colorflow_.Get(index);
}
void MCParticle::set_colorflow(int index, ::google::protobuf::int32 value) {
  colorflow_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.colorFlow)
}
void MCParticle::add_colorflow(::google::protobuf::int32 value) {
  colorflow_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.colorFlow)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::colorflow() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.colorFlow)
  return colorflow_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_colorflow() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.colorFlow)
  return &colorflow_;
}

// .eicio.MCParticle.GenStatus genStatus = 12;
void MCParticle::clear_genstatus() {
  genstatus_ = 0;
}
::eicio::MCParticle_GenStatus MCParticle::genstatus() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.genStatus)
  return static_cast< ::eicio::MCParticle_GenStatus >(genstatus_);
}
void MCParticle::set_genstatus(::eicio::MCParticle_GenStatus value) {
  
  genstatus_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.genStatus)
}

// uint32 simStatus = 13;
void MCParticle::clear_simstatus() {
  simstatus_ = 0u;
}
::google::protobuf::uint32 MCParticle::simstatus() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.simStatus)
  return simstatus_;
}
void MCParticle::set_simstatus(::google::protobuf::uint32 value) {
  
  simstatus_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.simStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MCParticleCollection::kParticlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MCParticleCollection::MCParticleCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eicio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eicio.MCParticleCollection)
}
MCParticleCollection::MCParticleCollection(const MCParticleCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      particles_(from.particles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:eicio.MCParticleCollection)
}

void MCParticleCollection::SharedCtor() {
  _cached_size_ = 0;
}

MCParticleCollection::~MCParticleCollection() {
  // @@protoc_insertion_point(destructor:eicio.MCParticleCollection)
  SharedDtor();
}

void MCParticleCollection::SharedDtor() {
}

void MCParticleCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCParticleCollection::descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MCParticleCollection& MCParticleCollection::default_instance() {
  protobuf_eicio_2eproto::InitDefaults();
  return *internal_default_instance();
}

MCParticleCollection* MCParticleCollection::New(::google::protobuf::Arena* arena) const {
  MCParticleCollection* n = new MCParticleCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MCParticleCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:eicio.MCParticleCollection)
  particles_.Clear();
}

bool MCParticleCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eicio.MCParticleCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eicio.MCParticle particles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eicio.MCParticleCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eicio.MCParticleCollection)
  return false;
#undef DO_
}

void MCParticleCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eicio.MCParticleCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .eicio.MCParticle particles = 1;
  for (unsigned int i = 0, n = this->particles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->particles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eicio.MCParticleCollection)
}

::google::protobuf::uint8* MCParticleCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eicio.MCParticleCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .eicio.MCParticle particles = 1;
  for (unsigned int i = 0, n = this->particles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->particles(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eicio.MCParticleCollection)
  return target;
}

size_t MCParticleCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eicio.MCParticleCollection)
  size_t total_size = 0;

  // repeated .eicio.MCParticle particles = 1;
  {
    unsigned int count = this->particles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particles(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCParticleCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eicio.MCParticleCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const MCParticleCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MCParticleCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.MCParticleCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.MCParticleCollection)
    MergeFrom(*source);
  }
}

void MCParticleCollection::MergeFrom(const MCParticleCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eicio.MCParticleCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  particles_.MergeFrom(from.particles_);
}

void MCParticleCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eicio.MCParticleCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCParticleCollection::CopyFrom(const MCParticleCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eicio.MCParticleCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCParticleCollection::IsInitialized() const {
  return true;
}

void MCParticleCollection::Swap(MCParticleCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MCParticleCollection::InternalSwap(MCParticleCollection* other) {
  particles_.InternalSwap(&other->particles_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MCParticleCollection::GetMetadata() const {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MCParticleCollection

// repeated .eicio.MCParticle particles = 1;
int MCParticleCollection::particles_size() const {
  return particles_.size();
}
void MCParticleCollection::clear_particles() {
  particles_.Clear();
}
const ::eicio::MCParticle& MCParticleCollection::particles(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticleCollection.particles)
  return particles_.Get(index);
}
::eicio::MCParticle* MCParticleCollection::mutable_particles(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.MCParticleCollection.particles)
  return particles_.Mutable(index);
}
::eicio::MCParticle* MCParticleCollection::add_particles() {
  // @@protoc_insertion_point(field_add:eicio.MCParticleCollection.particles)
  return particles_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >*
MCParticleCollection::mutable_particles() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticleCollection.particles)
  return &particles_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >&
MCParticleCollection::particles() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticleCollection.particles)
  return particles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimTrackerHit::kCellID0FieldNumber;
const int SimTrackerHit::kCellID1FieldNumber;
const int SimTrackerHit::kPosFieldNumber;
const int SimTrackerHit::kEDepFieldNumber;
const int SimTrackerHit::kTimeFieldNumber;
const int SimTrackerHit::kMcFieldNumber;
const int SimTrackerHit::kPFieldNumber;
const int SimTrackerHit::kPathLengthFieldNumber;
const int SimTrackerHit::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimTrackerHit::SimTrackerHit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eicio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eicio.SimTrackerHit)
}
SimTrackerHit::SimTrackerHit(const SimTrackerHit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pos_(from.pos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cellid0_, &from.cellid0_,
    reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&cellid0_) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:eicio.SimTrackerHit)
}

void SimTrackerHit::SharedCtor() {
  ::memset(&cellid0_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&cellid0_) + sizeof(quality_));
  _cached_size_ = 0;
}

SimTrackerHit::~SimTrackerHit() {
  // @@protoc_insertion_point(destructor:eicio.SimTrackerHit)
  SharedDtor();
}

void SimTrackerHit::SharedDtor() {
}

void SimTrackerHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimTrackerHit::descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimTrackerHit& SimTrackerHit::default_instance() {
  protobuf_eicio_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimTrackerHit* SimTrackerHit::New(::google::protobuf::Arena* arena) const {
  SimTrackerHit* n = new SimTrackerHit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimTrackerHit::Clear() {
// @@protoc_insertion_point(message_clear_start:eicio.SimTrackerHit)
  pos_.Clear();
  ::memset(&cellid0_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&cellid0_) + sizeof(quality_));
}

bool SimTrackerHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eicio.SimTrackerHit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cellID0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cellID1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pos())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EDep = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float p = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pathLength = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pathlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quality = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eicio.SimTrackerHit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eicio.SimTrackerHit)
  return false;
#undef DO_
}

void SimTrackerHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eicio.SimTrackerHit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cellID0 = 1;
  if (this->cellid0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cellid0(), output);
  }

  // int32 cellID1 = 2;
  if (this->cellid1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid1(), output);
  }

  // repeated double pos = 3;
  if (this->pos_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pos_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->pos().data(), this->pos_size(), output);
  }

  // float EDep = 4;
  if (this->edep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->edep(), output);
  }

  // float time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time(), output);
  }

  // uint32 mc = 6;
  if (this->mc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mc(), output);
  }

  // float p = 7;
  if (this->p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->p(), output);
  }

  // float pathLength = 8;
  if (this->pathlength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pathlength(), output);
  }

  // int32 quality = 9;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality(), output);
  }

  // @@protoc_insertion_point(serialize_end:eicio.SimTrackerHit)
}

::google::protobuf::uint8* SimTrackerHit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eicio.SimTrackerHit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cellID0 = 1;
  if (this->cellid0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cellid0(), target);
  }

  // int32 cellID1 = 2;
  if (this->cellid1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid1(), target);
  }

  // repeated double pos = 3;
  if (this->pos_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pos_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pos_, target);
  }

  // float EDep = 4;
  if (this->edep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->edep(), target);
  }

  // float time = 5;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time(), target);
  }

  // uint32 mc = 6;
  if (this->mc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mc(), target);
  }

  // float p = 7;
  if (this->p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->p(), target);
  }

  // float pathLength = 8;
  if (this->pathlength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pathlength(), target);
  }

  // int32 quality = 9;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eicio.SimTrackerHit)
  return target;
}

size_t SimTrackerHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eicio.SimTrackerHit)
  size_t total_size = 0;

  // repeated double pos = 3;
  {
    unsigned int count = this->pos_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pos_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 cellID0 = 1;
  if (this->cellid0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cellid0());
  }

  // int32 cellID1 = 2;
  if (this->cellid1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cellid1());
  }

  // float EDep = 4;
  if (this->edep() != 0) {
    total_size += 1 + 4;
  }

  // float time = 5;
  if (this->time() != 0) {
    total_size += 1 + 4;
  }

  // uint32 mc = 6;
  if (this->mc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mc());
  }

  // float p = 7;
  if (this->p() != 0) {
    total_size += 1 + 4;
  }

  // float pathLength = 8;
  if (this->pathlength() != 0) {
    total_size += 1 + 4;
  }

  // int32 quality = 9;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimTrackerHit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eicio.SimTrackerHit)
  GOOGLE_DCHECK_NE(&from, this);
  const SimTrackerHit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimTrackerHit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.SimTrackerHit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.SimTrackerHit)
    MergeFrom(*source);
  }
}

void SimTrackerHit::MergeFrom(const SimTrackerHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eicio.SimTrackerHit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_.MergeFrom(from.pos_);
  if (from.cellid0() != 0) {
    set_cellid0(from.cellid0());
  }
  if (from.cellid1() != 0) {
    set_cellid1(from.cellid1());
  }
  if (from.edep() != 0) {
    set_edep(from.edep());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.mc() != 0) {
    set_mc(from.mc());
  }
  if (from.p() != 0) {
    set_p(from.p());
  }
  if (from.pathlength() != 0) {
    set_pathlength(from.pathlength());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void SimTrackerHit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eicio.SimTrackerHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTrackerHit::CopyFrom(const SimTrackerHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eicio.SimTrackerHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTrackerHit::IsInitialized() const {
  return true;
}

void SimTrackerHit::Swap(SimTrackerHit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimTrackerHit::InternalSwap(SimTrackerHit* other) {
  pos_.InternalSwap(&other->pos_);
  std::swap(cellid0_, other->cellid0_);
  std::swap(cellid1_, other->cellid1_);
  std::swap(edep_, other->edep_);
  std::swap(time_, other->time_);
  std::swap(mc_, other->mc_);
  std::swap(p_, other->p_);
  std::swap(pathlength_, other->pathlength_);
  std::swap(quality_, other->quality_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimTrackerHit::GetMetadata() const {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimTrackerHit

// int32 cellID0 = 1;
void SimTrackerHit::clear_cellid0() {
  cellid0_ = 0;
}
::google::protobuf::int32 SimTrackerHit::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.cellID0)
  return cellid0_;
}
void SimTrackerHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.cellID0)
}

// int32 cellID1 = 2;
void SimTrackerHit::clear_cellid1() {
  cellid1_ = 0;
}
::google::protobuf::int32 SimTrackerHit::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.cellID1)
  return cellid1_;
}
void SimTrackerHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.cellID1)
}

// repeated double pos = 3;
int SimTrackerHit::pos_size() const {
  return pos_.size();
}
void SimTrackerHit::clear_pos() {
  pos_.Clear();
}
double SimTrackerHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.pos)
  return pos_.Get(index);
}
void SimTrackerHit::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.pos)
}
void SimTrackerHit::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.SimTrackerHit.pos)
}
const ::google::protobuf::RepeatedField< double >&
SimTrackerHit::pos() const {
  // @@protoc_insertion_point(field_list:eicio.SimTrackerHit.pos)
  return pos_;
}
::google::protobuf::RepeatedField< double >*
SimTrackerHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimTrackerHit.pos)
  return &pos_;
}

// float EDep = 4;
void SimTrackerHit::clear_edep() {
  edep_ = 0;
}
float SimTrackerHit::edep() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.EDep)
  return edep_;
}
void SimTrackerHit::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.EDep)
}

// float time = 5;
void SimTrackerHit::clear_time() {
  time_ = 0;
}
float SimTrackerHit::time() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.time)
  return time_;
}
void SimTrackerHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.time)
}

// uint32 mc = 6;
void SimTrackerHit::clear_mc() {
  mc_ = 0u;
}
::google::protobuf::uint32 SimTrackerHit::mc() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.mc)
  return mc_;
}
void SimTrackerHit::set_mc(::google::protobuf::uint32 value) {
  
  mc_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.mc)
}

// float p = 7;
void SimTrackerHit::clear_p() {
  p_ = 0;
}
float SimTrackerHit::p() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.p)
  return p_;
}
void SimTrackerHit::set_p(float value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.p)
}

// float pathLength = 8;
void SimTrackerHit::clear_pathlength() {
  pathlength_ = 0;
}
float SimTrackerHit::pathlength() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.pathLength)
  return pathlength_;
}
void SimTrackerHit::set_pathlength(float value) {
  
  pathlength_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.pathLength)
}

// int32 quality = 9;
void SimTrackerHit::clear_quality() {
  quality_ = 0;
}
::google::protobuf::int32 SimTrackerHit::quality() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.quality)
  return quality_;
}
void SimTrackerHit::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.quality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimTrackerHitCollection::kHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimTrackerHitCollection::SimTrackerHitCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_eicio_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eicio.SimTrackerHitCollection)
}
SimTrackerHitCollection::SimTrackerHitCollection(const SimTrackerHitCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hits_(from.hits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:eicio.SimTrackerHitCollection)
}

void SimTrackerHitCollection::SharedCtor() {
  _cached_size_ = 0;
}

SimTrackerHitCollection::~SimTrackerHitCollection() {
  // @@protoc_insertion_point(destructor:eicio.SimTrackerHitCollection)
  SharedDtor();
}

void SimTrackerHitCollection::SharedDtor() {
}

void SimTrackerHitCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimTrackerHitCollection::descriptor() {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimTrackerHitCollection& SimTrackerHitCollection::default_instance() {
  protobuf_eicio_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimTrackerHitCollection* SimTrackerHitCollection::New(::google::protobuf::Arena* arena) const {
  SimTrackerHitCollection* n = new SimTrackerHitCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimTrackerHitCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:eicio.SimTrackerHitCollection)
  hits_.Clear();
}

bool SimTrackerHitCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eicio.SimTrackerHitCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .eicio.SimTrackerHit hits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eicio.SimTrackerHitCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eicio.SimTrackerHitCollection)
  return false;
#undef DO_
}

void SimTrackerHitCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eicio.SimTrackerHitCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .eicio.SimTrackerHit hits = 1;
  for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hits(i), output);
  }

  // @@protoc_insertion_point(serialize_end:eicio.SimTrackerHitCollection)
}

::google::protobuf::uint8* SimTrackerHitCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eicio.SimTrackerHitCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .eicio.SimTrackerHit hits = 1;
  for (unsigned int i = 0, n = this->hits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->hits(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eicio.SimTrackerHitCollection)
  return target;
}

size_t SimTrackerHitCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eicio.SimTrackerHitCollection)
  size_t total_size = 0;

  // repeated .eicio.SimTrackerHit hits = 1;
  {
    unsigned int count = this->hits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hits(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimTrackerHitCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eicio.SimTrackerHitCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const SimTrackerHitCollection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimTrackerHitCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eicio.SimTrackerHitCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eicio.SimTrackerHitCollection)
    MergeFrom(*source);
  }
}

void SimTrackerHitCollection::MergeFrom(const SimTrackerHitCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eicio.SimTrackerHitCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hits_.MergeFrom(from.hits_);
}

void SimTrackerHitCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eicio.SimTrackerHitCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTrackerHitCollection::CopyFrom(const SimTrackerHitCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eicio.SimTrackerHitCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTrackerHitCollection::IsInitialized() const {
  return true;
}

void SimTrackerHitCollection::Swap(SimTrackerHitCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimTrackerHitCollection::InternalSwap(SimTrackerHitCollection* other) {
  hits_.InternalSwap(&other->hits_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimTrackerHitCollection::GetMetadata() const {
  protobuf_eicio_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_eicio_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimTrackerHitCollection

// repeated .eicio.SimTrackerHit hits = 1;
int SimTrackerHitCollection::hits_size() const {
  return hits_.size();
}
void SimTrackerHitCollection::clear_hits() {
  hits_.Clear();
}
const ::eicio::SimTrackerHit& SimTrackerHitCollection::hits(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHitCollection.hits)
  return hits_.Get(index);
}
::eicio::SimTrackerHit* SimTrackerHitCollection::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.SimTrackerHitCollection.hits)
  return hits_.Mutable(index);
}
::eicio::SimTrackerHit* SimTrackerHitCollection::add_hits() {
  // @@protoc_insertion_point(field_add:eicio.SimTrackerHitCollection.hits)
  return hits_.Add();
}
::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >*
SimTrackerHitCollection::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimTrackerHitCollection.hits)
  return &hits_;
}
const ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >&
SimTrackerHitCollection::hits() const {
  // @@protoc_insertion_point(field_list:eicio.SimTrackerHitCollection.hits)
  return hits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace eicio

// @@protoc_insertion_point(global_scope)
