// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eicio.proto

#ifndef PROTOBUF_eicio_2eproto__INCLUDED
#define PROTOBUF_eicio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace eicio {
class EventHeader;
class EventHeaderDefaultTypeInternal;
extern EventHeaderDefaultTypeInternal _EventHeader_default_instance_;
class EventHeader_CollectionHeader;
class EventHeader_CollectionHeaderDefaultTypeInternal;
extern EventHeader_CollectionHeaderDefaultTypeInternal _EventHeader_CollectionHeader_default_instance_;
class MCParticle;
class MCParticleDefaultTypeInternal;
extern MCParticleDefaultTypeInternal _MCParticle_default_instance_;
class MCParticleCollection;
class MCParticleCollectionDefaultTypeInternal;
extern MCParticleCollectionDefaultTypeInternal _MCParticleCollection_default_instance_;
class SimTrackerHit;
class SimTrackerHitDefaultTypeInternal;
extern SimTrackerHitDefaultTypeInternal _SimTrackerHit_default_instance_;
class SimTrackerHitCollection;
class SimTrackerHitCollectionDefaultTypeInternal;
extern SimTrackerHitCollectionDefaultTypeInternal _SimTrackerHitCollection_default_instance_;
}  // namespace eicio

namespace eicio {

namespace protobuf_eicio_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_eicio_2eproto

enum EventHeader_CollectionHeader_Type {
  EventHeader_CollectionHeader_Type_NONE = 0,
  EventHeader_CollectionHeader_Type_MCParticle = 1,
  EventHeader_CollectionHeader_Type_SimTrackerHit = 2,
  EventHeader_CollectionHeader_Type_TrackerData = 3,
  EventHeader_CollectionHeader_Type_TrackerRawData = 4,
  EventHeader_CollectionHeader_Type_TrackerHit = 5,
  EventHeader_CollectionHeader_Type_TrackerPulse = 6,
  EventHeader_CollectionHeader_Type_TrackerHitPlane = 7,
  EventHeader_CollectionHeader_Type_TrackerHitZCylinder = 8,
  EventHeader_CollectionHeader_Type_Track = 9,
  EventHeader_CollectionHeader_Type_SimCalorimeterHit = 10,
  EventHeader_CollectionHeader_Type_RawCalorimeterHit = 11,
  EventHeader_CollectionHeader_Type_CalorimeterHit = 12,
  EventHeader_CollectionHeader_Type_Cluster = 13,
  EventHeader_CollectionHeader_Type_RecParticle = 14,
  EventHeader_CollectionHeader_Type_Vertex = 15,
  EventHeader_CollectionHeader_Type_References = 16,
  EventHeader_CollectionHeader_Type_Relation = 17,
  EventHeader_CollectionHeader_Type_EventHeader_CollectionHeader_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventHeader_CollectionHeader_Type_EventHeader_CollectionHeader_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventHeader_CollectionHeader_Type_IsValid(int value);
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader_Type_Type_MIN = EventHeader_CollectionHeader_Type_NONE;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader_Type_Type_MAX = EventHeader_CollectionHeader_Type_Relation;
const int EventHeader_CollectionHeader_Type_Type_ARRAYSIZE = EventHeader_CollectionHeader_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventHeader_CollectionHeader_Type_descriptor();
inline const ::std::string& EventHeader_CollectionHeader_Type_Name(EventHeader_CollectionHeader_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventHeader_CollectionHeader_Type_descriptor(), value);
}
inline bool EventHeader_CollectionHeader_Type_Parse(
    const ::std::string& name, EventHeader_CollectionHeader_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventHeader_CollectionHeader_Type>(
    EventHeader_CollectionHeader_Type_descriptor(), name, value);
}
enum MCParticle_GenStatus {
  MCParticle_GenStatus_FINALSTATE = 0,
  MCParticle_GenStatus_DOCUMENTATION = 1,
  MCParticle_GenStatus_MCParticle_GenStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MCParticle_GenStatus_MCParticle_GenStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MCParticle_GenStatus_IsValid(int value);
const MCParticle_GenStatus MCParticle_GenStatus_GenStatus_MIN = MCParticle_GenStatus_FINALSTATE;
const MCParticle_GenStatus MCParticle_GenStatus_GenStatus_MAX = MCParticle_GenStatus_DOCUMENTATION;
const int MCParticle_GenStatus_GenStatus_ARRAYSIZE = MCParticle_GenStatus_GenStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MCParticle_GenStatus_descriptor();
inline const ::std::string& MCParticle_GenStatus_Name(MCParticle_GenStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MCParticle_GenStatus_descriptor(), value);
}
inline bool MCParticle_GenStatus_Parse(
    const ::std::string& name, MCParticle_GenStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MCParticle_GenStatus>(
    MCParticle_GenStatus_descriptor(), name, value);
}
// ===================================================================

class EventHeader_CollectionHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.EventHeader.CollectionHeader) */ {
 public:
  EventHeader_CollectionHeader();
  virtual ~EventHeader_CollectionHeader();

  EventHeader_CollectionHeader(const EventHeader_CollectionHeader& from);

  inline EventHeader_CollectionHeader& operator=(const EventHeader_CollectionHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventHeader_CollectionHeader& default_instance();

  static inline const EventHeader_CollectionHeader* internal_default_instance() {
    return reinterpret_cast<const EventHeader_CollectionHeader*>(
               &_EventHeader_CollectionHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EventHeader_CollectionHeader* other);

  // implements Message ----------------------------------------------

  inline EventHeader_CollectionHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  EventHeader_CollectionHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventHeader_CollectionHeader& from);
  void MergeFrom(const EventHeader_CollectionHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventHeader_CollectionHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EventHeader_CollectionHeader_Type Type;
  static const Type NONE =
    EventHeader_CollectionHeader_Type_NONE;
  static const Type MCParticle =
    EventHeader_CollectionHeader_Type_MCParticle;
  static const Type SimTrackerHit =
    EventHeader_CollectionHeader_Type_SimTrackerHit;
  static const Type TrackerData =
    EventHeader_CollectionHeader_Type_TrackerData;
  static const Type TrackerRawData =
    EventHeader_CollectionHeader_Type_TrackerRawData;
  static const Type TrackerHit =
    EventHeader_CollectionHeader_Type_TrackerHit;
  static const Type TrackerPulse =
    EventHeader_CollectionHeader_Type_TrackerPulse;
  static const Type TrackerHitPlane =
    EventHeader_CollectionHeader_Type_TrackerHitPlane;
  static const Type TrackerHitZCylinder =
    EventHeader_CollectionHeader_Type_TrackerHitZCylinder;
  static const Type Track =
    EventHeader_CollectionHeader_Type_Track;
  static const Type SimCalorimeterHit =
    EventHeader_CollectionHeader_Type_SimCalorimeterHit;
  static const Type RawCalorimeterHit =
    EventHeader_CollectionHeader_Type_RawCalorimeterHit;
  static const Type CalorimeterHit =
    EventHeader_CollectionHeader_Type_CalorimeterHit;
  static const Type Cluster =
    EventHeader_CollectionHeader_Type_Cluster;
  static const Type RecParticle =
    EventHeader_CollectionHeader_Type_RecParticle;
  static const Type Vertex =
    EventHeader_CollectionHeader_Type_Vertex;
  static const Type References =
    EventHeader_CollectionHeader_Type_References;
  static const Type Relation =
    EventHeader_CollectionHeader_Type_Relation;
  static inline bool Type_IsValid(int value) {
    return EventHeader_CollectionHeader_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EventHeader_CollectionHeader_Type_Type_MIN;
  static const Type Type_MAX =
    EventHeader_CollectionHeader_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EventHeader_CollectionHeader_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EventHeader_CollectionHeader_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EventHeader_CollectionHeader_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EventHeader_CollectionHeader_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .eicio.EventHeader.CollectionHeader.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::eicio::EventHeader_CollectionHeader_Type type() const;
  void set_type(::eicio::EventHeader_CollectionHeader_Type value);

  // uint32 payloadSize = 3;
  void clear_payloadsize();
  static const int kPayloadSizeFieldNumber = 3;
  ::google::protobuf::uint32 payloadsize() const;
  void set_payloadsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eicio.EventHeader.CollectionHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::uint32 payloadsize_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.EventHeader) */ {
 public:
  EventHeader();
  virtual ~EventHeader();

  EventHeader(const EventHeader& from);

  inline EventHeader& operator=(const EventHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventHeader& default_instance();

  static inline const EventHeader* internal_default_instance() {
    return reinterpret_cast<const EventHeader*>(
               &_EventHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EventHeader* other);

  // implements Message ----------------------------------------------

  inline EventHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  EventHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventHeader& from);
  void MergeFrom(const EventHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EventHeader_CollectionHeader CollectionHeader;

  // accessors -------------------------------------------------------

  // repeated .eicio.EventHeader.CollectionHeader collection = 4;
  int collection_size() const;
  void clear_collection();
  static const int kCollectionFieldNumber = 4;
  const ::eicio::EventHeader_CollectionHeader& collection(int index) const;
  ::eicio::EventHeader_CollectionHeader* mutable_collection(int index);
  ::eicio::EventHeader_CollectionHeader* add_collection();
  ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >*
      mutable_collection();
  const ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >&
      collection() const;

  // string description = 16;
  void clear_description();
  static const int kDescriptionFieldNumber = 16;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 vMajor = 2;
  void clear_vmajor();
  static const int kVMajorFieldNumber = 2;
  ::google::protobuf::uint32 vmajor() const;
  void set_vmajor(::google::protobuf::uint32 value);

  // uint32 vMinor = 3;
  void clear_vminor();
  static const int kVMinorFieldNumber = 3;
  ::google::protobuf::uint32 vminor() const;
  void set_vminor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eicio.EventHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader > collection_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 vmajor_;
  ::google::protobuf::uint32 vminor_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.MCParticle) */ {
 public:
  MCParticle();
  virtual ~MCParticle();

  MCParticle(const MCParticle& from);

  inline MCParticle& operator=(const MCParticle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MCParticle& default_instance();

  static inline const MCParticle* internal_default_instance() {
    return reinterpret_cast<const MCParticle*>(
               &_MCParticle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MCParticle* other);

  // implements Message ----------------------------------------------

  inline MCParticle* New() const PROTOBUF_FINAL { return New(NULL); }

  MCParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MCParticle& from);
  void MergeFrom(const MCParticle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MCParticle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MCParticle_GenStatus GenStatus;
  static const GenStatus FINALSTATE =
    MCParticle_GenStatus_FINALSTATE;
  static const GenStatus DOCUMENTATION =
    MCParticle_GenStatus_DOCUMENTATION;
  static inline bool GenStatus_IsValid(int value) {
    return MCParticle_GenStatus_IsValid(value);
  }
  static const GenStatus GenStatus_MIN =
    MCParticle_GenStatus_GenStatus_MIN;
  static const GenStatus GenStatus_MAX =
    MCParticle_GenStatus_GenStatus_MAX;
  static const int GenStatus_ARRAYSIZE =
    MCParticle_GenStatus_GenStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GenStatus_descriptor() {
    return MCParticle_GenStatus_descriptor();
  }
  static inline const ::std::string& GenStatus_Name(GenStatus value) {
    return MCParticle_GenStatus_Name(value);
  }
  static inline bool GenStatus_Parse(const ::std::string& name,
      GenStatus* value) {
    return MCParticle_GenStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 parents = 1;
  int parents_size() const;
  void clear_parents();
  static const int kParentsFieldNumber = 1;
  ::google::protobuf::int32 parents(int index) const;
  void set_parents(int index, ::google::protobuf::int32 value);
  void add_parents(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      parents() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_parents();

  // repeated int32 children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  ::google::protobuf::int32 children(int index) const;
  void set_children(int index, ::google::protobuf::int32 value);
  void add_children(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      children() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_children();

  // repeated double vertex = 4;
  int vertex_size() const;
  void clear_vertex();
  static const int kVertexFieldNumber = 4;
  double vertex(int index) const;
  void set_vertex(int index, double value);
  void add_vertex(double value);
  const ::google::protobuf::RepeatedField< double >&
      vertex() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vertex();

  // repeated double p = 6;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 6;
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::google::protobuf::RepeatedField< double >&
      p() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_p();

  // repeated double PEndPoint = 9;
  int pendpoint_size() const;
  void clear_pendpoint();
  static const int kPEndPointFieldNumber = 9;
  double pendpoint(int index) const;
  void set_pendpoint(int index, double value);
  void add_pendpoint(double value);
  const ::google::protobuf::RepeatedField< double >&
      pendpoint() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pendpoint();

  // repeated float spin = 10;
  int spin_size() const;
  void clear_spin();
  static const int kSpinFieldNumber = 10;
  float spin(int index) const;
  void set_spin(int index, float value);
  void add_spin(float value);
  const ::google::protobuf::RepeatedField< float >&
      spin() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_spin();

  // repeated int32 colorFlow = 11;
  int colorflow_size() const;
  void clear_colorflow();
  static const int kColorFlowFieldNumber = 11;
  ::google::protobuf::int32 colorflow(int index) const;
  void set_colorflow(int index, ::google::protobuf::int32 value);
  void add_colorflow(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      colorflow() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_colorflow();

  // int32 PDG = 3;
  void clear_pdg();
  static const int kPDGFieldNumber = 3;
  ::google::protobuf::int32 pdg() const;
  void set_pdg(::google::protobuf::int32 value);

  // float time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  float time() const;
  void set_time(float value);

  // double mass = 7;
  void clear_mass();
  static const int kMassFieldNumber = 7;
  double mass() const;
  void set_mass(double value);

  // float charge = 8;
  void clear_charge();
  static const int kChargeFieldNumber = 8;
  float charge() const;
  void set_charge(float value);

  // .eicio.MCParticle.GenStatus genStatus = 12;
  void clear_genstatus();
  static const int kGenStatusFieldNumber = 12;
  ::eicio::MCParticle_GenStatus genstatus() const;
  void set_genstatus(::eicio::MCParticle_GenStatus value);

  // uint32 simStatus = 13;
  void clear_simstatus();
  static const int kSimStatusFieldNumber = 13;
  ::google::protobuf::uint32 simstatus() const;
  void set_simstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eicio.MCParticle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > parents_;
  mutable int _parents_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > children_;
  mutable int _children_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > vertex_;
  mutable int _vertex_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > p_;
  mutable int _p_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > pendpoint_;
  mutable int _pendpoint_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > spin_;
  mutable int _spin_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > colorflow_;
  mutable int _colorflow_cached_byte_size_;
  ::google::protobuf::int32 pdg_;
  float time_;
  double mass_;
  float charge_;
  int genstatus_;
  ::google::protobuf::uint32 simstatus_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticleCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.MCParticleCollection) */ {
 public:
  MCParticleCollection();
  virtual ~MCParticleCollection();

  MCParticleCollection(const MCParticleCollection& from);

  inline MCParticleCollection& operator=(const MCParticleCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MCParticleCollection& default_instance();

  static inline const MCParticleCollection* internal_default_instance() {
    return reinterpret_cast<const MCParticleCollection*>(
               &_MCParticleCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MCParticleCollection* other);

  // implements Message ----------------------------------------------

  inline MCParticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  MCParticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MCParticleCollection& from);
  void MergeFrom(const MCParticleCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MCParticleCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.MCParticle particle = 1;
  int particle_size() const;
  void clear_particle();
  static const int kParticleFieldNumber = 1;
  const ::eicio::MCParticle& particle(int index) const;
  ::eicio::MCParticle* mutable_particle(int index);
  ::eicio::MCParticle* add_particle();
  ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >*
      mutable_particle();
  const ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >&
      particle() const;

  // @@protoc_insertion_point(class_scope:eicio.MCParticleCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle > particle_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.SimTrackerHit) */ {
 public:
  SimTrackerHit();
  virtual ~SimTrackerHit();

  SimTrackerHit(const SimTrackerHit& from);

  inline SimTrackerHit& operator=(const SimTrackerHit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTrackerHit& default_instance();

  static inline const SimTrackerHit* internal_default_instance() {
    return reinterpret_cast<const SimTrackerHit*>(
               &_SimTrackerHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SimTrackerHit* other);

  // implements Message ----------------------------------------------

  inline SimTrackerHit* New() const PROTOBUF_FINAL { return New(NULL); }

  SimTrackerHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimTrackerHit& from);
  void MergeFrom(const SimTrackerHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimTrackerHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 3;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float EDep = 4;
  void clear_edep();
  static const int kEDepFieldNumber = 4;
  float edep() const;
  void set_edep(float value);

  // float time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  float time() const;
  void set_time(float value);

  // uint32 mc = 6;
  void clear_mc();
  static const int kMcFieldNumber = 6;
  ::google::protobuf::uint32 mc() const;
  void set_mc(::google::protobuf::uint32 value);

  // float p = 7;
  void clear_p();
  static const int kPFieldNumber = 7;
  float p() const;
  void set_p(float value);

  // float pathLength = 8;
  void clear_pathlength();
  static const int kPathLengthFieldNumber = 8;
  float pathlength() const;
  void set_pathlength(float value);

  // int32 quality = 9;
  void clear_quality();
  static const int kQualityFieldNumber = 9;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.SimTrackerHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float edep_;
  float time_;
  ::google::protobuf::uint32 mc_;
  float p_;
  float pathlength_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.SimTrackerHitCollection) */ {
 public:
  SimTrackerHitCollection();
  virtual ~SimTrackerHitCollection();

  SimTrackerHitCollection(const SimTrackerHitCollection& from);

  inline SimTrackerHitCollection& operator=(const SimTrackerHitCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTrackerHitCollection& default_instance();

  static inline const SimTrackerHitCollection* internal_default_instance() {
    return reinterpret_cast<const SimTrackerHitCollection*>(
               &_SimTrackerHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SimTrackerHitCollection* other);

  // implements Message ----------------------------------------------

  inline SimTrackerHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  SimTrackerHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimTrackerHitCollection& from);
  void MergeFrom(const SimTrackerHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimTrackerHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.SimTrackerHit hit = 1;
  int hit_size() const;
  void clear_hit();
  static const int kHitFieldNumber = 1;
  const ::eicio::SimTrackerHit& hit(int index) const;
  ::eicio::SimTrackerHit* mutable_hit(int index);
  ::eicio::SimTrackerHit* add_hit();
  ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >*
      mutable_hit();
  const ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >&
      hit() const;

  // @@protoc_insertion_point(class_scope:eicio.SimTrackerHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit > hit_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader_CollectionHeader

// .eicio.EventHeader.CollectionHeader.Type type = 1;
inline void EventHeader_CollectionHeader::clear_type() {
  type_ = 0;
}
inline ::eicio::EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::type() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.type)
  return static_cast< ::eicio::EventHeader_CollectionHeader_Type >(type_);
}
inline void EventHeader_CollectionHeader::set_type(::eicio::EventHeader_CollectionHeader_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.type)
}

// string name = 2;
inline void EventHeader_CollectionHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader_CollectionHeader::name() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.name)
  return name_.GetNoArena();
}
inline void EventHeader_CollectionHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.name)
}
#if LANG_CXX11
inline void EventHeader_CollectionHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eicio.EventHeader.CollectionHeader.name)
}
#endif
inline void EventHeader_CollectionHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eicio.EventHeader.CollectionHeader.name)
}
inline void EventHeader_CollectionHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eicio.EventHeader.CollectionHeader.name)
}
inline ::std::string* EventHeader_CollectionHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.CollectionHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader_CollectionHeader::release_name() {
  // @@protoc_insertion_point(field_release:eicio.EventHeader.CollectionHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader_CollectionHeader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eicio.EventHeader.CollectionHeader.name)
}

// uint32 payloadSize = 3;
inline void EventHeader_CollectionHeader::clear_payloadsize() {
  payloadsize_ = 0u;
}
inline ::google::protobuf::uint32 EventHeader_CollectionHeader::payloadsize() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.payloadSize)
  return payloadsize_;
}
inline void EventHeader_CollectionHeader::set_payloadsize(::google::protobuf::uint32 value) {
  
  payloadsize_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.payloadSize)
}

// -------------------------------------------------------------------

// EventHeader

// uint64 id = 1;
inline void EventHeader::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventHeader::id() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.id)
  return id_;
}
inline void EventHeader::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.id)
}

// uint32 vMajor = 2;
inline void EventHeader::clear_vmajor() {
  vmajor_ = 0u;
}
inline ::google::protobuf::uint32 EventHeader::vmajor() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.vMajor)
  return vmajor_;
}
inline void EventHeader::set_vmajor(::google::protobuf::uint32 value) {
  
  vmajor_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.vMajor)
}

// uint32 vMinor = 3;
inline void EventHeader::clear_vminor() {
  vminor_ = 0u;
}
inline ::google::protobuf::uint32 EventHeader::vminor() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.vMinor)
  return vminor_;
}
inline void EventHeader::set_vminor(::google::protobuf::uint32 value) {
  
  vminor_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.vMinor)
}

// repeated .eicio.EventHeader.CollectionHeader collection = 4;
inline int EventHeader::collection_size() const {
  return collection_.size();
}
inline void EventHeader::clear_collection() {
  collection_.Clear();
}
inline const ::eicio::EventHeader_CollectionHeader& EventHeader::collection(int index) const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.collection)
  return collection_.Get(index);
}
inline ::eicio::EventHeader_CollectionHeader* EventHeader::mutable_collection(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.collection)
  return collection_.Mutable(index);
}
inline ::eicio::EventHeader_CollectionHeader* EventHeader::add_collection() {
  // @@protoc_insertion_point(field_add:eicio.EventHeader.collection)
  return collection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >*
EventHeader::mutable_collection() {
  // @@protoc_insertion_point(field_mutable_list:eicio.EventHeader.collection)
  return &collection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >&
EventHeader::collection() const {
  // @@protoc_insertion_point(field_list:eicio.EventHeader.collection)
  return collection_;
}

// string description = 16;
inline void EventHeader::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader::description() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.description)
  return description_.GetNoArena();
}
inline void EventHeader::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eicio.EventHeader.description)
}
#if LANG_CXX11
inline void EventHeader::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eicio.EventHeader.description)
}
#endif
inline void EventHeader::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eicio.EventHeader.description)
}
inline void EventHeader::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eicio.EventHeader.description)
}
inline ::std::string* EventHeader::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader::release_description() {
  // @@protoc_insertion_point(field_release:eicio.EventHeader.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:eicio.EventHeader.description)
}

// -------------------------------------------------------------------

// MCParticle

// repeated int32 parents = 1;
inline int MCParticle::parents_size() const {
  return parents_.size();
}
inline void MCParticle::clear_parents() {
  parents_.Clear();
}
inline ::google::protobuf::int32 MCParticle::parents(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.parents)
  return parents_.Get(index);
}
inline void MCParticle::set_parents(int index, ::google::protobuf::int32 value) {
  parents_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.parents)
}
inline void MCParticle::add_parents(::google::protobuf::int32 value) {
  parents_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.parents)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::parents() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.parents)
  return parents_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.parents)
  return &parents_;
}

// repeated int32 children = 2;
inline int MCParticle::children_size() const {
  return children_.size();
}
inline void MCParticle::clear_children() {
  children_.Clear();
}
inline ::google::protobuf::int32 MCParticle::children(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.children)
  return children_.Get(index);
}
inline void MCParticle::set_children(int index, ::google::protobuf::int32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.children)
}
inline void MCParticle::add_children(::google::protobuf::int32 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.children)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::children() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.children)
  return children_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.children)
  return &children_;
}

// int32 PDG = 3;
inline void MCParticle::clear_pdg() {
  pdg_ = 0;
}
inline ::google::protobuf::int32 MCParticle::pdg() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.PDG)
  return pdg_;
}
inline void MCParticle::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.PDG)
}

// repeated double vertex = 4;
inline int MCParticle::vertex_size() const {
  return vertex_.size();
}
inline void MCParticle::clear_vertex() {
  vertex_.Clear();
}
inline double MCParticle::vertex(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.vertex)
  return vertex_.Get(index);
}
inline void MCParticle::set_vertex(int index, double value) {
  vertex_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.vertex)
}
inline void MCParticle::add_vertex(double value) {
  vertex_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.vertex)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::vertex() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.vertex)
  return vertex_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.vertex)
  return &vertex_;
}

// float time = 5;
inline void MCParticle::clear_time() {
  time_ = 0;
}
inline float MCParticle::time() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.time)
  return time_;
}
inline void MCParticle::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.time)
}

// repeated double p = 6;
inline int MCParticle::p_size() const {
  return p_.size();
}
inline void MCParticle::clear_p() {
  p_.Clear();
}
inline double MCParticle::p(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.p)
  return p_.Get(index);
}
inline void MCParticle::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.p)
}
inline void MCParticle::add_p(double value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.p)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::p() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.p)
  return &p_;
}

// double mass = 7;
inline void MCParticle::clear_mass() {
  mass_ = 0;
}
inline double MCParticle::mass() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.mass)
  return mass_;
}
inline void MCParticle::set_mass(double value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.mass)
}

// float charge = 8;
inline void MCParticle::clear_charge() {
  charge_ = 0;
}
inline float MCParticle::charge() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.charge)
  return charge_;
}
inline void MCParticle::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.charge)
}

// repeated double PEndPoint = 9;
inline int MCParticle::pendpoint_size() const {
  return pendpoint_.size();
}
inline void MCParticle::clear_pendpoint() {
  pendpoint_.Clear();
}
inline double MCParticle::pendpoint(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.PEndPoint)
  return pendpoint_.Get(index);
}
inline void MCParticle::set_pendpoint(int index, double value) {
  pendpoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.PEndPoint)
}
inline void MCParticle::add_pendpoint(double value) {
  pendpoint_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.PEndPoint)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::pendpoint() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.PEndPoint)
  return pendpoint_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_pendpoint() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.PEndPoint)
  return &pendpoint_;
}

// repeated float spin = 10;
inline int MCParticle::spin_size() const {
  return spin_.size();
}
inline void MCParticle::clear_spin() {
  spin_.Clear();
}
inline float MCParticle::spin(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.spin)
  return spin_.Get(index);
}
inline void MCParticle::set_spin(int index, float value) {
  spin_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.spin)
}
inline void MCParticle::add_spin(float value) {
  spin_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.spin)
}
inline const ::google::protobuf::RepeatedField< float >&
MCParticle::spin() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.spin)
  return spin_;
}
inline ::google::protobuf::RepeatedField< float >*
MCParticle::mutable_spin() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.spin)
  return &spin_;
}

// repeated int32 colorFlow = 11;
inline int MCParticle::colorflow_size() const {
  return colorflow_.size();
}
inline void MCParticle::clear_colorflow() {
  colorflow_.Clear();
}
inline ::google::protobuf::int32 MCParticle::colorflow(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.colorFlow)
  return colorflow_.Get(index);
}
inline void MCParticle::set_colorflow(int index, ::google::protobuf::int32 value) {
  colorflow_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.colorFlow)
}
inline void MCParticle::add_colorflow(::google::protobuf::int32 value) {
  colorflow_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.colorFlow)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::colorflow() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.colorFlow)
  return colorflow_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_colorflow() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.colorFlow)
  return &colorflow_;
}

// .eicio.MCParticle.GenStatus genStatus = 12;
inline void MCParticle::clear_genstatus() {
  genstatus_ = 0;
}
inline ::eicio::MCParticle_GenStatus MCParticle::genstatus() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.genStatus)
  return static_cast< ::eicio::MCParticle_GenStatus >(genstatus_);
}
inline void MCParticle::set_genstatus(::eicio::MCParticle_GenStatus value) {
  
  genstatus_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.genStatus)
}

// uint32 simStatus = 13;
inline void MCParticle::clear_simstatus() {
  simstatus_ = 0u;
}
inline ::google::protobuf::uint32 MCParticle::simstatus() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.simStatus)
  return simstatus_;
}
inline void MCParticle::set_simstatus(::google::protobuf::uint32 value) {
  
  simstatus_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.simStatus)
}

// -------------------------------------------------------------------

// MCParticleCollection

// repeated .eicio.MCParticle particle = 1;
inline int MCParticleCollection::particle_size() const {
  return particle_.size();
}
inline void MCParticleCollection::clear_particle() {
  particle_.Clear();
}
inline const ::eicio::MCParticle& MCParticleCollection::particle(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticleCollection.particle)
  return particle_.Get(index);
}
inline ::eicio::MCParticle* MCParticleCollection::mutable_particle(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.MCParticleCollection.particle)
  return particle_.Mutable(index);
}
inline ::eicio::MCParticle* MCParticleCollection::add_particle() {
  // @@protoc_insertion_point(field_add:eicio.MCParticleCollection.particle)
  return particle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >*
MCParticleCollection::mutable_particle() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticleCollection.particle)
  return &particle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >&
MCParticleCollection::particle() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticleCollection.particle)
  return particle_;
}

// -------------------------------------------------------------------

// SimTrackerHit

// int32 cellID0 = 1;
inline void SimTrackerHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.cellID0)
  return cellid0_;
}
inline void SimTrackerHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.cellID0)
}

// int32 cellID1 = 2;
inline void SimTrackerHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.cellID1)
  return cellid1_;
}
inline void SimTrackerHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.cellID1)
}

// repeated double pos = 3;
inline int SimTrackerHit::pos_size() const {
  return pos_.size();
}
inline void SimTrackerHit::clear_pos() {
  pos_.Clear();
}
inline double SimTrackerHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.pos)
  return pos_.Get(index);
}
inline void SimTrackerHit::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.pos)
}
inline void SimTrackerHit::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.SimTrackerHit.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
SimTrackerHit::pos() const {
  // @@protoc_insertion_point(field_list:eicio.SimTrackerHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
SimTrackerHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimTrackerHit.pos)
  return &pos_;
}

// float EDep = 4;
inline void SimTrackerHit::clear_edep() {
  edep_ = 0;
}
inline float SimTrackerHit::edep() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.EDep)
  return edep_;
}
inline void SimTrackerHit::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.EDep)
}

// float time = 5;
inline void SimTrackerHit::clear_time() {
  time_ = 0;
}
inline float SimTrackerHit::time() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.time)
  return time_;
}
inline void SimTrackerHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.time)
}

// uint32 mc = 6;
inline void SimTrackerHit::clear_mc() {
  mc_ = 0u;
}
inline ::google::protobuf::uint32 SimTrackerHit::mc() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.mc)
  return mc_;
}
inline void SimTrackerHit::set_mc(::google::protobuf::uint32 value) {
  
  mc_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.mc)
}

// float p = 7;
inline void SimTrackerHit::clear_p() {
  p_ = 0;
}
inline float SimTrackerHit::p() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.p)
  return p_;
}
inline void SimTrackerHit::set_p(float value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.p)
}

// float pathLength = 8;
inline void SimTrackerHit::clear_pathlength() {
  pathlength_ = 0;
}
inline float SimTrackerHit::pathlength() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.pathLength)
  return pathlength_;
}
inline void SimTrackerHit::set_pathlength(float value) {
  
  pathlength_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.pathLength)
}

// int32 quality = 9;
inline void SimTrackerHit::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::quality() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.quality)
  return quality_;
}
inline void SimTrackerHit::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.quality)
}

// -------------------------------------------------------------------

// SimTrackerHitCollection

// repeated .eicio.SimTrackerHit hit = 1;
inline int SimTrackerHitCollection::hit_size() const {
  return hit_.size();
}
inline void SimTrackerHitCollection::clear_hit() {
  hit_.Clear();
}
inline const ::eicio::SimTrackerHit& SimTrackerHitCollection::hit(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHitCollection.hit)
  return hit_.Get(index);
}
inline ::eicio::SimTrackerHit* SimTrackerHitCollection::mutable_hit(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.SimTrackerHitCollection.hit)
  return hit_.Mutable(index);
}
inline ::eicio::SimTrackerHit* SimTrackerHitCollection::add_hit() {
  // @@protoc_insertion_point(field_add:eicio.SimTrackerHitCollection.hit)
  return hit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >*
SimTrackerHitCollection::mutable_hit() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimTrackerHitCollection.hit)
  return &hit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >&
SimTrackerHitCollection::hit() const {
  // @@protoc_insertion_point(field_list:eicio.SimTrackerHitCollection.hit)
  return hit_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace eicio

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::eicio::EventHeader_CollectionHeader_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eicio::EventHeader_CollectionHeader_Type>() {
  return ::eicio::EventHeader_CollectionHeader_Type_descriptor();
}
template <> struct is_proto_enum< ::eicio::MCParticle_GenStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eicio::MCParticle_GenStatus>() {
  return ::eicio::MCParticle_GenStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eicio_2eproto__INCLUDED
