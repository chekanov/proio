// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eicio.proto

#ifndef PROTOBUF_eicio_2eproto__INCLUDED
#define PROTOBUF_eicio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace eicio {
class CalorimeterHit;
class CalorimeterHitDefaultTypeInternal;
extern CalorimeterHitDefaultTypeInternal _CalorimeterHit_default_instance_;
class CalorimeterHitCollection;
class CalorimeterHitCollectionDefaultTypeInternal;
extern CalorimeterHitCollectionDefaultTypeInternal _CalorimeterHitCollection_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterCollection;
class ClusterCollectionDefaultTypeInternal;
extern ClusterCollectionDefaultTypeInternal _ClusterCollection_default_instance_;
class EventHeader;
class EventHeaderDefaultTypeInternal;
extern EventHeaderDefaultTypeInternal _EventHeader_default_instance_;
class EventHeader_CollectionHeader;
class EventHeader_CollectionHeaderDefaultTypeInternal;
extern EventHeader_CollectionHeaderDefaultTypeInternal _EventHeader_CollectionHeader_default_instance_;
class FloatParams;
class FloatParamsDefaultTypeInternal;
extern FloatParamsDefaultTypeInternal _FloatParams_default_instance_;
class IntParams;
class IntParamsDefaultTypeInternal;
extern IntParamsDefaultTypeInternal _IntParams_default_instance_;
class MCParticle;
class MCParticleDefaultTypeInternal;
extern MCParticleDefaultTypeInternal _MCParticle_default_instance_;
class MCParticleCollection;
class MCParticleCollectionDefaultTypeInternal;
extern MCParticleCollectionDefaultTypeInternal _MCParticleCollection_default_instance_;
class Params;
class ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Params_FloatsEntry;
class Params_FloatsEntryDefaultTypeInternal;
extern Params_FloatsEntryDefaultTypeInternal _Params_FloatsEntry_default_instance_;
class Params_IntsEntry;
class Params_IntsEntryDefaultTypeInternal;
extern Params_IntsEntryDefaultTypeInternal _Params_IntsEntry_default_instance_;
class Params_StringsEntry;
class Params_StringsEntryDefaultTypeInternal;
extern Params_StringsEntryDefaultTypeInternal _Params_StringsEntry_default_instance_;
class ParticleID;
class ParticleIDDefaultTypeInternal;
extern ParticleIDDefaultTypeInternal _ParticleID_default_instance_;
class RawCalorimeterHit;
class RawCalorimeterHitDefaultTypeInternal;
extern RawCalorimeterHitDefaultTypeInternal _RawCalorimeterHit_default_instance_;
class RawCalorimeterHitCollection;
class RawCalorimeterHitCollectionDefaultTypeInternal;
extern RawCalorimeterHitCollectionDefaultTypeInternal _RawCalorimeterHitCollection_default_instance_;
class RecParticle;
class RecParticleDefaultTypeInternal;
extern RecParticleDefaultTypeInternal _RecParticle_default_instance_;
class RecParticleCollection;
class RecParticleCollectionDefaultTypeInternal;
extern RecParticleCollectionDefaultTypeInternal _RecParticleCollection_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class Relation;
class RelationDefaultTypeInternal;
extern RelationDefaultTypeInternal _Relation_default_instance_;
class RelationCollection;
class RelationCollectionDefaultTypeInternal;
extern RelationCollectionDefaultTypeInternal _RelationCollection_default_instance_;
class SimCalorimeterHit;
class SimCalorimeterHitDefaultTypeInternal;
extern SimCalorimeterHitDefaultTypeInternal _SimCalorimeterHit_default_instance_;
class SimCalorimeterHitCollection;
class SimCalorimeterHitCollectionDefaultTypeInternal;
extern SimCalorimeterHitCollectionDefaultTypeInternal _SimCalorimeterHitCollection_default_instance_;
class SimCalorimeterHit_Contrib;
class SimCalorimeterHit_ContribDefaultTypeInternal;
extern SimCalorimeterHit_ContribDefaultTypeInternal _SimCalorimeterHit_Contrib_default_instance_;
class SimTrackerHit;
class SimTrackerHitDefaultTypeInternal;
extern SimTrackerHitDefaultTypeInternal _SimTrackerHit_default_instance_;
class SimTrackerHitCollection;
class SimTrackerHitCollectionDefaultTypeInternal;
extern SimTrackerHitCollectionDefaultTypeInternal _SimTrackerHitCollection_default_instance_;
class StringParams;
class StringParamsDefaultTypeInternal;
extern StringParamsDefaultTypeInternal _StringParams_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
class TrackCollection;
class TrackCollectionDefaultTypeInternal;
extern TrackCollectionDefaultTypeInternal _TrackCollection_default_instance_;
class Track_TrackState;
class Track_TrackStateDefaultTypeInternal;
extern Track_TrackStateDefaultTypeInternal _Track_TrackState_default_instance_;
class TrackerData;
class TrackerDataDefaultTypeInternal;
extern TrackerDataDefaultTypeInternal _TrackerData_default_instance_;
class TrackerDataCollection;
class TrackerDataCollectionDefaultTypeInternal;
extern TrackerDataCollectionDefaultTypeInternal _TrackerDataCollection_default_instance_;
class TrackerHit;
class TrackerHitDefaultTypeInternal;
extern TrackerHitDefaultTypeInternal _TrackerHit_default_instance_;
class TrackerHitCollection;
class TrackerHitCollectionDefaultTypeInternal;
extern TrackerHitCollectionDefaultTypeInternal _TrackerHitCollection_default_instance_;
class TrackerHitPlane;
class TrackerHitPlaneDefaultTypeInternal;
extern TrackerHitPlaneDefaultTypeInternal _TrackerHitPlane_default_instance_;
class TrackerHitPlaneCollection;
class TrackerHitPlaneCollectionDefaultTypeInternal;
extern TrackerHitPlaneCollectionDefaultTypeInternal _TrackerHitPlaneCollection_default_instance_;
class TrackerHitZCylinder;
class TrackerHitZCylinderDefaultTypeInternal;
extern TrackerHitZCylinderDefaultTypeInternal _TrackerHitZCylinder_default_instance_;
class TrackerHitZCylinderCollection;
class TrackerHitZCylinderCollectionDefaultTypeInternal;
extern TrackerHitZCylinderCollectionDefaultTypeInternal _TrackerHitZCylinderCollection_default_instance_;
class TrackerPulse;
class TrackerPulseDefaultTypeInternal;
extern TrackerPulseDefaultTypeInternal _TrackerPulse_default_instance_;
class TrackerPulseCollection;
class TrackerPulseCollectionDefaultTypeInternal;
extern TrackerPulseCollectionDefaultTypeInternal _TrackerPulseCollection_default_instance_;
class TrackerRawData;
class TrackerRawDataDefaultTypeInternal;
extern TrackerRawDataDefaultTypeInternal _TrackerRawData_default_instance_;
class TrackerRawDataCollection;
class TrackerRawDataCollectionDefaultTypeInternal;
extern TrackerRawDataCollectionDefaultTypeInternal _TrackerRawDataCollection_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
class VertexCollection;
class VertexCollectionDefaultTypeInternal;
extern VertexCollectionDefaultTypeInternal _VertexCollection_default_instance_;
}  // namespace eicio

namespace eicio {

namespace protobuf_eicio_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_eicio_2eproto

enum EventHeader_CollectionHeader_Type {
  EventHeader_CollectionHeader_Type_NONE = 0,
  EventHeader_CollectionHeader_Type_MCParticle = 1,
  EventHeader_CollectionHeader_Type_SimTrackerHit = 2,
  EventHeader_CollectionHeader_Type_TrackerData = 3,
  EventHeader_CollectionHeader_Type_TrackerRawData = 4,
  EventHeader_CollectionHeader_Type_TrackerHit = 5,
  EventHeader_CollectionHeader_Type_TrackerPulse = 6,
  EventHeader_CollectionHeader_Type_TrackerHitPlane = 7,
  EventHeader_CollectionHeader_Type_TrackerHitZCylinder = 8,
  EventHeader_CollectionHeader_Type_Track = 9,
  EventHeader_CollectionHeader_Type_SimCalorimeterHit = 10,
  EventHeader_CollectionHeader_Type_RawCalorimeterHit = 11,
  EventHeader_CollectionHeader_Type_CalorimeterHit = 12,
  EventHeader_CollectionHeader_Type_Cluster = 13,
  EventHeader_CollectionHeader_Type_RecParticle = 14,
  EventHeader_CollectionHeader_Type_Vertex = 15,
  EventHeader_CollectionHeader_Type_Relation = 16,
  EventHeader_CollectionHeader_Type_EventHeader_CollectionHeader_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventHeader_CollectionHeader_Type_EventHeader_CollectionHeader_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventHeader_CollectionHeader_Type_IsValid(int value);
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader_Type_Type_MIN = EventHeader_CollectionHeader_Type_NONE;
const EventHeader_CollectionHeader_Type EventHeader_CollectionHeader_Type_Type_MAX = EventHeader_CollectionHeader_Type_Relation;
const int EventHeader_CollectionHeader_Type_Type_ARRAYSIZE = EventHeader_CollectionHeader_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventHeader_CollectionHeader_Type_descriptor();
inline const ::std::string& EventHeader_CollectionHeader_Type_Name(EventHeader_CollectionHeader_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventHeader_CollectionHeader_Type_descriptor(), value);
}
inline bool EventHeader_CollectionHeader_Type_Parse(
    const ::std::string& name, EventHeader_CollectionHeader_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventHeader_CollectionHeader_Type>(
    EventHeader_CollectionHeader_Type_descriptor(), name, value);
}
// ===================================================================

class EventHeader_CollectionHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.EventHeader.CollectionHeader) */ {
 public:
  EventHeader_CollectionHeader();
  virtual ~EventHeader_CollectionHeader();

  EventHeader_CollectionHeader(const EventHeader_CollectionHeader& from);

  inline EventHeader_CollectionHeader& operator=(const EventHeader_CollectionHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventHeader_CollectionHeader& default_instance();

  static inline const EventHeader_CollectionHeader* internal_default_instance() {
    return reinterpret_cast<const EventHeader_CollectionHeader*>(
               &_EventHeader_CollectionHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EventHeader_CollectionHeader* other);

  // implements Message ----------------------------------------------

  inline EventHeader_CollectionHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  EventHeader_CollectionHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventHeader_CollectionHeader& from);
  void MergeFrom(const EventHeader_CollectionHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventHeader_CollectionHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EventHeader_CollectionHeader_Type Type;
  static const Type NONE =
    EventHeader_CollectionHeader_Type_NONE;
  static const Type MCParticle =
    EventHeader_CollectionHeader_Type_MCParticle;
  static const Type SimTrackerHit =
    EventHeader_CollectionHeader_Type_SimTrackerHit;
  static const Type TrackerData =
    EventHeader_CollectionHeader_Type_TrackerData;
  static const Type TrackerRawData =
    EventHeader_CollectionHeader_Type_TrackerRawData;
  static const Type TrackerHit =
    EventHeader_CollectionHeader_Type_TrackerHit;
  static const Type TrackerPulse =
    EventHeader_CollectionHeader_Type_TrackerPulse;
  static const Type TrackerHitPlane =
    EventHeader_CollectionHeader_Type_TrackerHitPlane;
  static const Type TrackerHitZCylinder =
    EventHeader_CollectionHeader_Type_TrackerHitZCylinder;
  static const Type Track =
    EventHeader_CollectionHeader_Type_Track;
  static const Type SimCalorimeterHit =
    EventHeader_CollectionHeader_Type_SimCalorimeterHit;
  static const Type RawCalorimeterHit =
    EventHeader_CollectionHeader_Type_RawCalorimeterHit;
  static const Type CalorimeterHit =
    EventHeader_CollectionHeader_Type_CalorimeterHit;
  static const Type Cluster =
    EventHeader_CollectionHeader_Type_Cluster;
  static const Type RecParticle =
    EventHeader_CollectionHeader_Type_RecParticle;
  static const Type Vertex =
    EventHeader_CollectionHeader_Type_Vertex;
  static const Type Relation =
    EventHeader_CollectionHeader_Type_Relation;
  static inline bool Type_IsValid(int value) {
    return EventHeader_CollectionHeader_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EventHeader_CollectionHeader_Type_Type_MIN;
  static const Type Type_MAX =
    EventHeader_CollectionHeader_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EventHeader_CollectionHeader_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EventHeader_CollectionHeader_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EventHeader_CollectionHeader_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EventHeader_CollectionHeader_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .eicio.EventHeader.CollectionHeader.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::eicio::EventHeader_CollectionHeader_Type type() const;
  void set_type(::eicio::EventHeader_CollectionHeader_Type value);

  // uint32 payloadSize = 3;
  void clear_payloadsize();
  static const int kPayloadSizeFieldNumber = 3;
  ::google::protobuf::uint32 payloadsize() const;
  void set_payloadsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eicio.EventHeader.CollectionHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::uint32 payloadsize_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.EventHeader) */ {
 public:
  EventHeader();
  virtual ~EventHeader();

  EventHeader(const EventHeader& from);

  inline EventHeader& operator=(const EventHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventHeader& default_instance();

  static inline const EventHeader* internal_default_instance() {
    return reinterpret_cast<const EventHeader*>(
               &_EventHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EventHeader* other);

  // implements Message ----------------------------------------------

  inline EventHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  EventHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventHeader& from);
  void MergeFrom(const EventHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EventHeader_CollectionHeader CollectionHeader;

  // accessors -------------------------------------------------------

  // repeated .eicio.EventHeader.CollectionHeader collection = 7;
  int collection_size() const;
  void clear_collection();
  static const int kCollectionFieldNumber = 7;
  const ::eicio::EventHeader_CollectionHeader& collection(int index) const;
  ::eicio::EventHeader_CollectionHeader* mutable_collection(int index);
  ::eicio::EventHeader_CollectionHeader* add_collection();
  ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >*
      mutable_collection();
  const ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >&
      collection() const;

  // string detector = 5;
  void clear_detector();
  static const int kDetectorFieldNumber = 5;
  const ::std::string& detector() const;
  void set_detector(const ::std::string& value);
  #if LANG_CXX11
  void set_detector(::std::string&& value);
  #endif
  void set_detector(const char* value);
  void set_detector(const char* value, size_t size);
  ::std::string* mutable_detector();
  ::std::string* release_detector();
  void set_allocated_detector(::std::string* detector);

  // string description = 16;
  void clear_description();
  static const int kDescriptionFieldNumber = 16;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .eicio.Params params = 6;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 6;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // uint64 runNumber = 2;
  void clear_runnumber();
  static const int kRunNumberFieldNumber = 2;
  ::google::protobuf::uint64 runnumber() const;
  void set_runnumber(::google::protobuf::uint64 value);

  // uint64 eventNumber = 3;
  void clear_eventnumber();
  static const int kEventNumberFieldNumber = 3;
  ::google::protobuf::uint64 eventnumber() const;
  void set_eventnumber(::google::protobuf::uint64 value);

  // uint64 timeStamp = 4;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 4;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eicio.EventHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader > collection_;
  ::google::protobuf::internal::ArenaStringPtr detector_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::eicio::Params* params_;
  ::google::protobuf::uint64 runnumber_;
  ::google::protobuf::uint64 eventnumber_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 version_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.IntParams) */ {
 public:
  IntParams();
  virtual ~IntParams();

  IntParams(const IntParams& from);

  inline IntParams& operator=(const IntParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntParams& default_instance();

  static inline const IntParams* internal_default_instance() {
    return reinterpret_cast<const IntParams*>(
               &_IntParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IntParams* other);

  // implements Message ----------------------------------------------

  inline IntParams* New() const PROTOBUF_FINAL { return New(NULL); }

  IntParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IntParams& from);
  void MergeFrom(const IntParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IntParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::google::protobuf::int32 array(int index) const;
  void set_array(int index, ::google::protobuf::int32 value);
  void add_array(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      array() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:eicio.IntParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > array_;
  mutable int _array_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FloatParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.FloatParams) */ {
 public:
  FloatParams();
  virtual ~FloatParams();

  FloatParams(const FloatParams& from);

  inline FloatParams& operator=(const FloatParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatParams& default_instance();

  static inline const FloatParams* internal_default_instance() {
    return reinterpret_cast<const FloatParams*>(
               &_FloatParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FloatParams* other);

  // implements Message ----------------------------------------------

  inline FloatParams* New() const PROTOBUF_FINAL { return New(NULL); }

  FloatParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FloatParams& from);
  void MergeFrom(const FloatParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FloatParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  float array(int index) const;
  void set_array(int index, float value);
  void add_array(float value);
  const ::google::protobuf::RepeatedField< float >&
      array() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:eicio.FloatParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > array_;
  mutable int _array_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.StringParams) */ {
 public:
  StringParams();
  virtual ~StringParams();

  StringParams(const StringParams& from);

  inline StringParams& operator=(const StringParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringParams& default_instance();

  static inline const StringParams* internal_default_instance() {
    return reinterpret_cast<const StringParams*>(
               &_StringParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StringParams* other);

  // implements Message ----------------------------------------------

  inline StringParams* New() const PROTOBUF_FINAL { return New(NULL); }

  StringParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StringParams& from);
  void MergeFrom(const StringParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StringParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  const ::std::string& array(int index) const;
  ::std::string* mutable_array(int index);
  void set_array(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_array(int index, ::std::string&& value);
  #endif
  void set_array(int index, const char* value);
  void set_array(int index, const char* value, size_t size);
  ::std::string* add_array();
  void add_array(const ::std::string& value);
  #if LANG_CXX11
  void add_array(::std::string&& value);
  #endif
  void add_array(const char* value);
  void add_array(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& array() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_array();

  // @@protoc_insertion_point(class_scope:eicio.StringParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> array_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.Params) */ {
 public:
  Params();
  virtual ~Params();

  Params(const Params& from);

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Params& default_instance();

  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Params* other);

  // implements Message ----------------------------------------------

  inline Params* New() const PROTOBUF_FINAL { return New(NULL); }

  Params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Params& from);
  void MergeFrom(const Params& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .eicio.IntParams> ints = 1;
  int ints_size() const;
  void clear_ints();
  static const int kIntsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::eicio::IntParams >&
      ints() const;
  ::google::protobuf::Map< ::std::string, ::eicio::IntParams >*
      mutable_ints();

  // map<string, .eicio.FloatParams> floats = 2;
  int floats_size() const;
  void clear_floats();
  static const int kFloatsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::eicio::FloatParams >&
      floats() const;
  ::google::protobuf::Map< ::std::string, ::eicio::FloatParams >*
      mutable_floats();

  // map<string, .eicio.StringParams> strings = 3;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::eicio::StringParams >&
      strings() const;
  ::google::protobuf::Map< ::std::string, ::eicio::StringParams >*
      mutable_strings();

  // @@protoc_insertion_point(class_scope:eicio.Params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class Params_IntsEntry : public ::google::protobuf::internal::MapEntry<Params_IntsEntry, 
      ::std::string, ::eicio::IntParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Params_IntsEntry, 
      ::std::string, ::eicio::IntParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    Params_IntsEntry();
    Params_IntsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Params_IntsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Params_IntsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Params_IntsEntry,
      ::std::string, ::eicio::IntParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > ints_;
  private:
  public:
  class Params_FloatsEntry : public ::google::protobuf::internal::MapEntry<Params_FloatsEntry, 
      ::std::string, ::eicio::FloatParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Params_FloatsEntry, 
      ::std::string, ::eicio::FloatParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    Params_FloatsEntry();
    Params_FloatsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Params_FloatsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Params_FloatsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Params_FloatsEntry,
      ::std::string, ::eicio::FloatParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > floats_;
  private:
  public:
  class Params_StringsEntry : public ::google::protobuf::internal::MapEntry<Params_StringsEntry, 
      ::std::string, ::eicio::StringParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Params_StringsEntry, 
      ::std::string, ::eicio::StringParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    Params_StringsEntry();
    Params_StringsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Params_StringsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Params_StringsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Params_StringsEntry,
      ::std::string, ::eicio::StringParams,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > strings_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reference& default_instance();

  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Reference* other);

  // implements Message ----------------------------------------------

  inline Reference* New() const PROTOBUF_FINAL { return New(NULL); }

  Reference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 collID = 1;
  void clear_collid();
  static const int kCollIDFieldNumber = 1;
  ::google::protobuf::uint32 collid() const;
  void set_collid(::google::protobuf::uint32 value);

  // uint32 entryID = 2;
  void clear_entryid();
  static const int kEntryIDFieldNumber = 2;
  ::google::protobuf::uint32 entryid() const;
  void set_entryid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eicio.Reference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 collid_;
  ::google::protobuf::uint32 entryid_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParticleID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.ParticleID) */ {
 public:
  ParticleID();
  virtual ~ParticleID();

  ParticleID(const ParticleID& from);

  inline ParticleID& operator=(const ParticleID& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticleID& default_instance();

  static inline const ParticleID* internal_default_instance() {
    return reinterpret_cast<const ParticleID*>(
               &_ParticleID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ParticleID* other);

  // implements Message ----------------------------------------------

  inline ParticleID* New() const PROTOBUF_FINAL { return New(NULL); }

  ParticleID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParticleID& from);
  void MergeFrom(const ParticleID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParticleID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float params = 5;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 5;
  float params(int index) const;
  void set_params(int index, float value);
  void add_params(float value);
  const ::google::protobuf::RepeatedField< float >&
      params() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_params();

  // float likelihood = 1;
  void clear_likelihood();
  static const int kLikelihoodFieldNumber = 1;
  float likelihood() const;
  void set_likelihood(float value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 PDG = 3;
  void clear_pdg();
  static const int kPDGFieldNumber = 3;
  ::google::protobuf::int32 pdg() const;
  void set_pdg(::google::protobuf::int32 value);

  // int32 algType = 4;
  void clear_algtype();
  static const int kAlgTypeFieldNumber = 4;
  ::google::protobuf::int32 algtype() const;
  void set_algtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.ParticleID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > params_;
  mutable int _params_cached_byte_size_;
  float likelihood_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 pdg_;
  ::google::protobuf::int32 algtype_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.MCParticle) */ {
 public:
  MCParticle();
  virtual ~MCParticle();

  MCParticle(const MCParticle& from);

  inline MCParticle& operator=(const MCParticle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MCParticle& default_instance();

  static inline const MCParticle* internal_default_instance() {
    return reinterpret_cast<const MCParticle*>(
               &_MCParticle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(MCParticle* other);

  // implements Message ----------------------------------------------

  inline MCParticle* New() const PROTOBUF_FINAL { return New(NULL); }

  MCParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MCParticle& from);
  void MergeFrom(const MCParticle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MCParticle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 parents = 1;
  int parents_size() const;
  void clear_parents();
  static const int kParentsFieldNumber = 1;
  ::google::protobuf::int32 parents(int index) const;
  void set_parents(int index, ::google::protobuf::int32 value);
  void add_parents(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      parents() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_parents();

  // repeated int32 children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  ::google::protobuf::int32 children(int index) const;
  void set_children(int index, ::google::protobuf::int32 value);
  void add_children(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      children() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_children();

  // repeated double vertex = 4;
  int vertex_size() const;
  void clear_vertex();
  static const int kVertexFieldNumber = 4;
  double vertex(int index) const;
  void set_vertex(int index, double value);
  void add_vertex(double value);
  const ::google::protobuf::RepeatedField< double >&
      vertex() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vertex();

  // repeated double p = 6;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 6;
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::google::protobuf::RepeatedField< double >&
      p() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_p();

  // repeated double PEndPoint = 9;
  int pendpoint_size() const;
  void clear_pendpoint();
  static const int kPEndPointFieldNumber = 9;
  double pendpoint(int index) const;
  void set_pendpoint(int index, double value);
  void add_pendpoint(double value);
  const ::google::protobuf::RepeatedField< double >&
      pendpoint() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pendpoint();

  // repeated float spin = 10;
  int spin_size() const;
  void clear_spin();
  static const int kSpinFieldNumber = 10;
  float spin(int index) const;
  void set_spin(int index, float value);
  void add_spin(float value);
  const ::google::protobuf::RepeatedField< float >&
      spin() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_spin();

  // repeated int32 colorFlow = 11;
  int colorflow_size() const;
  void clear_colorflow();
  static const int kColorFlowFieldNumber = 11;
  ::google::protobuf::int32 colorflow(int index) const;
  void set_colorflow(int index, ::google::protobuf::int32 value);
  void add_colorflow(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      colorflow() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_colorflow();

  // int32 PDG = 3;
  void clear_pdg();
  static const int kPDGFieldNumber = 3;
  ::google::protobuf::int32 pdg() const;
  void set_pdg(::google::protobuf::int32 value);

  // float time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  float time() const;
  void set_time(float value);

  // double mass = 7;
  void clear_mass();
  static const int kMassFieldNumber = 7;
  double mass() const;
  void set_mass(double value);

  // float charge = 8;
  void clear_charge();
  static const int kChargeFieldNumber = 8;
  float charge() const;
  void set_charge(float value);

  // int32 genStatus = 12;
  void clear_genstatus();
  static const int kGenStatusFieldNumber = 12;
  ::google::protobuf::int32 genstatus() const;
  void set_genstatus(::google::protobuf::int32 value);

  // uint32 simStatus = 13;
  void clear_simstatus();
  static const int kSimStatusFieldNumber = 13;
  ::google::protobuf::uint32 simstatus() const;
  void set_simstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:eicio.MCParticle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > parents_;
  mutable int _parents_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > children_;
  mutable int _children_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > vertex_;
  mutable int _vertex_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > p_;
  mutable int _p_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > pendpoint_;
  mutable int _pendpoint_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > spin_;
  mutable int _spin_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > colorflow_;
  mutable int _colorflow_cached_byte_size_;
  ::google::protobuf::int32 pdg_;
  float time_;
  double mass_;
  float charge_;
  ::google::protobuf::int32 genstatus_;
  ::google::protobuf::uint32 simstatus_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCParticleCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.MCParticleCollection) */ {
 public:
  MCParticleCollection();
  virtual ~MCParticleCollection();

  MCParticleCollection(const MCParticleCollection& from);

  inline MCParticleCollection& operator=(const MCParticleCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MCParticleCollection& default_instance();

  static inline const MCParticleCollection* internal_default_instance() {
    return reinterpret_cast<const MCParticleCollection*>(
               &_MCParticleCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(MCParticleCollection* other);

  // implements Message ----------------------------------------------

  inline MCParticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  MCParticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MCParticleCollection& from);
  void MergeFrom(const MCParticleCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MCParticleCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.MCParticle particle = 3;
  int particle_size() const;
  void clear_particle();
  static const int kParticleFieldNumber = 3;
  const ::eicio::MCParticle& particle(int index) const;
  ::eicio::MCParticle* mutable_particle(int index);
  ::eicio::MCParticle* add_particle();
  ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >*
      mutable_particle();
  const ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >&
      particle() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.MCParticleCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle > particle_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.SimTrackerHit) */ {
 public:
  SimTrackerHit();
  virtual ~SimTrackerHit();

  SimTrackerHit(const SimTrackerHit& from);

  inline SimTrackerHit& operator=(const SimTrackerHit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTrackerHit& default_instance();

  static inline const SimTrackerHit* internal_default_instance() {
    return reinterpret_cast<const SimTrackerHit*>(
               &_SimTrackerHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SimTrackerHit* other);

  // implements Message ----------------------------------------------

  inline SimTrackerHit* New() const PROTOBUF_FINAL { return New(NULL); }

  SimTrackerHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimTrackerHit& from);
  void MergeFrom(const SimTrackerHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimTrackerHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 3;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // .eicio.Reference mc = 6;
  bool has_mc() const;
  void clear_mc();
  static const int kMcFieldNumber = 6;
  const ::eicio::Reference& mc() const;
  ::eicio::Reference* mutable_mc();
  ::eicio::Reference* release_mc();
  void set_allocated_mc(::eicio::Reference* mc);

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float EDep = 4;
  void clear_edep();
  static const int kEDepFieldNumber = 4;
  float edep() const;
  void set_edep(float value);

  // float time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  float time() const;
  void set_time(float value);

  // float p = 7;
  void clear_p();
  static const int kPFieldNumber = 7;
  float p() const;
  void set_p(float value);

  // float pathLength = 8;
  void clear_pathlength();
  static const int kPathLengthFieldNumber = 8;
  float pathlength() const;
  void set_pathlength(float value);

  // int32 quality = 9;
  void clear_quality();
  static const int kQualityFieldNumber = 9;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.SimTrackerHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::eicio::Reference* mc_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float edep_;
  float time_;
  float p_;
  float pathlength_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimTrackerHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.SimTrackerHitCollection) */ {
 public:
  SimTrackerHitCollection();
  virtual ~SimTrackerHitCollection();

  SimTrackerHitCollection(const SimTrackerHitCollection& from);

  inline SimTrackerHitCollection& operator=(const SimTrackerHitCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTrackerHitCollection& default_instance();

  static inline const SimTrackerHitCollection* internal_default_instance() {
    return reinterpret_cast<const SimTrackerHitCollection*>(
               &_SimTrackerHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SimTrackerHitCollection* other);

  // implements Message ----------------------------------------------

  inline SimTrackerHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  SimTrackerHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimTrackerHitCollection& from);
  void MergeFrom(const SimTrackerHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimTrackerHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.SimTrackerHit hit = 3;
  int hit_size() const;
  void clear_hit();
  static const int kHitFieldNumber = 3;
  const ::eicio::SimTrackerHit& hit(int index) const;
  ::eicio::SimTrackerHit* mutable_hit(int index);
  ::eicio::SimTrackerHit* add_hit();
  ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >*
      mutable_hit();
  const ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >&
      hit() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.SimTrackerHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit > hit_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerRawData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerRawData) */ {
 public:
  TrackerRawData();
  virtual ~TrackerRawData();

  TrackerRawData(const TrackerRawData& from);

  inline TrackerRawData& operator=(const TrackerRawData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerRawData& default_instance();

  static inline const TrackerRawData* internal_default_instance() {
    return reinterpret_cast<const TrackerRawData*>(
               &_TrackerRawData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(TrackerRawData* other);

  // implements Message ----------------------------------------------

  inline TrackerRawData* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerRawData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerRawData& from);
  void MergeFrom(const TrackerRawData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerRawData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ADCs = 4;
  int adcs_size() const;
  void clear_adcs();
  static const int kADCsFieldNumber = 4;
  ::google::protobuf::uint32 adcs(int index) const;
  void set_adcs(int index, ::google::protobuf::uint32 value);
  void add_adcs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      adcs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_adcs();

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerRawData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > adcs_;
  mutable int _adcs_cached_byte_size_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 time_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerRawDataCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerRawDataCollection) */ {
 public:
  TrackerRawDataCollection();
  virtual ~TrackerRawDataCollection();

  TrackerRawDataCollection(const TrackerRawDataCollection& from);

  inline TrackerRawDataCollection& operator=(const TrackerRawDataCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerRawDataCollection& default_instance();

  static inline const TrackerRawDataCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerRawDataCollection*>(
               &_TrackerRawDataCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(TrackerRawDataCollection* other);

  // implements Message ----------------------------------------------

  inline TrackerRawDataCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerRawDataCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerRawDataCollection& from);
  void MergeFrom(const TrackerRawDataCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerRawDataCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.TrackerRawData data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::eicio::TrackerRawData& data(int index) const;
  ::eicio::TrackerRawData* mutable_data(int index);
  ::eicio::TrackerRawData* add_data();
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerRawData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerRawData >&
      data() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerRawDataCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerRawData > data_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerData) */ {
 public:
  TrackerData();
  virtual ~TrackerData();

  TrackerData(const TrackerData& from);

  inline TrackerData& operator=(const TrackerData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerData& default_instance();

  static inline const TrackerData* internal_default_instance() {
    return reinterpret_cast<const TrackerData*>(
               &_TrackerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(TrackerData* other);

  // implements Message ----------------------------------------------

  inline TrackerData* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerData& from);
  void MergeFrom(const TrackerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float charges = 4;
  int charges_size() const;
  void clear_charges();
  static const int kChargesFieldNumber = 4;
  float charges(int index) const;
  void set_charges(int index, float value);
  void add_charges(float value);
  const ::google::protobuf::RepeatedField< float >&
      charges() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_charges();

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > charges_;
  mutable int _charges_cached_byte_size_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float time_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerDataCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerDataCollection) */ {
 public:
  TrackerDataCollection();
  virtual ~TrackerDataCollection();

  TrackerDataCollection(const TrackerDataCollection& from);

  inline TrackerDataCollection& operator=(const TrackerDataCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerDataCollection& default_instance();

  static inline const TrackerDataCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerDataCollection*>(
               &_TrackerDataCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(TrackerDataCollection* other);

  // implements Message ----------------------------------------------

  inline TrackerDataCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerDataCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerDataCollection& from);
  void MergeFrom(const TrackerDataCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerDataCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.TrackerData data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::eicio::TrackerData& data(int index) const;
  ::eicio::TrackerData* mutable_data(int index);
  ::eicio::TrackerData* add_data();
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerData >&
      data() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerDataCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerData > data_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerHit) */ {
 public:
  TrackerHit();
  virtual ~TrackerHit();

  TrackerHit(const TrackerHit& from);

  inline TrackerHit& operator=(const TrackerHit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHit& default_instance();

  static inline const TrackerHit* internal_default_instance() {
    return reinterpret_cast<const TrackerHit*>(
               &_TrackerHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(TrackerHit* other);

  // implements Message ----------------------------------------------

  inline TrackerHit* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHit& from);
  void MergeFrom(const TrackerHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 4;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // repeated double cov = 5;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 5;
  double cov(int index) const;
  void set_cov(int index, double value);
  void add_cov(double value);
  const ::google::protobuf::RepeatedField< double >&
      cov() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_cov();

  // repeated .eicio.Reference rawHits = 10;
  int rawhits_size() const;
  void clear_rawhits();
  static const int kRawHitsFieldNumber = 10;
  const ::eicio::Reference& rawhits(int index) const;
  ::eicio::Reference* mutable_rawhits(int index);
  ::eicio::Reference* add_rawhits();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_rawhits();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      rawhits() const;

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float EDep = 6;
  void clear_edep();
  static const int kEDepFieldNumber = 6;
  float edep() const;
  void set_edep(float value);

  // float EDepErr = 7;
  void clear_edeperr();
  static const int kEDepErrFieldNumber = 7;
  float edeperr() const;
  void set_edeperr(float value);

  // float time = 8;
  void clear_time();
  static const int kTimeFieldNumber = 8;
  float time() const;
  void set_time(float value);

  // int32 quality = 9;
  void clear_quality();
  static const int kQualityFieldNumber = 9;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > rawhits_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 type_;
  float edep_;
  float edeperr_;
  float time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerHitCollection) */ {
 public:
  TrackerHitCollection();
  virtual ~TrackerHitCollection();

  TrackerHitCollection(const TrackerHitCollection& from);

  inline TrackerHitCollection& operator=(const TrackerHitCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitCollection& default_instance();

  static inline const TrackerHitCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerHitCollection*>(
               &_TrackerHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(TrackerHitCollection* other);

  // implements Message ----------------------------------------------

  inline TrackerHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitCollection& from);
  void MergeFrom(const TrackerHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.TrackerHit hit = 3;
  int hit_size() const;
  void clear_hit();
  static const int kHitFieldNumber = 3;
  const ::eicio::TrackerHit& hit(int index) const;
  ::eicio::TrackerHit* mutable_hit(int index);
  ::eicio::TrackerHit* add_hit();
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHit >*
      mutable_hit();
  const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHit >&
      hit() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHit > hit_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerPulse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerPulse) */ {
 public:
  TrackerPulse();
  virtual ~TrackerPulse();

  TrackerPulse(const TrackerPulse& from);

  inline TrackerPulse& operator=(const TrackerPulse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerPulse& default_instance();

  static inline const TrackerPulse* internal_default_instance() {
    return reinterpret_cast<const TrackerPulse*>(
               &_TrackerPulse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(TrackerPulse* other);

  // implements Message ----------------------------------------------

  inline TrackerPulse* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerPulse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerPulse& from);
  void MergeFrom(const TrackerPulse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerPulse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float cov = 5;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 5;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // .eicio.Reference TPC = 7;
  bool has_tpc() const;
  void clear_tpc();
  static const int kTPCFieldNumber = 7;
  const ::eicio::Reference& tpc() const;
  ::eicio::Reference* mutable_tpc();
  ::eicio::Reference* release_tpc();
  void set_allocated_tpc(::eicio::Reference* tpc);

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  float time() const;
  void set_time(float value);

  // float charge = 4;
  void clear_charge();
  static const int kChargeFieldNumber = 4;
  float charge() const;
  void set_charge(float value);

  // int32 quality = 6;
  void clear_quality();
  static const int kQualityFieldNumber = 6;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerPulse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::eicio::Reference* tpc_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float time_;
  float charge_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerPulseCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerPulseCollection) */ {
 public:
  TrackerPulseCollection();
  virtual ~TrackerPulseCollection();

  TrackerPulseCollection(const TrackerPulseCollection& from);

  inline TrackerPulseCollection& operator=(const TrackerPulseCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerPulseCollection& default_instance();

  static inline const TrackerPulseCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerPulseCollection*>(
               &_TrackerPulseCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(TrackerPulseCollection* other);

  // implements Message ----------------------------------------------

  inline TrackerPulseCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerPulseCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerPulseCollection& from);
  void MergeFrom(const TrackerPulseCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerPulseCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.TrackerPulse pulse = 3;
  int pulse_size() const;
  void clear_pulse();
  static const int kPulseFieldNumber = 3;
  const ::eicio::TrackerPulse& pulse(int index) const;
  ::eicio::TrackerPulse* mutable_pulse(int index);
  ::eicio::TrackerPulse* add_pulse();
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerPulse >*
      mutable_pulse();
  const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerPulse >&
      pulse() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerPulseCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerPulse > pulse_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitPlane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerHitPlane) */ {
 public:
  TrackerHitPlane();
  virtual ~TrackerHitPlane();

  TrackerHitPlane(const TrackerHitPlane& from);

  inline TrackerHitPlane& operator=(const TrackerHitPlane& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitPlane& default_instance();

  static inline const TrackerHitPlane* internal_default_instance() {
    return reinterpret_cast<const TrackerHitPlane*>(
               &_TrackerHitPlane_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(TrackerHitPlane* other);

  // implements Message ----------------------------------------------

  inline TrackerHitPlane* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitPlane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitPlane& from);
  void MergeFrom(const TrackerHitPlane& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitPlane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 4;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // repeated float U = 5;
  int u_size() const;
  void clear_u();
  static const int kUFieldNumber = 5;
  float u(int index) const;
  void set_u(int index, float value);
  void add_u(float value);
  const ::google::protobuf::RepeatedField< float >&
      u() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_u();

  // repeated float V = 6;
  int v_size() const;
  void clear_v();
  static const int kVFieldNumber = 6;
  float v(int index) const;
  void set_v(int index, float value);
  void add_v(float value);
  const ::google::protobuf::RepeatedField< float >&
      v() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_v();

  // repeated .eicio.Reference rawHits = 13;
  int rawhits_size() const;
  void clear_rawhits();
  static const int kRawHitsFieldNumber = 13;
  const ::eicio::Reference& rawhits(int index) const;
  ::eicio::Reference* mutable_rawhits(int index);
  ::eicio::Reference* add_rawhits();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_rawhits();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      rawhits() const;

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float dU = 7;
  void clear_du();
  static const int kDUFieldNumber = 7;
  float du() const;
  void set_du(float value);

  // float dV = 8;
  void clear_dv();
  static const int kDVFieldNumber = 8;
  float dv() const;
  void set_dv(float value);

  // float EDep = 9;
  void clear_edep();
  static const int kEDepFieldNumber = 9;
  float edep() const;
  void set_edep(float value);

  // float EDepErr = 10;
  void clear_edeperr();
  static const int kEDepErrFieldNumber = 10;
  float edeperr() const;
  void set_edeperr(float value);

  // float time = 11;
  void clear_time();
  static const int kTimeFieldNumber = 11;
  float time() const;
  void set_time(float value);

  // int32 quality = 12;
  void clear_quality();
  static const int kQualityFieldNumber = 12;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerHitPlane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > u_;
  mutable int _u_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > v_;
  mutable int _v_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > rawhits_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 type_;
  float du_;
  float dv_;
  float edep_;
  float edeperr_;
  float time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitPlaneCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerHitPlaneCollection) */ {
 public:
  TrackerHitPlaneCollection();
  virtual ~TrackerHitPlaneCollection();

  TrackerHitPlaneCollection(const TrackerHitPlaneCollection& from);

  inline TrackerHitPlaneCollection& operator=(const TrackerHitPlaneCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitPlaneCollection& default_instance();

  static inline const TrackerHitPlaneCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerHitPlaneCollection*>(
               &_TrackerHitPlaneCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(TrackerHitPlaneCollection* other);

  // implements Message ----------------------------------------------

  inline TrackerHitPlaneCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitPlaneCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitPlaneCollection& from);
  void MergeFrom(const TrackerHitPlaneCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitPlaneCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.TrackerHitPlane plane = 3;
  int plane_size() const;
  void clear_plane();
  static const int kPlaneFieldNumber = 3;
  const ::eicio::TrackerHitPlane& plane(int index) const;
  ::eicio::TrackerHitPlane* mutable_plane(int index);
  ::eicio::TrackerHitPlane* add_plane();
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitPlane >*
      mutable_plane();
  const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitPlane >&
      plane() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerHitPlaneCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitPlane > plane_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitZCylinder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerHitZCylinder) */ {
 public:
  TrackerHitZCylinder();
  virtual ~TrackerHitZCylinder();

  TrackerHitZCylinder(const TrackerHitZCylinder& from);

  inline TrackerHitZCylinder& operator=(const TrackerHitZCylinder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitZCylinder& default_instance();

  static inline const TrackerHitZCylinder* internal_default_instance() {
    return reinterpret_cast<const TrackerHitZCylinder*>(
               &_TrackerHitZCylinder_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(TrackerHitZCylinder* other);

  // implements Message ----------------------------------------------

  inline TrackerHitZCylinder* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitZCylinder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitZCylinder& from);
  void MergeFrom(const TrackerHitZCylinder& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitZCylinder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pos = 4;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  double pos(int index) const;
  void set_pos(int index, double value);
  void add_pos(double value);
  const ::google::protobuf::RepeatedField< double >&
      pos() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pos();

  // repeated float center = 5;
  int center_size() const;
  void clear_center();
  static const int kCenterFieldNumber = 5;
  float center(int index) const;
  void set_center(int index, float value);
  void add_center(float value);
  const ::google::protobuf::RepeatedField< float >&
      center() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_center();

  // repeated .eicio.Reference rawHits = 12;
  int rawhits_size() const;
  void clear_rawhits();
  static const int kRawHitsFieldNumber = 12;
  const ::eicio::Reference& rawhits(int index) const;
  ::eicio::Reference* mutable_rawhits(int index);
  ::eicio::Reference* add_rawhits();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_rawhits();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      rawhits() const;

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float dRPhi = 6;
  void clear_drphi();
  static const int kDRPhiFieldNumber = 6;
  float drphi() const;
  void set_drphi(float value);

  // float dZ = 7;
  void clear_dz();
  static const int kDZFieldNumber = 7;
  float dz() const;
  void set_dz(float value);

  // float EDep = 8;
  void clear_edep();
  static const int kEDepFieldNumber = 8;
  float edep() const;
  void set_edep(float value);

  // float EDepErr = 9;
  void clear_edeperr();
  static const int kEDepErrFieldNumber = 9;
  float edeperr() const;
  void set_edeperr(float value);

  // float time = 10;
  void clear_time();
  static const int kTimeFieldNumber = 10;
  float time() const;
  void set_time(float value);

  // int32 quality = 11;
  void clear_quality();
  static const int kQualityFieldNumber = 11;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerHitZCylinder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > center_;
  mutable int _center_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > rawhits_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 type_;
  float drphi_;
  float dz_;
  float edep_;
  float edeperr_;
  float time_;
  ::google::protobuf::int32 quality_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackerHitZCylinderCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackerHitZCylinderCollection) */ {
 public:
  TrackerHitZCylinderCollection();
  virtual ~TrackerHitZCylinderCollection();

  TrackerHitZCylinderCollection(const TrackerHitZCylinderCollection& from);

  inline TrackerHitZCylinderCollection& operator=(const TrackerHitZCylinderCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerHitZCylinderCollection& default_instance();

  static inline const TrackerHitZCylinderCollection* internal_default_instance() {
    return reinterpret_cast<const TrackerHitZCylinderCollection*>(
               &_TrackerHitZCylinderCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(TrackerHitZCylinderCollection* other);

  // implements Message ----------------------------------------------

  inline TrackerHitZCylinderCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerHitZCylinderCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerHitZCylinderCollection& from);
  void MergeFrom(const TrackerHitZCylinderCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerHitZCylinderCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.TrackerHitZCylinder cyl = 3;
  int cyl_size() const;
  void clear_cyl();
  static const int kCylFieldNumber = 3;
  const ::eicio::TrackerHitZCylinder& cyl(int index) const;
  ::eicio::TrackerHitZCylinder* mutable_cyl(int index);
  ::eicio::TrackerHitZCylinder* add_cyl();
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitZCylinder >*
      mutable_cyl();
  const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitZCylinder >&
      cyl() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackerHitZCylinderCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitZCylinder > cyl_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Track_TrackState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.Track.TrackState) */ {
 public:
  Track_TrackState();
  virtual ~Track_TrackState();

  Track_TrackState(const Track_TrackState& from);

  inline Track_TrackState& operator=(const Track_TrackState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track_TrackState& default_instance();

  static inline const Track_TrackState* internal_default_instance() {
    return reinterpret_cast<const Track_TrackState*>(
               &_Track_TrackState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Track_TrackState* other);

  // implements Message ----------------------------------------------

  inline Track_TrackState* New() const PROTOBUF_FINAL { return New(NULL); }

  Track_TrackState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Track_TrackState& from);
  void MergeFrom(const Track_TrackState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Track_TrackState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float cov = 7;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 7;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // repeated float ref = 8;
  int ref_size() const;
  void clear_ref();
  static const int kRefFieldNumber = 8;
  float ref(int index) const;
  void set_ref(int index, float value);
  void add_ref(float value);
  const ::google::protobuf::RepeatedField< float >&
      ref() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ref();

  // int32 loc = 1;
  void clear_loc();
  static const int kLocFieldNumber = 1;
  ::google::protobuf::int32 loc() const;
  void set_loc(::google::protobuf::int32 value);

  // float d0 = 2;
  void clear_d0();
  static const int kD0FieldNumber = 2;
  float d0() const;
  void set_d0(float value);

  // float phi = 3;
  void clear_phi();
  static const int kPhiFieldNumber = 3;
  float phi() const;
  void set_phi(float value);

  // float omega = 4;
  void clear_omega();
  static const int kOmegaFieldNumber = 4;
  float omega() const;
  void set_omega(float value);

  // float z0 = 5;
  void clear_z0();
  static const int kZ0FieldNumber = 5;
  float z0() const;
  void set_z0(float value);

  // float tanL = 6;
  void clear_tanl();
  static const int kTanLFieldNumber = 6;
  float tanl() const;
  void set_tanl(float value);

  // @@protoc_insertion_point(class_scope:eicio.Track.TrackState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ref_;
  mutable int _ref_cached_byte_size_;
  ::google::protobuf::int32 loc_;
  float d0_;
  float phi_;
  float omega_;
  float z0_;
  float tanl_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Track : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();

  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(Track* other);

  // implements Message ----------------------------------------------

  inline Track* New() const PROTOBUF_FINAL { return New(NULL); }

  Track* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Track* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Track_TrackState TrackState;

  // accessors -------------------------------------------------------

  // repeated int32 subDetHits = 7;
  int subdethits_size() const;
  void clear_subdethits();
  static const int kSubDetHitsFieldNumber = 7;
  ::google::protobuf::int32 subdethits(int index) const;
  void set_subdethits(int index, ::google::protobuf::int32 value);
  void add_subdethits(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      subdethits() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_subdethits();

  // repeated .eicio.Track.TrackState states = 8;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 8;
  const ::eicio::Track_TrackState& states(int index) const;
  ::eicio::Track_TrackState* mutable_states(int index);
  ::eicio::Track_TrackState* add_states();
  ::google::protobuf::RepeatedPtrField< ::eicio::Track_TrackState >*
      mutable_states();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Track_TrackState >&
      states() const;

  // repeated .eicio.Reference hits = 9;
  int hits_size() const;
  void clear_hits();
  static const int kHitsFieldNumber = 9;
  const ::eicio::Reference& hits(int index) const;
  ::eicio::Reference* mutable_hits(int index);
  ::eicio::Reference* add_hits();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_hits();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      hits() const;

  // repeated .eicio.Reference trackIDs = 10;
  int trackids_size() const;
  void clear_trackids();
  static const int kTrackIDsFieldNumber = 10;
  const ::eicio::Reference& trackids(int index) const;
  ::eicio::Reference* mutable_trackids(int index);
  ::eicio::Reference* add_trackids();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_trackids();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      trackids() const;

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float chi2 = 2;
  void clear_chi2();
  static const int kChi2FieldNumber = 2;
  float chi2() const;
  void set_chi2(float value);

  // int32 NDF = 3;
  void clear_ndf();
  static const int kNDFFieldNumber = 3;
  ::google::protobuf::int32 ndf() const;
  void set_ndf(::google::protobuf::int32 value);

  // float dEdx = 4;
  void clear_dedx();
  static const int kDEdxFieldNumber = 4;
  float dedx() const;
  void set_dedx(float value);

  // float dEdxErr = 5;
  void clear_dedxerr();
  static const int kDEdxErrFieldNumber = 5;
  float dedxerr() const;
  void set_dedxerr(float value);

  // float radius = 6;
  void clear_radius();
  static const int kRadiusFieldNumber = 6;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:eicio.Track)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > subdethits_;
  mutable int _subdethits_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Track_TrackState > states_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > hits_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > trackids_;
  ::google::protobuf::int32 type_;
  float chi2_;
  ::google::protobuf::int32 ndf_;
  float dedx_;
  float dedxerr_;
  float radius_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.TrackCollection) */ {
 public:
  TrackCollection();
  virtual ~TrackCollection();

  TrackCollection(const TrackCollection& from);

  inline TrackCollection& operator=(const TrackCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackCollection& default_instance();

  static inline const TrackCollection* internal_default_instance() {
    return reinterpret_cast<const TrackCollection*>(
               &_TrackCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(TrackCollection* other);

  // implements Message ----------------------------------------------

  inline TrackCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackCollection& from);
  void MergeFrom(const TrackCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.Track track = 3;
  int track_size() const;
  void clear_track();
  static const int kTrackFieldNumber = 3;
  const ::eicio::Track& track(int index) const;
  ::eicio::Track* mutable_track(int index);
  ::eicio::Track* add_track();
  ::google::protobuf::RepeatedPtrField< ::eicio::Track >*
      mutable_track();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Track >&
      track() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.TrackCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Track > track_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHit_Contrib : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.SimCalorimeterHit.Contrib) */ {
 public:
  SimCalorimeterHit_Contrib();
  virtual ~SimCalorimeterHit_Contrib();

  SimCalorimeterHit_Contrib(const SimCalorimeterHit_Contrib& from);

  inline SimCalorimeterHit_Contrib& operator=(const SimCalorimeterHit_Contrib& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCalorimeterHit_Contrib& default_instance();

  static inline const SimCalorimeterHit_Contrib* internal_default_instance() {
    return reinterpret_cast<const SimCalorimeterHit_Contrib*>(
               &_SimCalorimeterHit_Contrib_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(SimCalorimeterHit_Contrib* other);

  // implements Message ----------------------------------------------

  inline SimCalorimeterHit_Contrib* New() const PROTOBUF_FINAL { return New(NULL); }

  SimCalorimeterHit_Contrib* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimCalorimeterHit_Contrib& from);
  void MergeFrom(const SimCalorimeterHit_Contrib& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimCalorimeterHit_Contrib* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float stepPos = 5;
  int steppos_size() const;
  void clear_steppos();
  static const int kStepPosFieldNumber = 5;
  float steppos(int index) const;
  void set_steppos(int index, float value);
  void add_steppos(float value);
  const ::google::protobuf::RepeatedField< float >&
      steppos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_steppos();

  // int32 MCParticle = 1;
  void clear_mcparticle();
  static const int kMCParticleFieldNumber = 1;
  ::google::protobuf::int32 mcparticle() const;
  void set_mcparticle(::google::protobuf::int32 value);

  // float energy = 2;
  void clear_energy();
  static const int kEnergyFieldNumber = 2;
  float energy() const;
  void set_energy(float value);

  // float time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  float time() const;
  void set_time(float value);

  // int32 PDG = 4;
  void clear_pdg();
  static const int kPDGFieldNumber = 4;
  ::google::protobuf::int32 pdg() const;
  void set_pdg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.SimCalorimeterHit.Contrib)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > steppos_;
  mutable int _steppos_cached_byte_size_;
  ::google::protobuf::int32 mcparticle_;
  float energy_;
  float time_;
  ::google::protobuf::int32 pdg_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.SimCalorimeterHit) */ {
 public:
  SimCalorimeterHit();
  virtual ~SimCalorimeterHit();

  SimCalorimeterHit(const SimCalorimeterHit& from);

  inline SimCalorimeterHit& operator=(const SimCalorimeterHit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCalorimeterHit& default_instance();

  static inline const SimCalorimeterHit* internal_default_instance() {
    return reinterpret_cast<const SimCalorimeterHit*>(
               &_SimCalorimeterHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(SimCalorimeterHit* other);

  // implements Message ----------------------------------------------

  inline SimCalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

  SimCalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimCalorimeterHit& from);
  void MergeFrom(const SimCalorimeterHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimCalorimeterHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SimCalorimeterHit_Contrib Contrib;

  // accessors -------------------------------------------------------

  // repeated float pos = 5;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // repeated .eicio.SimCalorimeterHit.Contrib contributions = 6;
  int contributions_size() const;
  void clear_contributions();
  static const int kContributionsFieldNumber = 6;
  const ::eicio::SimCalorimeterHit_Contrib& contributions(int index) const;
  ::eicio::SimCalorimeterHit_Contrib* mutable_contributions(int index);
  ::eicio::SimCalorimeterHit_Contrib* add_contributions();
  ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit_Contrib >*
      mutable_contributions();
  const ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit_Contrib >&
      contributions() const;

  // .eicio.Params params = 1;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 1;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 cellID0 = 2;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 2;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 3;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 3;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float energy = 4;
  void clear_energy();
  static const int kEnergyFieldNumber = 4;
  float energy() const;
  void set_energy(float value);

  // @@protoc_insertion_point(class_scope:eicio.SimCalorimeterHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit_Contrib > contributions_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float energy_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimCalorimeterHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.SimCalorimeterHitCollection) */ {
 public:
  SimCalorimeterHitCollection();
  virtual ~SimCalorimeterHitCollection();

  SimCalorimeterHitCollection(const SimCalorimeterHitCollection& from);

  inline SimCalorimeterHitCollection& operator=(const SimCalorimeterHitCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimCalorimeterHitCollection& default_instance();

  static inline const SimCalorimeterHitCollection* internal_default_instance() {
    return reinterpret_cast<const SimCalorimeterHitCollection*>(
               &_SimCalorimeterHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(SimCalorimeterHitCollection* other);

  // implements Message ----------------------------------------------

  inline SimCalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  SimCalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SimCalorimeterHitCollection& from);
  void MergeFrom(const SimCalorimeterHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SimCalorimeterHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.SimCalorimeterHit hit = 3;
  int hit_size() const;
  void clear_hit();
  static const int kHitFieldNumber = 3;
  const ::eicio::SimCalorimeterHit& hit(int index) const;
  ::eicio::SimCalorimeterHit* mutable_hit(int index);
  ::eicio::SimCalorimeterHit* add_hit();
  ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit >*
      mutable_hit();
  const ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit >&
      hit() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.SimCalorimeterHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit > hit_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawCalorimeterHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.RawCalorimeterHit) */ {
 public:
  RawCalorimeterHit();
  virtual ~RawCalorimeterHit();

  RawCalorimeterHit(const RawCalorimeterHit& from);

  inline RawCalorimeterHit& operator=(const RawCalorimeterHit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawCalorimeterHit& default_instance();

  static inline const RawCalorimeterHit* internal_default_instance() {
    return reinterpret_cast<const RawCalorimeterHit*>(
               &_RawCalorimeterHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(RawCalorimeterHit* other);

  // implements Message ----------------------------------------------

  inline RawCalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

  RawCalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RawCalorimeterHit& from);
  void MergeFrom(const RawCalorimeterHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RawCalorimeterHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // int32 amplitude = 4;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 4;
  ::google::protobuf::int32 amplitude() const;
  void set_amplitude(::google::protobuf::int32 value);

  // int32 timeStamp = 5;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.RawCalorimeterHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  ::google::protobuf::int32 amplitude_;
  ::google::protobuf::int32 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawCalorimeterHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.RawCalorimeterHitCollection) */ {
 public:
  RawCalorimeterHitCollection();
  virtual ~RawCalorimeterHitCollection();

  RawCalorimeterHitCollection(const RawCalorimeterHitCollection& from);

  inline RawCalorimeterHitCollection& operator=(const RawCalorimeterHitCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawCalorimeterHitCollection& default_instance();

  static inline const RawCalorimeterHitCollection* internal_default_instance() {
    return reinterpret_cast<const RawCalorimeterHitCollection*>(
               &_RawCalorimeterHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(RawCalorimeterHitCollection* other);

  // implements Message ----------------------------------------------

  inline RawCalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  RawCalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RawCalorimeterHitCollection& from);
  void MergeFrom(const RawCalorimeterHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RawCalorimeterHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.RawCalorimeterHit hit = 3;
  int hit_size() const;
  void clear_hit();
  static const int kHitFieldNumber = 3;
  const ::eicio::RawCalorimeterHit& hit(int index) const;
  ::eicio::RawCalorimeterHit* mutable_hit(int index);
  ::eicio::RawCalorimeterHit* add_hit();
  ::google::protobuf::RepeatedPtrField< ::eicio::RawCalorimeterHit >*
      mutable_hit();
  const ::google::protobuf::RepeatedPtrField< ::eicio::RawCalorimeterHit >&
      hit() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.RawCalorimeterHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::RawCalorimeterHit > hit_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalorimeterHit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.CalorimeterHit) */ {
 public:
  CalorimeterHit();
  virtual ~CalorimeterHit();

  CalorimeterHit(const CalorimeterHit& from);

  inline CalorimeterHit& operator=(const CalorimeterHit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalorimeterHit& default_instance();

  static inline const CalorimeterHit* internal_default_instance() {
    return reinterpret_cast<const CalorimeterHit*>(
               &_CalorimeterHit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(CalorimeterHit* other);

  // implements Message ----------------------------------------------

  inline CalorimeterHit* New() const PROTOBUF_FINAL { return New(NULL); }

  CalorimeterHit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CalorimeterHit& from);
  void MergeFrom(const CalorimeterHit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CalorimeterHit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pos = 6;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 6;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // .eicio.Reference raw = 8;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 8;
  const ::eicio::Reference& raw() const;
  ::eicio::Reference* mutable_raw();
  ::eicio::Reference* release_raw();
  void set_allocated_raw(::eicio::Reference* raw);

  // int32 cellID0 = 1;
  void clear_cellid0();
  static const int kCellID0FieldNumber = 1;
  ::google::protobuf::int32 cellid0() const;
  void set_cellid0(::google::protobuf::int32 value);

  // int32 cellID1 = 2;
  void clear_cellid1();
  static const int kCellID1FieldNumber = 2;
  ::google::protobuf::int32 cellid1() const;
  void set_cellid1(::google::protobuf::int32 value);

  // float energy = 3;
  void clear_energy();
  static const int kEnergyFieldNumber = 3;
  float energy() const;
  void set_energy(float value);

  // float energyErr = 4;
  void clear_energyerr();
  static const int kEnergyErrFieldNumber = 4;
  float energyerr() const;
  void set_energyerr(float value);

  // float time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  float time() const;
  void set_time(float value);

  // int32 type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.CalorimeterHit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::eicio::Reference* raw_;
  ::google::protobuf::int32 cellid0_;
  ::google::protobuf::int32 cellid1_;
  float energy_;
  float energyerr_;
  float time_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalorimeterHitCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.CalorimeterHitCollection) */ {
 public:
  CalorimeterHitCollection();
  virtual ~CalorimeterHitCollection();

  CalorimeterHitCollection(const CalorimeterHitCollection& from);

  inline CalorimeterHitCollection& operator=(const CalorimeterHitCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalorimeterHitCollection& default_instance();

  static inline const CalorimeterHitCollection* internal_default_instance() {
    return reinterpret_cast<const CalorimeterHitCollection*>(
               &_CalorimeterHitCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(CalorimeterHitCollection* other);

  // implements Message ----------------------------------------------

  inline CalorimeterHitCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  CalorimeterHitCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CalorimeterHitCollection& from);
  void MergeFrom(const CalorimeterHitCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CalorimeterHitCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.CalorimeterHit hit = 3;
  int hit_size() const;
  void clear_hit();
  static const int kHitFieldNumber = 3;
  const ::eicio::CalorimeterHit& hit(int index) const;
  ::eicio::CalorimeterHit* mutable_hit(int index);
  ::eicio::CalorimeterHit* add_hit();
  ::google::protobuf::RepeatedPtrField< ::eicio::CalorimeterHit >*
      mutable_hit();
  const ::google::protobuf::RepeatedPtrField< ::eicio::CalorimeterHit >&
      hit() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.CalorimeterHitCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::CalorimeterHit > hit_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(Cluster* other);

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pos = 4;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 4;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // repeated float posErr = 5;
  int poserr_size() const;
  void clear_poserr();
  static const int kPosErrFieldNumber = 5;
  float poserr(int index) const;
  void set_poserr(int index, float value);
  void add_poserr(float value);
  const ::google::protobuf::RepeatedField< float >&
      poserr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_poserr();

  // repeated float dirErr = 8;
  int direrr_size() const;
  void clear_direrr();
  static const int kDirErrFieldNumber = 8;
  float direrr(int index) const;
  void set_direrr(int index, float value);
  void add_direrr(float value);
  const ::google::protobuf::RepeatedField< float >&
      direrr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_direrr();

  // repeated float shape = 9;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 9;
  float shape(int index) const;
  void set_shape(int index, float value);
  void add_shape(float value);
  const ::google::protobuf::RepeatedField< float >&
      shape() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_shape();

  // repeated .eicio.ParticleID PIDs = 10;
  int pids_size() const;
  void clear_pids();
  static const int kPIDsFieldNumber = 10;
  const ::eicio::ParticleID& pids(int index) const;
  ::eicio::ParticleID* mutable_pids(int index);
  ::eicio::ParticleID* add_pids();
  ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >*
      mutable_pids();
  const ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >&
      pids() const;

  // repeated .eicio.Reference hits = 11;
  int hits_size() const;
  void clear_hits();
  static const int kHitsFieldNumber = 11;
  const ::eicio::Reference& hits(int index) const;
  ::eicio::Reference* mutable_hits(int index);
  ::eicio::Reference* add_hits();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_hits();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      hits() const;

  // repeated float weights = 12;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 12;
  float weights(int index) const;
  void set_weights(int index, float value);
  void add_weights(float value);
  const ::google::protobuf::RepeatedField< float >&
      weights() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weights();

  // repeated float subDetEnes = 13;
  int subdetenes_size() const;
  void clear_subdetenes();
  static const int kSubDetEnesFieldNumber = 13;
  float subdetenes(int index) const;
  void set_subdetenes(int index, float value);
  void add_subdetenes(float value);
  const ::google::protobuf::RepeatedField< float >&
      subdetenes() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_subdetenes();

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float energy = 2;
  void clear_energy();
  static const int kEnergyFieldNumber = 2;
  float energy() const;
  void set_energy(float value);

  // float energyErr = 3;
  void clear_energyerr();
  static const int kEnergyErrFieldNumber = 3;
  float energyerr() const;
  void set_energyerr(float value);

  // float theta = 6;
  void clear_theta();
  static const int kThetaFieldNumber = 6;
  float theta() const;
  void set_theta(float value);

  // float phi = 7;
  void clear_phi();
  static const int kPhiFieldNumber = 7;
  float phi() const;
  void set_phi(float value);

  // @@protoc_insertion_point(class_scope:eicio.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > poserr_;
  mutable int _poserr_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > direrr_;
  mutable int _direrr_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID > pids_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > hits_;
  ::google::protobuf::RepeatedField< float > weights_;
  mutable int _weights_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > subdetenes_;
  mutable int _subdetenes_cached_byte_size_;
  ::google::protobuf::int32 type_;
  float energy_;
  float energyerr_;
  float theta_;
  float phi_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.ClusterCollection) */ {
 public:
  ClusterCollection();
  virtual ~ClusterCollection();

  ClusterCollection(const ClusterCollection& from);

  inline ClusterCollection& operator=(const ClusterCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterCollection& default_instance();

  static inline const ClusterCollection* internal_default_instance() {
    return reinterpret_cast<const ClusterCollection*>(
               &_ClusterCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(ClusterCollection* other);

  // implements Message ----------------------------------------------

  inline ClusterCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterCollection& from);
  void MergeFrom(const ClusterCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.Cluster cluster = 3;
  int cluster_size() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 3;
  const ::eicio::Cluster& cluster(int index) const;
  ::eicio::Cluster* mutable_cluster(int index);
  ::eicio::Cluster* add_cluster();
  ::google::protobuf::RepeatedPtrField< ::eicio::Cluster >*
      mutable_cluster();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Cluster >&
      cluster() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.ClusterCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Cluster > cluster_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecParticle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.RecParticle) */ {
 public:
  RecParticle();
  virtual ~RecParticle();

  RecParticle(const RecParticle& from);

  inline RecParticle& operator=(const RecParticle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecParticle& default_instance();

  static inline const RecParticle* internal_default_instance() {
    return reinterpret_cast<const RecParticle*>(
               &_RecParticle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(RecParticle* other);

  // implements Message ----------------------------------------------

  inline RecParticle* New() const PROTOBUF_FINAL { return New(NULL); }

  RecParticle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecParticle& from);
  void MergeFrom(const RecParticle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecParticle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float p = 2;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 2;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::google::protobuf::RepeatedField< float >&
      p() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_p();

  // repeated float cov = 4;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 4;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // repeated float ref = 7;
  int ref_size() const;
  void clear_ref();
  static const int kRefFieldNumber = 7;
  float ref(int index) const;
  void set_ref(int index, float value);
  void add_ref(float value);
  const ::google::protobuf::RepeatedField< float >&
      ref() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ref();

  // repeated .eicio.ParticleID PIDs = 8;
  int pids_size() const;
  void clear_pids();
  static const int kPIDsFieldNumber = 8;
  const ::eicio::ParticleID& pids(int index) const;
  ::eicio::ParticleID* mutable_pids(int index);
  ::eicio::ParticleID* add_pids();
  ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >*
      mutable_pids();
  const ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >&
      pids() const;

  // repeated .eicio.Reference recs = 11;
  int recs_size() const;
  void clear_recs();
  static const int kRecsFieldNumber = 11;
  const ::eicio::Reference& recs(int index) const;
  ::eicio::Reference* mutable_recs(int index);
  ::eicio::Reference* add_recs();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_recs();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      recs() const;

  // repeated .eicio.Reference tracks = 12;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 12;
  const ::eicio::Reference& tracks(int index) const;
  ::eicio::Reference* mutable_tracks(int index);
  ::eicio::Reference* add_tracks();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_tracks();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      tracks() const;

  // repeated .eicio.Reference clusters = 13;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 13;
  const ::eicio::Reference& clusters(int index) const;
  ::eicio::Reference* mutable_clusters(int index);
  ::eicio::Reference* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
      clusters() const;

  // .eicio.Reference startVtx = 14;
  bool has_startvtx() const;
  void clear_startvtx();
  static const int kStartVtxFieldNumber = 14;
  const ::eicio::Reference& startvtx() const;
  ::eicio::Reference* mutable_startvtx();
  ::eicio::Reference* release_startvtx();
  void set_allocated_startvtx(::eicio::Reference* startvtx);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float energy = 3;
  void clear_energy();
  static const int kEnergyFieldNumber = 3;
  float energy() const;
  void set_energy(float value);

  // float mass = 5;
  void clear_mass();
  static const int kMassFieldNumber = 5;
  float mass() const;
  void set_mass(float value);

  // float charge = 6;
  void clear_charge();
  static const int kChargeFieldNumber = 6;
  float charge() const;
  void set_charge(float value);

  // int32 PIDUsed = 9;
  void clear_pidused();
  static const int kPIDUsedFieldNumber = 9;
  ::google::protobuf::int32 pidused() const;
  void set_pidused(::google::protobuf::int32 value);

  // float goodnessOfPID = 10;
  void clear_goodnessofpid();
  static const int kGoodnessOfPIDFieldNumber = 10;
  float goodnessofpid() const;
  void set_goodnessofpid(float value);

  // @@protoc_insertion_point(class_scope:eicio.RecParticle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > p_;
  mutable int _p_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ref_;
  mutable int _ref_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID > pids_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > recs_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > tracks_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Reference > clusters_;
  ::eicio::Reference* startvtx_;
  ::google::protobuf::int32 type_;
  float energy_;
  float mass_;
  float charge_;
  ::google::protobuf::int32 pidused_;
  float goodnessofpid_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecParticleCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.RecParticleCollection) */ {
 public:
  RecParticleCollection();
  virtual ~RecParticleCollection();

  RecParticleCollection(const RecParticleCollection& from);

  inline RecParticleCollection& operator=(const RecParticleCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecParticleCollection& default_instance();

  static inline const RecParticleCollection* internal_default_instance() {
    return reinterpret_cast<const RecParticleCollection*>(
               &_RecParticleCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(RecParticleCollection* other);

  // implements Message ----------------------------------------------

  inline RecParticleCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  RecParticleCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecParticleCollection& from);
  void MergeFrom(const RecParticleCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecParticleCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.RecParticle particle = 3;
  int particle_size() const;
  void clear_particle();
  static const int kParticleFieldNumber = 3;
  const ::eicio::RecParticle& particle(int index) const;
  ::eicio::RecParticle* mutable_particle(int index);
  ::eicio::RecParticle* add_particle();
  ::google::protobuf::RepeatedPtrField< ::eicio::RecParticle >*
      mutable_particle();
  const ::google::protobuf::RepeatedPtrField< ::eicio::RecParticle >&
      particle() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.RecParticleCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::RecParticle > particle_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vertex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex& default_instance();

  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(Vertex* other);

  // implements Message ----------------------------------------------

  inline Vertex* New() const PROTOBUF_FINAL { return New(NULL); }

  Vertex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float pos = 5;
  int pos_size() const;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  float pos(int index) const;
  void set_pos(int index, float value);
  void add_pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pos();

  // repeated float cov = 6;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 6;
  float cov(int index) const;
  void set_cov(int index, float value);
  void add_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov();

  // repeated float params = 7;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 7;
  float params(int index) const;
  void set_params(int index, float value);
  void add_params(float value);
  const ::google::protobuf::RepeatedField< float >&
      params() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_params();

  // .eicio.Reference recPart = 8;
  bool has_recpart() const;
  void clear_recpart();
  static const int kRecPartFieldNumber = 8;
  const ::eicio::Reference& recpart() const;
  ::eicio::Reference* mutable_recpart();
  ::eicio::Reference* release_recpart();
  void set_allocated_recpart(::eicio::Reference* recpart);

  // int32 primary = 1;
  void clear_primary();
  static const int kPrimaryFieldNumber = 1;
  ::google::protobuf::int32 primary() const;
  void set_primary(::google::protobuf::int32 value);

  // int32 algType = 2;
  void clear_algtype();
  static const int kAlgTypeFieldNumber = 2;
  ::google::protobuf::int32 algtype() const;
  void set_algtype(::google::protobuf::int32 value);

  // float chi2 = 3;
  void clear_chi2();
  static const int kChi2FieldNumber = 3;
  float chi2() const;
  void set_chi2(float value);

  // float prob = 4;
  void clear_prob();
  static const int kProbFieldNumber = 4;
  float prob() const;
  void set_prob(float value);

  // @@protoc_insertion_point(class_scope:eicio.Vertex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > pos_;
  mutable int _pos_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > cov_;
  mutable int _cov_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > params_;
  mutable int _params_cached_byte_size_;
  ::eicio::Reference* recpart_;
  ::google::protobuf::int32 primary_;
  ::google::protobuf::int32 algtype_;
  float chi2_;
  float prob_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VertexCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.VertexCollection) */ {
 public:
  VertexCollection();
  virtual ~VertexCollection();

  VertexCollection(const VertexCollection& from);

  inline VertexCollection& operator=(const VertexCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VertexCollection& default_instance();

  static inline const VertexCollection* internal_default_instance() {
    return reinterpret_cast<const VertexCollection*>(
               &_VertexCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(VertexCollection* other);

  // implements Message ----------------------------------------------

  inline VertexCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  VertexCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VertexCollection& from);
  void MergeFrom(const VertexCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VertexCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.Vertex vertex = 3;
  int vertex_size() const;
  void clear_vertex();
  static const int kVertexFieldNumber = 3;
  const ::eicio::Vertex& vertex(int index) const;
  ::eicio::Vertex* mutable_vertex(int index);
  ::eicio::Vertex* add_vertex();
  ::google::protobuf::RepeatedPtrField< ::eicio::Vertex >*
      mutable_vertex();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Vertex >&
      vertex() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.VertexCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Vertex > vertex_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Relation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.Relation) */ {
 public:
  Relation();
  virtual ~Relation();

  Relation(const Relation& from);

  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation& default_instance();

  static inline const Relation* internal_default_instance() {
    return reinterpret_cast<const Relation*>(
               &_Relation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(Relation* other);

  // implements Message ----------------------------------------------

  inline Relation* New() const PROTOBUF_FINAL { return New(NULL); }

  Relation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Relation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .eicio.Reference from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::eicio::Reference& from() const;
  ::eicio::Reference* mutable_from();
  ::eicio::Reference* release_from();
  void set_allocated_from(::eicio::Reference* from);

  // .eicio.Reference to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::eicio::Reference& to() const;
  ::eicio::Reference* mutable_to();
  ::eicio::Reference* release_to();
  void set_allocated_to(::eicio::Reference* to);

  // float weight = 3;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:eicio.Relation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::eicio::Reference* from_;
  ::eicio::Reference* to_;
  float weight_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelationCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:eicio.RelationCollection) */ {
 public:
  RelationCollection();
  virtual ~RelationCollection();

  RelationCollection(const RelationCollection& from);

  inline RelationCollection& operator=(const RelationCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationCollection& default_instance();

  static inline const RelationCollection* internal_default_instance() {
    return reinterpret_cast<const RelationCollection*>(
               &_RelationCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(RelationCollection* other);

  // implements Message ----------------------------------------------

  inline RelationCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  RelationCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelationCollection& from);
  void MergeFrom(const RelationCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelationCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eicio.Relation relation = 3;
  int relation_size() const;
  void clear_relation();
  static const int kRelationFieldNumber = 3;
  const ::eicio::Relation& relation(int index) const;
  ::eicio::Relation* mutable_relation(int index);
  ::eicio::Relation* add_relation();
  ::google::protobuf::RepeatedPtrField< ::eicio::Relation >*
      mutable_relation();
  const ::google::protobuf::RepeatedPtrField< ::eicio::Relation >&
      relation() const;

  // .eicio.Params params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::eicio::Params& params() const;
  ::eicio::Params* mutable_params();
  ::eicio::Params* release_params();
  void set_allocated_params(::eicio::Params* params);

  // int32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:eicio.RelationCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eicio::Relation > relation_;
  ::eicio::Params* params_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_eicio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EventHeader_CollectionHeader

// .eicio.EventHeader.CollectionHeader.Type type = 1;
inline void EventHeader_CollectionHeader::clear_type() {
  type_ = 0;
}
inline ::eicio::EventHeader_CollectionHeader_Type EventHeader_CollectionHeader::type() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.type)
  return static_cast< ::eicio::EventHeader_CollectionHeader_Type >(type_);
}
inline void EventHeader_CollectionHeader::set_type(::eicio::EventHeader_CollectionHeader_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.type)
}

// string name = 2;
inline void EventHeader_CollectionHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader_CollectionHeader::name() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.name)
  return name_.GetNoArena();
}
inline void EventHeader_CollectionHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.name)
}
#if LANG_CXX11
inline void EventHeader_CollectionHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eicio.EventHeader.CollectionHeader.name)
}
#endif
inline void EventHeader_CollectionHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eicio.EventHeader.CollectionHeader.name)
}
inline void EventHeader_CollectionHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eicio.EventHeader.CollectionHeader.name)
}
inline ::std::string* EventHeader_CollectionHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.CollectionHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader_CollectionHeader::release_name() {
  // @@protoc_insertion_point(field_release:eicio.EventHeader.CollectionHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader_CollectionHeader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:eicio.EventHeader.CollectionHeader.name)
}

// uint32 payloadSize = 3;
inline void EventHeader_CollectionHeader::clear_payloadsize() {
  payloadsize_ = 0u;
}
inline ::google::protobuf::uint32 EventHeader_CollectionHeader::payloadsize() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.CollectionHeader.payloadSize)
  return payloadsize_;
}
inline void EventHeader_CollectionHeader::set_payloadsize(::google::protobuf::uint32 value) {
  
  payloadsize_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.CollectionHeader.payloadSize)
}

// -------------------------------------------------------------------

// EventHeader

// uint32 version = 1;
inline void EventHeader::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 EventHeader::version() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.version)
  return version_;
}
inline void EventHeader::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.version)
}

// uint64 runNumber = 2;
inline void EventHeader::clear_runnumber() {
  runnumber_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventHeader::runnumber() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.runNumber)
  return runnumber_;
}
inline void EventHeader::set_runnumber(::google::protobuf::uint64 value) {
  
  runnumber_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.runNumber)
}

// uint64 eventNumber = 3;
inline void EventHeader::clear_eventnumber() {
  eventnumber_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventHeader::eventnumber() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.eventNumber)
  return eventnumber_;
}
inline void EventHeader::set_eventnumber(::google::protobuf::uint64 value) {
  
  eventnumber_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.eventNumber)
}

// uint64 timeStamp = 4;
inline void EventHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 EventHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.timeStamp)
  return timestamp_;
}
inline void EventHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:eicio.EventHeader.timeStamp)
}

// string detector = 5;
inline void EventHeader::clear_detector() {
  detector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader::detector() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.detector)
  return detector_.GetNoArena();
}
inline void EventHeader::set_detector(const ::std::string& value) {
  
  detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eicio.EventHeader.detector)
}
#if LANG_CXX11
inline void EventHeader::set_detector(::std::string&& value) {
  
  detector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eicio.EventHeader.detector)
}
#endif
inline void EventHeader::set_detector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eicio.EventHeader.detector)
}
inline void EventHeader::set_detector(const char* value, size_t size) {
  
  detector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eicio.EventHeader.detector)
}
inline ::std::string* EventHeader::mutable_detector() {
  
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.detector)
  return detector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader::release_detector() {
  // @@protoc_insertion_point(field_release:eicio.EventHeader.detector)
  
  return detector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader::set_allocated_detector(::std::string* detector) {
  if (detector != NULL) {
    
  } else {
    
  }
  detector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector);
  // @@protoc_insertion_point(field_set_allocated:eicio.EventHeader.detector)
}

// .eicio.Params params = 6;
inline bool EventHeader::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void EventHeader::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& EventHeader::params() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* EventHeader::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.params)
  return params_;
}
inline ::eicio::Params* EventHeader::release_params() {
  // @@protoc_insertion_point(field_release:eicio.EventHeader.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void EventHeader::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.EventHeader.params)
}

// repeated .eicio.EventHeader.CollectionHeader collection = 7;
inline int EventHeader::collection_size() const {
  return collection_.size();
}
inline void EventHeader::clear_collection() {
  collection_.Clear();
}
inline const ::eicio::EventHeader_CollectionHeader& EventHeader::collection(int index) const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.collection)
  return collection_.Get(index);
}
inline ::eicio::EventHeader_CollectionHeader* EventHeader::mutable_collection(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.collection)
  return collection_.Mutable(index);
}
inline ::eicio::EventHeader_CollectionHeader* EventHeader::add_collection() {
  // @@protoc_insertion_point(field_add:eicio.EventHeader.collection)
  return collection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >*
EventHeader::mutable_collection() {
  // @@protoc_insertion_point(field_mutable_list:eicio.EventHeader.collection)
  return &collection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::EventHeader_CollectionHeader >&
EventHeader::collection() const {
  // @@protoc_insertion_point(field_list:eicio.EventHeader.collection)
  return collection_;
}

// string description = 16;
inline void EventHeader::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventHeader::description() const {
  // @@protoc_insertion_point(field_get:eicio.EventHeader.description)
  return description_.GetNoArena();
}
inline void EventHeader::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eicio.EventHeader.description)
}
#if LANG_CXX11
inline void EventHeader::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eicio.EventHeader.description)
}
#endif
inline void EventHeader::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eicio.EventHeader.description)
}
inline void EventHeader::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eicio.EventHeader.description)
}
inline ::std::string* EventHeader::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:eicio.EventHeader.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventHeader::release_description() {
  // @@protoc_insertion_point(field_release:eicio.EventHeader.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventHeader::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:eicio.EventHeader.description)
}

// -------------------------------------------------------------------

// IntParams

// repeated int32 array = 1;
inline int IntParams::array_size() const {
  return array_.size();
}
inline void IntParams::clear_array() {
  array_.Clear();
}
inline ::google::protobuf::int32 IntParams::array(int index) const {
  // @@protoc_insertion_point(field_get:eicio.IntParams.array)
  return array_.Get(index);
}
inline void IntParams::set_array(int index, ::google::protobuf::int32 value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.IntParams.array)
}
inline void IntParams::add_array(::google::protobuf::int32 value) {
  array_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.IntParams.array)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IntParams::array() const {
  // @@protoc_insertion_point(field_list:eicio.IntParams.array)
  return array_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IntParams::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:eicio.IntParams.array)
  return &array_;
}

// -------------------------------------------------------------------

// FloatParams

// repeated float array = 1;
inline int FloatParams::array_size() const {
  return array_.size();
}
inline void FloatParams::clear_array() {
  array_.Clear();
}
inline float FloatParams::array(int index) const {
  // @@protoc_insertion_point(field_get:eicio.FloatParams.array)
  return array_.Get(index);
}
inline void FloatParams::set_array(int index, float value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.FloatParams.array)
}
inline void FloatParams::add_array(float value) {
  array_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.FloatParams.array)
}
inline const ::google::protobuf::RepeatedField< float >&
FloatParams::array() const {
  // @@protoc_insertion_point(field_list:eicio.FloatParams.array)
  return array_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatParams::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:eicio.FloatParams.array)
  return &array_;
}

// -------------------------------------------------------------------

// StringParams

// repeated string array = 1;
inline int StringParams::array_size() const {
  return array_.size();
}
inline void StringParams::clear_array() {
  array_.Clear();
}
inline const ::std::string& StringParams::array(int index) const {
  // @@protoc_insertion_point(field_get:eicio.StringParams.array)
  return array_.Get(index);
}
inline ::std::string* StringParams::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.StringParams.array)
  return array_.Mutable(index);
}
inline void StringParams::set_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:eicio.StringParams.array)
  array_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StringParams::set_array(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:eicio.StringParams.array)
  array_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StringParams::set_array(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:eicio.StringParams.array)
}
inline void StringParams::set_array(int index, const char* value, size_t size) {
  array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:eicio.StringParams.array)
}
inline ::std::string* StringParams::add_array() {
  // @@protoc_insertion_point(field_add_mutable:eicio.StringParams.array)
  return array_.Add();
}
inline void StringParams::add_array(const ::std::string& value) {
  array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:eicio.StringParams.array)
}
#if LANG_CXX11
inline void StringParams::add_array(::std::string&& value) {
  array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:eicio.StringParams.array)
}
#endif
inline void StringParams::add_array(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:eicio.StringParams.array)
}
inline void StringParams::add_array(const char* value, size_t size) {
  array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:eicio.StringParams.array)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringParams::array() const {
  // @@protoc_insertion_point(field_list:eicio.StringParams.array)
  return array_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringParams::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:eicio.StringParams.array)
  return &array_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Params

// map<string, .eicio.IntParams> ints = 1;
inline int Params::ints_size() const {
  return ints_.size();
}
inline void Params::clear_ints() {
  ints_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::eicio::IntParams >&
Params::ints() const {
  // @@protoc_insertion_point(field_map:eicio.Params.ints)
  return ints_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::eicio::IntParams >*
Params::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_map:eicio.Params.ints)
  return ints_.MutableMap();
}

// map<string, .eicio.FloatParams> floats = 2;
inline int Params::floats_size() const {
  return floats_.size();
}
inline void Params::clear_floats() {
  floats_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::eicio::FloatParams >&
Params::floats() const {
  // @@protoc_insertion_point(field_map:eicio.Params.floats)
  return floats_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::eicio::FloatParams >*
Params::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_map:eicio.Params.floats)
  return floats_.MutableMap();
}

// map<string, .eicio.StringParams> strings = 3;
inline int Params::strings_size() const {
  return strings_.size();
}
inline void Params::clear_strings() {
  strings_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::eicio::StringParams >&
Params::strings() const {
  // @@protoc_insertion_point(field_map:eicio.Params.strings)
  return strings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::eicio::StringParams >*
Params::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_map:eicio.Params.strings)
  return strings_.MutableMap();
}

// -------------------------------------------------------------------

// Reference

// uint32 collID = 1;
inline void Reference::clear_collid() {
  collid_ = 0u;
}
inline ::google::protobuf::uint32 Reference::collid() const {
  // @@protoc_insertion_point(field_get:eicio.Reference.collID)
  return collid_;
}
inline void Reference::set_collid(::google::protobuf::uint32 value) {
  
  collid_ = value;
  // @@protoc_insertion_point(field_set:eicio.Reference.collID)
}

// uint32 entryID = 2;
inline void Reference::clear_entryid() {
  entryid_ = 0u;
}
inline ::google::protobuf::uint32 Reference::entryid() const {
  // @@protoc_insertion_point(field_get:eicio.Reference.entryID)
  return entryid_;
}
inline void Reference::set_entryid(::google::protobuf::uint32 value) {
  
  entryid_ = value;
  // @@protoc_insertion_point(field_set:eicio.Reference.entryID)
}

// -------------------------------------------------------------------

// ParticleID

// float likelihood = 1;
inline void ParticleID::clear_likelihood() {
  likelihood_ = 0;
}
inline float ParticleID::likelihood() const {
  // @@protoc_insertion_point(field_get:eicio.ParticleID.likelihood)
  return likelihood_;
}
inline void ParticleID::set_likelihood(float value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:eicio.ParticleID.likelihood)
}

// int32 type = 2;
inline void ParticleID::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ParticleID::type() const {
  // @@protoc_insertion_point(field_get:eicio.ParticleID.type)
  return type_;
}
inline void ParticleID::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.ParticleID.type)
}

// int32 PDG = 3;
inline void ParticleID::clear_pdg() {
  pdg_ = 0;
}
inline ::google::protobuf::int32 ParticleID::pdg() const {
  // @@protoc_insertion_point(field_get:eicio.ParticleID.PDG)
  return pdg_;
}
inline void ParticleID::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:eicio.ParticleID.PDG)
}

// int32 algType = 4;
inline void ParticleID::clear_algtype() {
  algtype_ = 0;
}
inline ::google::protobuf::int32 ParticleID::algtype() const {
  // @@protoc_insertion_point(field_get:eicio.ParticleID.algType)
  return algtype_;
}
inline void ParticleID::set_algtype(::google::protobuf::int32 value) {
  
  algtype_ = value;
  // @@protoc_insertion_point(field_set:eicio.ParticleID.algType)
}

// repeated float params = 5;
inline int ParticleID::params_size() const {
  return params_.size();
}
inline void ParticleID::clear_params() {
  params_.Clear();
}
inline float ParticleID::params(int index) const {
  // @@protoc_insertion_point(field_get:eicio.ParticleID.params)
  return params_.Get(index);
}
inline void ParticleID::set_params(int index, float value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.ParticleID.params)
}
inline void ParticleID::add_params(float value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.ParticleID.params)
}
inline const ::google::protobuf::RepeatedField< float >&
ParticleID::params() const {
  // @@protoc_insertion_point(field_list:eicio.ParticleID.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< float >*
ParticleID::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:eicio.ParticleID.params)
  return &params_;
}

// -------------------------------------------------------------------

// MCParticle

// repeated int32 parents = 1;
inline int MCParticle::parents_size() const {
  return parents_.size();
}
inline void MCParticle::clear_parents() {
  parents_.Clear();
}
inline ::google::protobuf::int32 MCParticle::parents(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.parents)
  return parents_.Get(index);
}
inline void MCParticle::set_parents(int index, ::google::protobuf::int32 value) {
  parents_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.parents)
}
inline void MCParticle::add_parents(::google::protobuf::int32 value) {
  parents_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.parents)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::parents() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.parents)
  return parents_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.parents)
  return &parents_;
}

// repeated int32 children = 2;
inline int MCParticle::children_size() const {
  return children_.size();
}
inline void MCParticle::clear_children() {
  children_.Clear();
}
inline ::google::protobuf::int32 MCParticle::children(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.children)
  return children_.Get(index);
}
inline void MCParticle::set_children(int index, ::google::protobuf::int32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.children)
}
inline void MCParticle::add_children(::google::protobuf::int32 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.children)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::children() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.children)
  return children_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.children)
  return &children_;
}

// int32 PDG = 3;
inline void MCParticle::clear_pdg() {
  pdg_ = 0;
}
inline ::google::protobuf::int32 MCParticle::pdg() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.PDG)
  return pdg_;
}
inline void MCParticle::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.PDG)
}

// repeated double vertex = 4;
inline int MCParticle::vertex_size() const {
  return vertex_.size();
}
inline void MCParticle::clear_vertex() {
  vertex_.Clear();
}
inline double MCParticle::vertex(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.vertex)
  return vertex_.Get(index);
}
inline void MCParticle::set_vertex(int index, double value) {
  vertex_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.vertex)
}
inline void MCParticle::add_vertex(double value) {
  vertex_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.vertex)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::vertex() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.vertex)
  return vertex_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.vertex)
  return &vertex_;
}

// float time = 5;
inline void MCParticle::clear_time() {
  time_ = 0;
}
inline float MCParticle::time() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.time)
  return time_;
}
inline void MCParticle::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.time)
}

// repeated double p = 6;
inline int MCParticle::p_size() const {
  return p_.size();
}
inline void MCParticle::clear_p() {
  p_.Clear();
}
inline double MCParticle::p(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.p)
  return p_.Get(index);
}
inline void MCParticle::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.p)
}
inline void MCParticle::add_p(double value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.p)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::p() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.p)
  return &p_;
}

// double mass = 7;
inline void MCParticle::clear_mass() {
  mass_ = 0;
}
inline double MCParticle::mass() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.mass)
  return mass_;
}
inline void MCParticle::set_mass(double value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.mass)
}

// float charge = 8;
inline void MCParticle::clear_charge() {
  charge_ = 0;
}
inline float MCParticle::charge() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.charge)
  return charge_;
}
inline void MCParticle::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.charge)
}

// repeated double PEndPoint = 9;
inline int MCParticle::pendpoint_size() const {
  return pendpoint_.size();
}
inline void MCParticle::clear_pendpoint() {
  pendpoint_.Clear();
}
inline double MCParticle::pendpoint(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.PEndPoint)
  return pendpoint_.Get(index);
}
inline void MCParticle::set_pendpoint(int index, double value) {
  pendpoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.PEndPoint)
}
inline void MCParticle::add_pendpoint(double value) {
  pendpoint_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.PEndPoint)
}
inline const ::google::protobuf::RepeatedField< double >&
MCParticle::pendpoint() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.PEndPoint)
  return pendpoint_;
}
inline ::google::protobuf::RepeatedField< double >*
MCParticle::mutable_pendpoint() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.PEndPoint)
  return &pendpoint_;
}

// repeated float spin = 10;
inline int MCParticle::spin_size() const {
  return spin_.size();
}
inline void MCParticle::clear_spin() {
  spin_.Clear();
}
inline float MCParticle::spin(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.spin)
  return spin_.Get(index);
}
inline void MCParticle::set_spin(int index, float value) {
  spin_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.spin)
}
inline void MCParticle::add_spin(float value) {
  spin_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.spin)
}
inline const ::google::protobuf::RepeatedField< float >&
MCParticle::spin() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.spin)
  return spin_;
}
inline ::google::protobuf::RepeatedField< float >*
MCParticle::mutable_spin() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.spin)
  return &spin_;
}

// repeated int32 colorFlow = 11;
inline int MCParticle::colorflow_size() const {
  return colorflow_.size();
}
inline void MCParticle::clear_colorflow() {
  colorflow_.Clear();
}
inline ::google::protobuf::int32 MCParticle::colorflow(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.colorFlow)
  return colorflow_.Get(index);
}
inline void MCParticle::set_colorflow(int index, ::google::protobuf::int32 value) {
  colorflow_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.MCParticle.colorFlow)
}
inline void MCParticle::add_colorflow(::google::protobuf::int32 value) {
  colorflow_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.MCParticle.colorFlow)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MCParticle::colorflow() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticle.colorFlow)
  return colorflow_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MCParticle::mutable_colorflow() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticle.colorFlow)
  return &colorflow_;
}

// int32 genStatus = 12;
inline void MCParticle::clear_genstatus() {
  genstatus_ = 0;
}
inline ::google::protobuf::int32 MCParticle::genstatus() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.genStatus)
  return genstatus_;
}
inline void MCParticle::set_genstatus(::google::protobuf::int32 value) {
  
  genstatus_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.genStatus)
}

// uint32 simStatus = 13;
inline void MCParticle::clear_simstatus() {
  simstatus_ = 0u;
}
inline ::google::protobuf::uint32 MCParticle::simstatus() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticle.simStatus)
  return simstatus_;
}
inline void MCParticle::set_simstatus(::google::protobuf::uint32 value) {
  
  simstatus_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticle.simStatus)
}

// -------------------------------------------------------------------

// MCParticleCollection

// int32 flags = 1;
inline void MCParticleCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 MCParticleCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticleCollection.flags)
  return flags_;
}
inline void MCParticleCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.MCParticleCollection.flags)
}

// .eicio.Params params = 2;
inline bool MCParticleCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void MCParticleCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& MCParticleCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.MCParticleCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* MCParticleCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.MCParticleCollection.params)
  return params_;
}
inline ::eicio::Params* MCParticleCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.MCParticleCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void MCParticleCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.MCParticleCollection.params)
}

// repeated .eicio.MCParticle particle = 3;
inline int MCParticleCollection::particle_size() const {
  return particle_.size();
}
inline void MCParticleCollection::clear_particle() {
  particle_.Clear();
}
inline const ::eicio::MCParticle& MCParticleCollection::particle(int index) const {
  // @@protoc_insertion_point(field_get:eicio.MCParticleCollection.particle)
  return particle_.Get(index);
}
inline ::eicio::MCParticle* MCParticleCollection::mutable_particle(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.MCParticleCollection.particle)
  return particle_.Mutable(index);
}
inline ::eicio::MCParticle* MCParticleCollection::add_particle() {
  // @@protoc_insertion_point(field_add:eicio.MCParticleCollection.particle)
  return particle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >*
MCParticleCollection::mutable_particle() {
  // @@protoc_insertion_point(field_mutable_list:eicio.MCParticleCollection.particle)
  return &particle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::MCParticle >&
MCParticleCollection::particle() const {
  // @@protoc_insertion_point(field_list:eicio.MCParticleCollection.particle)
  return particle_;
}

// -------------------------------------------------------------------

// SimTrackerHit

// int32 cellID0 = 1;
inline void SimTrackerHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.cellID0)
  return cellid0_;
}
inline void SimTrackerHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.cellID0)
}

// int32 cellID1 = 2;
inline void SimTrackerHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.cellID1)
  return cellid1_;
}
inline void SimTrackerHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.cellID1)
}

// repeated double pos = 3;
inline int SimTrackerHit::pos_size() const {
  return pos_.size();
}
inline void SimTrackerHit::clear_pos() {
  pos_.Clear();
}
inline double SimTrackerHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.pos)
  return pos_.Get(index);
}
inline void SimTrackerHit::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.pos)
}
inline void SimTrackerHit::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.SimTrackerHit.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
SimTrackerHit::pos() const {
  // @@protoc_insertion_point(field_list:eicio.SimTrackerHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
SimTrackerHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimTrackerHit.pos)
  return &pos_;
}

// float EDep = 4;
inline void SimTrackerHit::clear_edep() {
  edep_ = 0;
}
inline float SimTrackerHit::edep() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.EDep)
  return edep_;
}
inline void SimTrackerHit::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.EDep)
}

// float time = 5;
inline void SimTrackerHit::clear_time() {
  time_ = 0;
}
inline float SimTrackerHit::time() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.time)
  return time_;
}
inline void SimTrackerHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.time)
}

// .eicio.Reference mc = 6;
inline bool SimTrackerHit::has_mc() const {
  return this != internal_default_instance() && mc_ != NULL;
}
inline void SimTrackerHit::clear_mc() {
  if (GetArenaNoVirtual() == NULL && mc_ != NULL) delete mc_;
  mc_ = NULL;
}
inline const ::eicio::Reference& SimTrackerHit::mc() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.mc)
  return mc_ != NULL ? *mc_
                         : *::eicio::Reference::internal_default_instance();
}
inline ::eicio::Reference* SimTrackerHit::mutable_mc() {
  
  if (mc_ == NULL) {
    mc_ = new ::eicio::Reference;
  }
  // @@protoc_insertion_point(field_mutable:eicio.SimTrackerHit.mc)
  return mc_;
}
inline ::eicio::Reference* SimTrackerHit::release_mc() {
  // @@protoc_insertion_point(field_release:eicio.SimTrackerHit.mc)
  
  ::eicio::Reference* temp = mc_;
  mc_ = NULL;
  return temp;
}
inline void SimTrackerHit::set_allocated_mc(::eicio::Reference* mc) {
  delete mc_;
  mc_ = mc;
  if (mc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.SimTrackerHit.mc)
}

// float p = 7;
inline void SimTrackerHit::clear_p() {
  p_ = 0;
}
inline float SimTrackerHit::p() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.p)
  return p_;
}
inline void SimTrackerHit::set_p(float value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.p)
}

// float pathLength = 8;
inline void SimTrackerHit::clear_pathlength() {
  pathlength_ = 0;
}
inline float SimTrackerHit::pathlength() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.pathLength)
  return pathlength_;
}
inline void SimTrackerHit::set_pathlength(float value) {
  
  pathlength_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.pathLength)
}

// int32 quality = 9;
inline void SimTrackerHit::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHit::quality() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHit.quality)
  return quality_;
}
inline void SimTrackerHit::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHit.quality)
}

// -------------------------------------------------------------------

// SimTrackerHitCollection

// int32 flags = 1;
inline void SimTrackerHitCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 SimTrackerHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHitCollection.flags)
  return flags_;
}
inline void SimTrackerHitCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimTrackerHitCollection.flags)
}

// .eicio.Params params = 2;
inline bool SimTrackerHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void SimTrackerHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& SimTrackerHitCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHitCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* SimTrackerHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.SimTrackerHitCollection.params)
  return params_;
}
inline ::eicio::Params* SimTrackerHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.SimTrackerHitCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void SimTrackerHitCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.SimTrackerHitCollection.params)
}

// repeated .eicio.SimTrackerHit hit = 3;
inline int SimTrackerHitCollection::hit_size() const {
  return hit_.size();
}
inline void SimTrackerHitCollection::clear_hit() {
  hit_.Clear();
}
inline const ::eicio::SimTrackerHit& SimTrackerHitCollection::hit(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimTrackerHitCollection.hit)
  return hit_.Get(index);
}
inline ::eicio::SimTrackerHit* SimTrackerHitCollection::mutable_hit(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.SimTrackerHitCollection.hit)
  return hit_.Mutable(index);
}
inline ::eicio::SimTrackerHit* SimTrackerHitCollection::add_hit() {
  // @@protoc_insertion_point(field_add:eicio.SimTrackerHitCollection.hit)
  return hit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >*
SimTrackerHitCollection::mutable_hit() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimTrackerHitCollection.hit)
  return &hit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::SimTrackerHit >&
SimTrackerHitCollection::hit() const {
  // @@protoc_insertion_point(field_list:eicio.SimTrackerHitCollection.hit)
  return hit_;
}

// -------------------------------------------------------------------

// TrackerRawData

// int32 cellID0 = 1;
inline void TrackerRawData::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerRawData::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerRawData.cellID0)
  return cellid0_;
}
inline void TrackerRawData::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerRawData.cellID0)
}

// int32 cellID1 = 2;
inline void TrackerRawData::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerRawData::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerRawData.cellID1)
  return cellid1_;
}
inline void TrackerRawData::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerRawData.cellID1)
}

// int32 time = 3;
inline void TrackerRawData::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 TrackerRawData::time() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerRawData.time)
  return time_;
}
inline void TrackerRawData::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerRawData.time)
}

// repeated uint32 ADCs = 4;
inline int TrackerRawData::adcs_size() const {
  return adcs_.size();
}
inline void TrackerRawData::clear_adcs() {
  adcs_.Clear();
}
inline ::google::protobuf::uint32 TrackerRawData::adcs(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerRawData.ADCs)
  return adcs_.Get(index);
}
inline void TrackerRawData::set_adcs(int index, ::google::protobuf::uint32 value) {
  adcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerRawData.ADCs)
}
inline void TrackerRawData::add_adcs(::google::protobuf::uint32 value) {
  adcs_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerRawData.ADCs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrackerRawData::adcs() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerRawData.ADCs)
  return adcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrackerRawData::mutable_adcs() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerRawData.ADCs)
  return &adcs_;
}

// -------------------------------------------------------------------

// TrackerRawDataCollection

// int32 flags = 1;
inline void TrackerRawDataCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TrackerRawDataCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerRawDataCollection.flags)
  return flags_;
}
inline void TrackerRawDataCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerRawDataCollection.flags)
}

// .eicio.Params params = 2;
inline bool TrackerRawDataCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerRawDataCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& TrackerRawDataCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerRawDataCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* TrackerRawDataCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackerRawDataCollection.params)
  return params_;
}
inline ::eicio::Params* TrackerRawDataCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.TrackerRawDataCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerRawDataCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackerRawDataCollection.params)
}

// repeated .eicio.TrackerRawData data = 3;
inline int TrackerRawDataCollection::data_size() const {
  return data_.size();
}
inline void TrackerRawDataCollection::clear_data() {
  data_.Clear();
}
inline const ::eicio::TrackerRawData& TrackerRawDataCollection::data(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerRawDataCollection.data)
  return data_.Get(index);
}
inline ::eicio::TrackerRawData* TrackerRawDataCollection::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerRawDataCollection.data)
  return data_.Mutable(index);
}
inline ::eicio::TrackerRawData* TrackerRawDataCollection::add_data() {
  // @@protoc_insertion_point(field_add:eicio.TrackerRawDataCollection.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::TrackerRawData >*
TrackerRawDataCollection::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerRawDataCollection.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerRawData >&
TrackerRawDataCollection::data() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerRawDataCollection.data)
  return data_;
}

// -------------------------------------------------------------------

// TrackerData

// int32 cellID0 = 1;
inline void TrackerData::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerData::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerData.cellID0)
  return cellid0_;
}
inline void TrackerData::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerData.cellID0)
}

// int32 cellID1 = 2;
inline void TrackerData::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerData::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerData.cellID1)
  return cellid1_;
}
inline void TrackerData::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerData.cellID1)
}

// float time = 3;
inline void TrackerData::clear_time() {
  time_ = 0;
}
inline float TrackerData::time() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerData.time)
  return time_;
}
inline void TrackerData::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerData.time)
}

// repeated float charges = 4;
inline int TrackerData::charges_size() const {
  return charges_.size();
}
inline void TrackerData::clear_charges() {
  charges_.Clear();
}
inline float TrackerData::charges(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerData.charges)
  return charges_.Get(index);
}
inline void TrackerData::set_charges(int index, float value) {
  charges_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerData.charges)
}
inline void TrackerData::add_charges(float value) {
  charges_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerData.charges)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerData::charges() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerData.charges)
  return charges_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerData::mutable_charges() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerData.charges)
  return &charges_;
}

// -------------------------------------------------------------------

// TrackerDataCollection

// int32 flags = 1;
inline void TrackerDataCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TrackerDataCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerDataCollection.flags)
  return flags_;
}
inline void TrackerDataCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerDataCollection.flags)
}

// .eicio.Params params = 2;
inline bool TrackerDataCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerDataCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& TrackerDataCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerDataCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* TrackerDataCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackerDataCollection.params)
  return params_;
}
inline ::eicio::Params* TrackerDataCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.TrackerDataCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerDataCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackerDataCollection.params)
}

// repeated .eicio.TrackerData data = 3;
inline int TrackerDataCollection::data_size() const {
  return data_.size();
}
inline void TrackerDataCollection::clear_data() {
  data_.Clear();
}
inline const ::eicio::TrackerData& TrackerDataCollection::data(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerDataCollection.data)
  return data_.Get(index);
}
inline ::eicio::TrackerData* TrackerDataCollection::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerDataCollection.data)
  return data_.Mutable(index);
}
inline ::eicio::TrackerData* TrackerDataCollection::add_data() {
  // @@protoc_insertion_point(field_add:eicio.TrackerDataCollection.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::TrackerData >*
TrackerDataCollection::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerDataCollection.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerData >&
TrackerDataCollection::data() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerDataCollection.data)
  return data_;
}

// -------------------------------------------------------------------

// TrackerHit

// int32 cellID0 = 1;
inline void TrackerHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.cellID0)
  return cellid0_;
}
inline void TrackerHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.cellID0)
}

// int32 cellID1 = 2;
inline void TrackerHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.cellID1)
  return cellid1_;
}
inline void TrackerHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.cellID1)
}

// int32 type = 3;
inline void TrackerHit::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::type() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.type)
  return type_;
}
inline void TrackerHit::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.type)
}

// repeated double pos = 4;
inline int TrackerHit::pos_size() const {
  return pos_.size();
}
inline void TrackerHit::clear_pos() {
  pos_.Clear();
}
inline double TrackerHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.pos)
  return pos_.Get(index);
}
inline void TrackerHit::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.pos)
}
inline void TrackerHit::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerHit.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHit::pos() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHit.pos)
  return &pos_;
}

// repeated double cov = 5;
inline int TrackerHit::cov_size() const {
  return cov_.size();
}
inline void TrackerHit::clear_cov() {
  cov_.Clear();
}
inline double TrackerHit::cov(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.cov)
  return cov_.Get(index);
}
inline void TrackerHit::set_cov(int index, double value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.cov)
}
inline void TrackerHit::add_cov(double value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerHit.cov)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHit::cov() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHit.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHit::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHit.cov)
  return &cov_;
}

// float EDep = 6;
inline void TrackerHit::clear_edep() {
  edep_ = 0;
}
inline float TrackerHit::edep() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.EDep)
  return edep_;
}
inline void TrackerHit::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.EDep)
}

// float EDepErr = 7;
inline void TrackerHit::clear_edeperr() {
  edeperr_ = 0;
}
inline float TrackerHit::edeperr() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.EDepErr)
  return edeperr_;
}
inline void TrackerHit::set_edeperr(float value) {
  
  edeperr_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.EDepErr)
}

// float time = 8;
inline void TrackerHit::clear_time() {
  time_ = 0;
}
inline float TrackerHit::time() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.time)
  return time_;
}
inline void TrackerHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.time)
}

// int32 quality = 9;
inline void TrackerHit::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerHit::quality() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.quality)
  return quality_;
}
inline void TrackerHit::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHit.quality)
}

// repeated .eicio.Reference rawHits = 10;
inline int TrackerHit::rawhits_size() const {
  return rawhits_.size();
}
inline void TrackerHit::clear_rawhits() {
  rawhits_.Clear();
}
inline const ::eicio::Reference& TrackerHit::rawhits(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHit.rawHits)
  return rawhits_.Get(index);
}
inline ::eicio::Reference* TrackerHit::mutable_rawhits(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHit.rawHits)
  return rawhits_.Mutable(index);
}
inline ::eicio::Reference* TrackerHit::add_rawhits() {
  // @@protoc_insertion_point(field_add:eicio.TrackerHit.rawHits)
  return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
TrackerHit::mutable_rawhits() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHit.rawHits)
  return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
TrackerHit::rawhits() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHit.rawHits)
  return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitCollection

// int32 flags = 1;
inline void TrackerHitCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TrackerHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitCollection.flags)
  return flags_;
}
inline void TrackerHitCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitCollection.flags)
}

// .eicio.Params params = 2;
inline bool TrackerHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& TrackerHitCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* TrackerHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitCollection.params)
  return params_;
}
inline ::eicio::Params* TrackerHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.TrackerHitCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerHitCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackerHitCollection.params)
}

// repeated .eicio.TrackerHit hit = 3;
inline int TrackerHitCollection::hit_size() const {
  return hit_.size();
}
inline void TrackerHitCollection::clear_hit() {
  hit_.Clear();
}
inline const ::eicio::TrackerHit& TrackerHitCollection::hit(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitCollection.hit)
  return hit_.Get(index);
}
inline ::eicio::TrackerHit* TrackerHitCollection::mutable_hit(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitCollection.hit)
  return hit_.Mutable(index);
}
inline ::eicio::TrackerHit* TrackerHitCollection::add_hit() {
  // @@protoc_insertion_point(field_add:eicio.TrackerHitCollection.hit)
  return hit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHit >*
TrackerHitCollection::mutable_hit() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitCollection.hit)
  return &hit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHit >&
TrackerHitCollection::hit() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitCollection.hit)
  return hit_;
}

// -------------------------------------------------------------------

// TrackerPulse

// int32 cellID0 = 1;
inline void TrackerPulse::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerPulse::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulse.cellID0)
  return cellid0_;
}
inline void TrackerPulse::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerPulse.cellID0)
}

// int32 cellID1 = 2;
inline void TrackerPulse::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerPulse::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulse.cellID1)
  return cellid1_;
}
inline void TrackerPulse::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerPulse.cellID1)
}

// float time = 3;
inline void TrackerPulse::clear_time() {
  time_ = 0;
}
inline float TrackerPulse::time() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulse.time)
  return time_;
}
inline void TrackerPulse::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerPulse.time)
}

// float charge = 4;
inline void TrackerPulse::clear_charge() {
  charge_ = 0;
}
inline float TrackerPulse::charge() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulse.charge)
  return charge_;
}
inline void TrackerPulse::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerPulse.charge)
}

// repeated float cov = 5;
inline int TrackerPulse::cov_size() const {
  return cov_.size();
}
inline void TrackerPulse::clear_cov() {
  cov_.Clear();
}
inline float TrackerPulse::cov(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulse.cov)
  return cov_.Get(index);
}
inline void TrackerPulse::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerPulse.cov)
}
inline void TrackerPulse::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerPulse.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerPulse::cov() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerPulse.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerPulse::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerPulse.cov)
  return &cov_;
}

// int32 quality = 6;
inline void TrackerPulse::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerPulse::quality() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulse.quality)
  return quality_;
}
inline void TrackerPulse::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerPulse.quality)
}

// .eicio.Reference TPC = 7;
inline bool TrackerPulse::has_tpc() const {
  return this != internal_default_instance() && tpc_ != NULL;
}
inline void TrackerPulse::clear_tpc() {
  if (GetArenaNoVirtual() == NULL && tpc_ != NULL) delete tpc_;
  tpc_ = NULL;
}
inline const ::eicio::Reference& TrackerPulse::tpc() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulse.TPC)
  return tpc_ != NULL ? *tpc_
                         : *::eicio::Reference::internal_default_instance();
}
inline ::eicio::Reference* TrackerPulse::mutable_tpc() {
  
  if (tpc_ == NULL) {
    tpc_ = new ::eicio::Reference;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackerPulse.TPC)
  return tpc_;
}
inline ::eicio::Reference* TrackerPulse::release_tpc() {
  // @@protoc_insertion_point(field_release:eicio.TrackerPulse.TPC)
  
  ::eicio::Reference* temp = tpc_;
  tpc_ = NULL;
  return temp;
}
inline void TrackerPulse::set_allocated_tpc(::eicio::Reference* tpc) {
  delete tpc_;
  tpc_ = tpc;
  if (tpc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackerPulse.TPC)
}

// -------------------------------------------------------------------

// TrackerPulseCollection

// int32 flags = 1;
inline void TrackerPulseCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TrackerPulseCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulseCollection.flags)
  return flags_;
}
inline void TrackerPulseCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerPulseCollection.flags)
}

// .eicio.Params params = 2;
inline bool TrackerPulseCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerPulseCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& TrackerPulseCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulseCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* TrackerPulseCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackerPulseCollection.params)
  return params_;
}
inline ::eicio::Params* TrackerPulseCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.TrackerPulseCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerPulseCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackerPulseCollection.params)
}

// repeated .eicio.TrackerPulse pulse = 3;
inline int TrackerPulseCollection::pulse_size() const {
  return pulse_.size();
}
inline void TrackerPulseCollection::clear_pulse() {
  pulse_.Clear();
}
inline const ::eicio::TrackerPulse& TrackerPulseCollection::pulse(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerPulseCollection.pulse)
  return pulse_.Get(index);
}
inline ::eicio::TrackerPulse* TrackerPulseCollection::mutable_pulse(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerPulseCollection.pulse)
  return pulse_.Mutable(index);
}
inline ::eicio::TrackerPulse* TrackerPulseCollection::add_pulse() {
  // @@protoc_insertion_point(field_add:eicio.TrackerPulseCollection.pulse)
  return pulse_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::TrackerPulse >*
TrackerPulseCollection::mutable_pulse() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerPulseCollection.pulse)
  return &pulse_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerPulse >&
TrackerPulseCollection::pulse() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerPulseCollection.pulse)
  return pulse_;
}

// -------------------------------------------------------------------

// TrackerHitPlane

// int32 cellID0 = 1;
inline void TrackerHitPlane::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.cellID0)
  return cellid0_;
}
inline void TrackerHitPlane::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.cellID0)
}

// int32 cellID1 = 2;
inline void TrackerHitPlane::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.cellID1)
  return cellid1_;
}
inline void TrackerHitPlane::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.cellID1)
}

// int32 type = 3;
inline void TrackerHitPlane::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::type() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.type)
  return type_;
}
inline void TrackerHitPlane::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.type)
}

// repeated double pos = 4;
inline int TrackerHitPlane::pos_size() const {
  return pos_.size();
}
inline void TrackerHitPlane::clear_pos() {
  pos_.Clear();
}
inline double TrackerHitPlane::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.pos)
  return pos_.Get(index);
}
inline void TrackerHitPlane::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.pos)
}
inline void TrackerHitPlane::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerHitPlane.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHitPlane::pos() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitPlane.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHitPlane::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitPlane.pos)
  return &pos_;
}

// repeated float U = 5;
inline int TrackerHitPlane::u_size() const {
  return u_.size();
}
inline void TrackerHitPlane::clear_u() {
  u_.Clear();
}
inline float TrackerHitPlane::u(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.U)
  return u_.Get(index);
}
inline void TrackerHitPlane::set_u(int index, float value) {
  u_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.U)
}
inline void TrackerHitPlane::add_u(float value) {
  u_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerHitPlane.U)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerHitPlane::u() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitPlane.U)
  return u_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerHitPlane::mutable_u() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitPlane.U)
  return &u_;
}

// repeated float V = 6;
inline int TrackerHitPlane::v_size() const {
  return v_.size();
}
inline void TrackerHitPlane::clear_v() {
  v_.Clear();
}
inline float TrackerHitPlane::v(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.V)
  return v_.Get(index);
}
inline void TrackerHitPlane::set_v(int index, float value) {
  v_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.V)
}
inline void TrackerHitPlane::add_v(float value) {
  v_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerHitPlane.V)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerHitPlane::v() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitPlane.V)
  return v_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerHitPlane::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitPlane.V)
  return &v_;
}

// float dU = 7;
inline void TrackerHitPlane::clear_du() {
  du_ = 0;
}
inline float TrackerHitPlane::du() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.dU)
  return du_;
}
inline void TrackerHitPlane::set_du(float value) {
  
  du_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.dU)
}

// float dV = 8;
inline void TrackerHitPlane::clear_dv() {
  dv_ = 0;
}
inline float TrackerHitPlane::dv() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.dV)
  return dv_;
}
inline void TrackerHitPlane::set_dv(float value) {
  
  dv_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.dV)
}

// float EDep = 9;
inline void TrackerHitPlane::clear_edep() {
  edep_ = 0;
}
inline float TrackerHitPlane::edep() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.EDep)
  return edep_;
}
inline void TrackerHitPlane::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.EDep)
}

// float EDepErr = 10;
inline void TrackerHitPlane::clear_edeperr() {
  edeperr_ = 0;
}
inline float TrackerHitPlane::edeperr() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.EDepErr)
  return edeperr_;
}
inline void TrackerHitPlane::set_edeperr(float value) {
  
  edeperr_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.EDepErr)
}

// float time = 11;
inline void TrackerHitPlane::clear_time() {
  time_ = 0;
}
inline float TrackerHitPlane::time() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.time)
  return time_;
}
inline void TrackerHitPlane::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.time)
}

// int32 quality = 12;
inline void TrackerHitPlane::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlane::quality() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.quality)
  return quality_;
}
inline void TrackerHitPlane::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlane.quality)
}

// repeated .eicio.Reference rawHits = 13;
inline int TrackerHitPlane::rawhits_size() const {
  return rawhits_.size();
}
inline void TrackerHitPlane::clear_rawhits() {
  rawhits_.Clear();
}
inline const ::eicio::Reference& TrackerHitPlane::rawhits(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlane.rawHits)
  return rawhits_.Get(index);
}
inline ::eicio::Reference* TrackerHitPlane::mutable_rawhits(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitPlane.rawHits)
  return rawhits_.Mutable(index);
}
inline ::eicio::Reference* TrackerHitPlane::add_rawhits() {
  // @@protoc_insertion_point(field_add:eicio.TrackerHitPlane.rawHits)
  return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
TrackerHitPlane::mutable_rawhits() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitPlane.rawHits)
  return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
TrackerHitPlane::rawhits() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitPlane.rawHits)
  return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitPlaneCollection

// int32 flags = 1;
inline void TrackerHitPlaneCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TrackerHitPlaneCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlaneCollection.flags)
  return flags_;
}
inline void TrackerHitPlaneCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitPlaneCollection.flags)
}

// .eicio.Params params = 2;
inline bool TrackerHitPlaneCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitPlaneCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& TrackerHitPlaneCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlaneCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* TrackerHitPlaneCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitPlaneCollection.params)
  return params_;
}
inline ::eicio::Params* TrackerHitPlaneCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.TrackerHitPlaneCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerHitPlaneCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackerHitPlaneCollection.params)
}

// repeated .eicio.TrackerHitPlane plane = 3;
inline int TrackerHitPlaneCollection::plane_size() const {
  return plane_.size();
}
inline void TrackerHitPlaneCollection::clear_plane() {
  plane_.Clear();
}
inline const ::eicio::TrackerHitPlane& TrackerHitPlaneCollection::plane(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitPlaneCollection.plane)
  return plane_.Get(index);
}
inline ::eicio::TrackerHitPlane* TrackerHitPlaneCollection::mutable_plane(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitPlaneCollection.plane)
  return plane_.Mutable(index);
}
inline ::eicio::TrackerHitPlane* TrackerHitPlaneCollection::add_plane() {
  // @@protoc_insertion_point(field_add:eicio.TrackerHitPlaneCollection.plane)
  return plane_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitPlane >*
TrackerHitPlaneCollection::mutable_plane() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitPlaneCollection.plane)
  return &plane_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitPlane >&
TrackerHitPlaneCollection::plane() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitPlaneCollection.plane)
  return plane_;
}

// -------------------------------------------------------------------

// TrackerHitZCylinder

// int32 cellID0 = 1;
inline void TrackerHitZCylinder::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.cellID0)
  return cellid0_;
}
inline void TrackerHitZCylinder::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.cellID0)
}

// int32 cellID1 = 2;
inline void TrackerHitZCylinder::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.cellID1)
  return cellid1_;
}
inline void TrackerHitZCylinder::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.cellID1)
}

// int32 type = 3;
inline void TrackerHitZCylinder::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::type() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.type)
  return type_;
}
inline void TrackerHitZCylinder::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.type)
}

// repeated double pos = 4;
inline int TrackerHitZCylinder::pos_size() const {
  return pos_.size();
}
inline void TrackerHitZCylinder::clear_pos() {
  pos_.Clear();
}
inline double TrackerHitZCylinder::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.pos)
  return pos_.Get(index);
}
inline void TrackerHitZCylinder::set_pos(int index, double value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.pos)
}
inline void TrackerHitZCylinder::add_pos(double value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerHitZCylinder.pos)
}
inline const ::google::protobuf::RepeatedField< double >&
TrackerHitZCylinder::pos() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitZCylinder.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< double >*
TrackerHitZCylinder::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitZCylinder.pos)
  return &pos_;
}

// repeated float center = 5;
inline int TrackerHitZCylinder::center_size() const {
  return center_.size();
}
inline void TrackerHitZCylinder::clear_center() {
  center_.Clear();
}
inline float TrackerHitZCylinder::center(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.center)
  return center_.Get(index);
}
inline void TrackerHitZCylinder::set_center(int index, float value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.center)
}
inline void TrackerHitZCylinder::add_center(float value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.TrackerHitZCylinder.center)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerHitZCylinder::center() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitZCylinder.center)
  return center_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerHitZCylinder::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitZCylinder.center)
  return &center_;
}

// float dRPhi = 6;
inline void TrackerHitZCylinder::clear_drphi() {
  drphi_ = 0;
}
inline float TrackerHitZCylinder::drphi() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.dRPhi)
  return drphi_;
}
inline void TrackerHitZCylinder::set_drphi(float value) {
  
  drphi_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.dRPhi)
}

// float dZ = 7;
inline void TrackerHitZCylinder::clear_dz() {
  dz_ = 0;
}
inline float TrackerHitZCylinder::dz() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.dZ)
  return dz_;
}
inline void TrackerHitZCylinder::set_dz(float value) {
  
  dz_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.dZ)
}

// float EDep = 8;
inline void TrackerHitZCylinder::clear_edep() {
  edep_ = 0;
}
inline float TrackerHitZCylinder::edep() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.EDep)
  return edep_;
}
inline void TrackerHitZCylinder::set_edep(float value) {
  
  edep_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.EDep)
}

// float EDepErr = 9;
inline void TrackerHitZCylinder::clear_edeperr() {
  edeperr_ = 0;
}
inline float TrackerHitZCylinder::edeperr() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.EDepErr)
  return edeperr_;
}
inline void TrackerHitZCylinder::set_edeperr(float value) {
  
  edeperr_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.EDepErr)
}

// float time = 10;
inline void TrackerHitZCylinder::clear_time() {
  time_ = 0;
}
inline float TrackerHitZCylinder::time() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.time)
  return time_;
}
inline void TrackerHitZCylinder::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.time)
}

// int32 quality = 11;
inline void TrackerHitZCylinder::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinder::quality() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.quality)
  return quality_;
}
inline void TrackerHitZCylinder::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinder.quality)
}

// repeated .eicio.Reference rawHits = 12;
inline int TrackerHitZCylinder::rawhits_size() const {
  return rawhits_.size();
}
inline void TrackerHitZCylinder::clear_rawhits() {
  rawhits_.Clear();
}
inline const ::eicio::Reference& TrackerHitZCylinder::rawhits(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinder.rawHits)
  return rawhits_.Get(index);
}
inline ::eicio::Reference* TrackerHitZCylinder::mutable_rawhits(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitZCylinder.rawHits)
  return rawhits_.Mutable(index);
}
inline ::eicio::Reference* TrackerHitZCylinder::add_rawhits() {
  // @@protoc_insertion_point(field_add:eicio.TrackerHitZCylinder.rawHits)
  return rawhits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
TrackerHitZCylinder::mutable_rawhits() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitZCylinder.rawHits)
  return &rawhits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
TrackerHitZCylinder::rawhits() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitZCylinder.rawHits)
  return rawhits_;
}

// -------------------------------------------------------------------

// TrackerHitZCylinderCollection

// int32 flags = 1;
inline void TrackerHitZCylinderCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TrackerHitZCylinderCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinderCollection.flags)
  return flags_;
}
inline void TrackerHitZCylinderCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackerHitZCylinderCollection.flags)
}

// .eicio.Params params = 2;
inline bool TrackerHitZCylinderCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackerHitZCylinderCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& TrackerHitZCylinderCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinderCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* TrackerHitZCylinderCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitZCylinderCollection.params)
  return params_;
}
inline ::eicio::Params* TrackerHitZCylinderCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.TrackerHitZCylinderCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackerHitZCylinderCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackerHitZCylinderCollection.params)
}

// repeated .eicio.TrackerHitZCylinder cyl = 3;
inline int TrackerHitZCylinderCollection::cyl_size() const {
  return cyl_.size();
}
inline void TrackerHitZCylinderCollection::clear_cyl() {
  cyl_.Clear();
}
inline const ::eicio::TrackerHitZCylinder& TrackerHitZCylinderCollection::cyl(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackerHitZCylinderCollection.cyl)
  return cyl_.Get(index);
}
inline ::eicio::TrackerHitZCylinder* TrackerHitZCylinderCollection::mutable_cyl(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackerHitZCylinderCollection.cyl)
  return cyl_.Mutable(index);
}
inline ::eicio::TrackerHitZCylinder* TrackerHitZCylinderCollection::add_cyl() {
  // @@protoc_insertion_point(field_add:eicio.TrackerHitZCylinderCollection.cyl)
  return cyl_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitZCylinder >*
TrackerHitZCylinderCollection::mutable_cyl() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackerHitZCylinderCollection.cyl)
  return &cyl_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::TrackerHitZCylinder >&
TrackerHitZCylinderCollection::cyl() const {
  // @@protoc_insertion_point(field_list:eicio.TrackerHitZCylinderCollection.cyl)
  return cyl_;
}

// -------------------------------------------------------------------

// Track_TrackState

// int32 loc = 1;
inline void Track_TrackState::clear_loc() {
  loc_ = 0;
}
inline ::google::protobuf::int32 Track_TrackState::loc() const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.loc)
  return loc_;
}
inline void Track_TrackState::set_loc(::google::protobuf::int32 value) {
  
  loc_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.loc)
}

// float d0 = 2;
inline void Track_TrackState::clear_d0() {
  d0_ = 0;
}
inline float Track_TrackState::d0() const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.d0)
  return d0_;
}
inline void Track_TrackState::set_d0(float value) {
  
  d0_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.d0)
}

// float phi = 3;
inline void Track_TrackState::clear_phi() {
  phi_ = 0;
}
inline float Track_TrackState::phi() const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.phi)
  return phi_;
}
inline void Track_TrackState::set_phi(float value) {
  
  phi_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.phi)
}

// float omega = 4;
inline void Track_TrackState::clear_omega() {
  omega_ = 0;
}
inline float Track_TrackState::omega() const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.omega)
  return omega_;
}
inline void Track_TrackState::set_omega(float value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.omega)
}

// float z0 = 5;
inline void Track_TrackState::clear_z0() {
  z0_ = 0;
}
inline float Track_TrackState::z0() const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.z0)
  return z0_;
}
inline void Track_TrackState::set_z0(float value) {
  
  z0_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.z0)
}

// float tanL = 6;
inline void Track_TrackState::clear_tanl() {
  tanl_ = 0;
}
inline float Track_TrackState::tanl() const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.tanL)
  return tanl_;
}
inline void Track_TrackState::set_tanl(float value) {
  
  tanl_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.tanL)
}

// repeated float cov = 7;
inline int Track_TrackState::cov_size() const {
  return cov_.size();
}
inline void Track_TrackState::clear_cov() {
  cov_.Clear();
}
inline float Track_TrackState::cov(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.cov)
  return cov_.Get(index);
}
inline void Track_TrackState::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.cov)
}
inline void Track_TrackState::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Track.TrackState.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
Track_TrackState::cov() const {
  // @@protoc_insertion_point(field_list:eicio.Track.TrackState.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
Track_TrackState::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Track.TrackState.cov)
  return &cov_;
}

// repeated float ref = 8;
inline int Track_TrackState::ref_size() const {
  return ref_.size();
}
inline void Track_TrackState::clear_ref() {
  ref_.Clear();
}
inline float Track_TrackState::ref(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Track.TrackState.ref)
  return ref_.Get(index);
}
inline void Track_TrackState::set_ref(int index, float value) {
  ref_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Track.TrackState.ref)
}
inline void Track_TrackState::add_ref(float value) {
  ref_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Track.TrackState.ref)
}
inline const ::google::protobuf::RepeatedField< float >&
Track_TrackState::ref() const {
  // @@protoc_insertion_point(field_list:eicio.Track.TrackState.ref)
  return ref_;
}
inline ::google::protobuf::RepeatedField< float >*
Track_TrackState::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Track.TrackState.ref)
  return &ref_;
}

// -------------------------------------------------------------------

// Track

// int32 type = 1;
inline void Track::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Track::type() const {
  // @@protoc_insertion_point(field_get:eicio.Track.type)
  return type_;
}
inline void Track::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.type)
}

// float chi2 = 2;
inline void Track::clear_chi2() {
  chi2_ = 0;
}
inline float Track::chi2() const {
  // @@protoc_insertion_point(field_get:eicio.Track.chi2)
  return chi2_;
}
inline void Track::set_chi2(float value) {
  
  chi2_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.chi2)
}

// int32 NDF = 3;
inline void Track::clear_ndf() {
  ndf_ = 0;
}
inline ::google::protobuf::int32 Track::ndf() const {
  // @@protoc_insertion_point(field_get:eicio.Track.NDF)
  return ndf_;
}
inline void Track::set_ndf(::google::protobuf::int32 value) {
  
  ndf_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.NDF)
}

// float dEdx = 4;
inline void Track::clear_dedx() {
  dedx_ = 0;
}
inline float Track::dedx() const {
  // @@protoc_insertion_point(field_get:eicio.Track.dEdx)
  return dedx_;
}
inline void Track::set_dedx(float value) {
  
  dedx_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.dEdx)
}

// float dEdxErr = 5;
inline void Track::clear_dedxerr() {
  dedxerr_ = 0;
}
inline float Track::dedxerr() const {
  // @@protoc_insertion_point(field_get:eicio.Track.dEdxErr)
  return dedxerr_;
}
inline void Track::set_dedxerr(float value) {
  
  dedxerr_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.dEdxErr)
}

// float radius = 6;
inline void Track::clear_radius() {
  radius_ = 0;
}
inline float Track::radius() const {
  // @@protoc_insertion_point(field_get:eicio.Track.radius)
  return radius_;
}
inline void Track::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:eicio.Track.radius)
}

// repeated int32 subDetHits = 7;
inline int Track::subdethits_size() const {
  return subdethits_.size();
}
inline void Track::clear_subdethits() {
  subdethits_.Clear();
}
inline ::google::protobuf::int32 Track::subdethits(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Track.subDetHits)
  return subdethits_.Get(index);
}
inline void Track::set_subdethits(int index, ::google::protobuf::int32 value) {
  subdethits_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Track.subDetHits)
}
inline void Track::add_subdethits(::google::protobuf::int32 value) {
  subdethits_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Track.subDetHits)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Track::subdethits() const {
  // @@protoc_insertion_point(field_list:eicio.Track.subDetHits)
  return subdethits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Track::mutable_subdethits() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Track.subDetHits)
  return &subdethits_;
}

// repeated .eicio.Track.TrackState states = 8;
inline int Track::states_size() const {
  return states_.size();
}
inline void Track::clear_states() {
  states_.Clear();
}
inline const ::eicio::Track_TrackState& Track::states(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Track.states)
  return states_.Get(index);
}
inline ::eicio::Track_TrackState* Track::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.Track.states)
  return states_.Mutable(index);
}
inline ::eicio::Track_TrackState* Track::add_states() {
  // @@protoc_insertion_point(field_add:eicio.Track.states)
  return states_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Track_TrackState >*
Track::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Track.states)
  return &states_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Track_TrackState >&
Track::states() const {
  // @@protoc_insertion_point(field_list:eicio.Track.states)
  return states_;
}

// repeated .eicio.Reference hits = 9;
inline int Track::hits_size() const {
  return hits_.size();
}
inline void Track::clear_hits() {
  hits_.Clear();
}
inline const ::eicio::Reference& Track::hits(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Track.hits)
  return hits_.Get(index);
}
inline ::eicio::Reference* Track::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.Track.hits)
  return hits_.Mutable(index);
}
inline ::eicio::Reference* Track::add_hits() {
  // @@protoc_insertion_point(field_add:eicio.Track.hits)
  return hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
Track::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Track.hits)
  return &hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
Track::hits() const {
  // @@protoc_insertion_point(field_list:eicio.Track.hits)
  return hits_;
}

// repeated .eicio.Reference trackIDs = 10;
inline int Track::trackids_size() const {
  return trackids_.size();
}
inline void Track::clear_trackids() {
  trackids_.Clear();
}
inline const ::eicio::Reference& Track::trackids(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Track.trackIDs)
  return trackids_.Get(index);
}
inline ::eicio::Reference* Track::mutable_trackids(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.Track.trackIDs)
  return trackids_.Mutable(index);
}
inline ::eicio::Reference* Track::add_trackids() {
  // @@protoc_insertion_point(field_add:eicio.Track.trackIDs)
  return trackids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
Track::mutable_trackids() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Track.trackIDs)
  return &trackids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
Track::trackids() const {
  // @@protoc_insertion_point(field_list:eicio.Track.trackIDs)
  return trackids_;
}

// -------------------------------------------------------------------

// TrackCollection

// int32 flags = 1;
inline void TrackCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 TrackCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.TrackCollection.flags)
  return flags_;
}
inline void TrackCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.TrackCollection.flags)
}

// .eicio.Params params = 2;
inline bool TrackCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void TrackCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& TrackCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.TrackCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* TrackCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.TrackCollection.params)
  return params_;
}
inline ::eicio::Params* TrackCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.TrackCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void TrackCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.TrackCollection.params)
}

// repeated .eicio.Track track = 3;
inline int TrackCollection::track_size() const {
  return track_.size();
}
inline void TrackCollection::clear_track() {
  track_.Clear();
}
inline const ::eicio::Track& TrackCollection::track(int index) const {
  // @@protoc_insertion_point(field_get:eicio.TrackCollection.track)
  return track_.Get(index);
}
inline ::eicio::Track* TrackCollection::mutable_track(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.TrackCollection.track)
  return track_.Mutable(index);
}
inline ::eicio::Track* TrackCollection::add_track() {
  // @@protoc_insertion_point(field_add:eicio.TrackCollection.track)
  return track_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Track >*
TrackCollection::mutable_track() {
  // @@protoc_insertion_point(field_mutable_list:eicio.TrackCollection.track)
  return &track_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Track >&
TrackCollection::track() const {
  // @@protoc_insertion_point(field_list:eicio.TrackCollection.track)
  return track_;
}

// -------------------------------------------------------------------

// SimCalorimeterHit_Contrib

// int32 MCParticle = 1;
inline void SimCalorimeterHit_Contrib::clear_mcparticle() {
  mcparticle_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHit_Contrib::mcparticle() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.Contrib.MCParticle)
  return mcparticle_;
}
inline void SimCalorimeterHit_Contrib::set_mcparticle(::google::protobuf::int32 value) {
  
  mcparticle_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.Contrib.MCParticle)
}

// float energy = 2;
inline void SimCalorimeterHit_Contrib::clear_energy() {
  energy_ = 0;
}
inline float SimCalorimeterHit_Contrib::energy() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.Contrib.energy)
  return energy_;
}
inline void SimCalorimeterHit_Contrib::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.Contrib.energy)
}

// float time = 3;
inline void SimCalorimeterHit_Contrib::clear_time() {
  time_ = 0;
}
inline float SimCalorimeterHit_Contrib::time() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.Contrib.time)
  return time_;
}
inline void SimCalorimeterHit_Contrib::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.Contrib.time)
}

// int32 PDG = 4;
inline void SimCalorimeterHit_Contrib::clear_pdg() {
  pdg_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHit_Contrib::pdg() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.Contrib.PDG)
  return pdg_;
}
inline void SimCalorimeterHit_Contrib::set_pdg(::google::protobuf::int32 value) {
  
  pdg_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.Contrib.PDG)
}

// repeated float stepPos = 5;
inline int SimCalorimeterHit_Contrib::steppos_size() const {
  return steppos_.size();
}
inline void SimCalorimeterHit_Contrib::clear_steppos() {
  steppos_.Clear();
}
inline float SimCalorimeterHit_Contrib::steppos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.Contrib.stepPos)
  return steppos_.Get(index);
}
inline void SimCalorimeterHit_Contrib::set_steppos(int index, float value) {
  steppos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.Contrib.stepPos)
}
inline void SimCalorimeterHit_Contrib::add_steppos(float value) {
  steppos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.SimCalorimeterHit.Contrib.stepPos)
}
inline const ::google::protobuf::RepeatedField< float >&
SimCalorimeterHit_Contrib::steppos() const {
  // @@protoc_insertion_point(field_list:eicio.SimCalorimeterHit.Contrib.stepPos)
  return steppos_;
}
inline ::google::protobuf::RepeatedField< float >*
SimCalorimeterHit_Contrib::mutable_steppos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimCalorimeterHit.Contrib.stepPos)
  return &steppos_;
}

// -------------------------------------------------------------------

// SimCalorimeterHit

// .eicio.Params params = 1;
inline bool SimCalorimeterHit::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void SimCalorimeterHit::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& SimCalorimeterHit::params() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* SimCalorimeterHit::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.SimCalorimeterHit.params)
  return params_;
}
inline ::eicio::Params* SimCalorimeterHit::release_params() {
  // @@protoc_insertion_point(field_release:eicio.SimCalorimeterHit.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void SimCalorimeterHit::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.SimCalorimeterHit.params)
}

// int32 cellID0 = 2;
inline void SimCalorimeterHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHit::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.cellID0)
  return cellid0_;
}
inline void SimCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.cellID0)
}

// int32 cellID1 = 3;
inline void SimCalorimeterHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHit::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.cellID1)
  return cellid1_;
}
inline void SimCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.cellID1)
}

// float energy = 4;
inline void SimCalorimeterHit::clear_energy() {
  energy_ = 0;
}
inline float SimCalorimeterHit::energy() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.energy)
  return energy_;
}
inline void SimCalorimeterHit::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.energy)
}

// repeated float pos = 5;
inline int SimCalorimeterHit::pos_size() const {
  return pos_.size();
}
inline void SimCalorimeterHit::clear_pos() {
  pos_.Clear();
}
inline float SimCalorimeterHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.pos)
  return pos_.Get(index);
}
inline void SimCalorimeterHit::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHit.pos)
}
inline void SimCalorimeterHit::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.SimCalorimeterHit.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
SimCalorimeterHit::pos() const {
  // @@protoc_insertion_point(field_list:eicio.SimCalorimeterHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
SimCalorimeterHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimCalorimeterHit.pos)
  return &pos_;
}

// repeated .eicio.SimCalorimeterHit.Contrib contributions = 6;
inline int SimCalorimeterHit::contributions_size() const {
  return contributions_.size();
}
inline void SimCalorimeterHit::clear_contributions() {
  contributions_.Clear();
}
inline const ::eicio::SimCalorimeterHit_Contrib& SimCalorimeterHit::contributions(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHit.contributions)
  return contributions_.Get(index);
}
inline ::eicio::SimCalorimeterHit_Contrib* SimCalorimeterHit::mutable_contributions(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.SimCalorimeterHit.contributions)
  return contributions_.Mutable(index);
}
inline ::eicio::SimCalorimeterHit_Contrib* SimCalorimeterHit::add_contributions() {
  // @@protoc_insertion_point(field_add:eicio.SimCalorimeterHit.contributions)
  return contributions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit_Contrib >*
SimCalorimeterHit::mutable_contributions() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimCalorimeterHit.contributions)
  return &contributions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit_Contrib >&
SimCalorimeterHit::contributions() const {
  // @@protoc_insertion_point(field_list:eicio.SimCalorimeterHit.contributions)
  return contributions_;
}

// -------------------------------------------------------------------

// SimCalorimeterHitCollection

// int32 flags = 1;
inline void SimCalorimeterHitCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 SimCalorimeterHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHitCollection.flags)
  return flags_;
}
inline void SimCalorimeterHitCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.SimCalorimeterHitCollection.flags)
}

// .eicio.Params params = 2;
inline bool SimCalorimeterHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void SimCalorimeterHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& SimCalorimeterHitCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHitCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* SimCalorimeterHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.SimCalorimeterHitCollection.params)
  return params_;
}
inline ::eicio::Params* SimCalorimeterHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.SimCalorimeterHitCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void SimCalorimeterHitCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.SimCalorimeterHitCollection.params)
}

// repeated .eicio.SimCalorimeterHit hit = 3;
inline int SimCalorimeterHitCollection::hit_size() const {
  return hit_.size();
}
inline void SimCalorimeterHitCollection::clear_hit() {
  hit_.Clear();
}
inline const ::eicio::SimCalorimeterHit& SimCalorimeterHitCollection::hit(int index) const {
  // @@protoc_insertion_point(field_get:eicio.SimCalorimeterHitCollection.hit)
  return hit_.Get(index);
}
inline ::eicio::SimCalorimeterHit* SimCalorimeterHitCollection::mutable_hit(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.SimCalorimeterHitCollection.hit)
  return hit_.Mutable(index);
}
inline ::eicio::SimCalorimeterHit* SimCalorimeterHitCollection::add_hit() {
  // @@protoc_insertion_point(field_add:eicio.SimCalorimeterHitCollection.hit)
  return hit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit >*
SimCalorimeterHitCollection::mutable_hit() {
  // @@protoc_insertion_point(field_mutable_list:eicio.SimCalorimeterHitCollection.hit)
  return &hit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::SimCalorimeterHit >&
SimCalorimeterHitCollection::hit() const {
  // @@protoc_insertion_point(field_list:eicio.SimCalorimeterHitCollection.hit)
  return hit_;
}

// -------------------------------------------------------------------

// RawCalorimeterHit

// int32 cellID0 = 1;
inline void RawCalorimeterHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.RawCalorimeterHit.cellID0)
  return cellid0_;
}
inline void RawCalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.RawCalorimeterHit.cellID0)
}

// int32 cellID1 = 2;
inline void RawCalorimeterHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.RawCalorimeterHit.cellID1)
  return cellid1_;
}
inline void RawCalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.RawCalorimeterHit.cellID1)
}

// int32 amplitude = 4;
inline void RawCalorimeterHit::clear_amplitude() {
  amplitude_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::amplitude() const {
  // @@protoc_insertion_point(field_get:eicio.RawCalorimeterHit.amplitude)
  return amplitude_;
}
inline void RawCalorimeterHit::set_amplitude(::google::protobuf::int32 value) {
  
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:eicio.RawCalorimeterHit.amplitude)
}

// int32 timeStamp = 5;
inline void RawCalorimeterHit::clear_timestamp() {
  timestamp_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHit::timestamp() const {
  // @@protoc_insertion_point(field_get:eicio.RawCalorimeterHit.timeStamp)
  return timestamp_;
}
inline void RawCalorimeterHit::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:eicio.RawCalorimeterHit.timeStamp)
}

// -------------------------------------------------------------------

// RawCalorimeterHitCollection

// int32 flags = 1;
inline void RawCalorimeterHitCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 RawCalorimeterHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.RawCalorimeterHitCollection.flags)
  return flags_;
}
inline void RawCalorimeterHitCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.RawCalorimeterHitCollection.flags)
}

// .eicio.Params params = 2;
inline bool RawCalorimeterHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void RawCalorimeterHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& RawCalorimeterHitCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.RawCalorimeterHitCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* RawCalorimeterHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.RawCalorimeterHitCollection.params)
  return params_;
}
inline ::eicio::Params* RawCalorimeterHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.RawCalorimeterHitCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void RawCalorimeterHitCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.RawCalorimeterHitCollection.params)
}

// repeated .eicio.RawCalorimeterHit hit = 3;
inline int RawCalorimeterHitCollection::hit_size() const {
  return hit_.size();
}
inline void RawCalorimeterHitCollection::clear_hit() {
  hit_.Clear();
}
inline const ::eicio::RawCalorimeterHit& RawCalorimeterHitCollection::hit(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RawCalorimeterHitCollection.hit)
  return hit_.Get(index);
}
inline ::eicio::RawCalorimeterHit* RawCalorimeterHitCollection::mutable_hit(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.RawCalorimeterHitCollection.hit)
  return hit_.Mutable(index);
}
inline ::eicio::RawCalorimeterHit* RawCalorimeterHitCollection::add_hit() {
  // @@protoc_insertion_point(field_add:eicio.RawCalorimeterHitCollection.hit)
  return hit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::RawCalorimeterHit >*
RawCalorimeterHitCollection::mutable_hit() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RawCalorimeterHitCollection.hit)
  return &hit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::RawCalorimeterHit >&
RawCalorimeterHitCollection::hit() const {
  // @@protoc_insertion_point(field_list:eicio.RawCalorimeterHitCollection.hit)
  return hit_;
}

// -------------------------------------------------------------------

// CalorimeterHit

// int32 cellID0 = 1;
inline void CalorimeterHit::clear_cellid0() {
  cellid0_ = 0;
}
inline ::google::protobuf::int32 CalorimeterHit::cellid0() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.cellID0)
  return cellid0_;
}
inline void CalorimeterHit::set_cellid0(::google::protobuf::int32 value) {
  
  cellid0_ = value;
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHit.cellID0)
}

// int32 cellID1 = 2;
inline void CalorimeterHit::clear_cellid1() {
  cellid1_ = 0;
}
inline ::google::protobuf::int32 CalorimeterHit::cellid1() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.cellID1)
  return cellid1_;
}
inline void CalorimeterHit::set_cellid1(::google::protobuf::int32 value) {
  
  cellid1_ = value;
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHit.cellID1)
}

// float energy = 3;
inline void CalorimeterHit::clear_energy() {
  energy_ = 0;
}
inline float CalorimeterHit::energy() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.energy)
  return energy_;
}
inline void CalorimeterHit::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHit.energy)
}

// float energyErr = 4;
inline void CalorimeterHit::clear_energyerr() {
  energyerr_ = 0;
}
inline float CalorimeterHit::energyerr() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.energyErr)
  return energyerr_;
}
inline void CalorimeterHit::set_energyerr(float value) {
  
  energyerr_ = value;
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHit.energyErr)
}

// float time = 5;
inline void CalorimeterHit::clear_time() {
  time_ = 0;
}
inline float CalorimeterHit::time() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.time)
  return time_;
}
inline void CalorimeterHit::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHit.time)
}

// repeated float pos = 6;
inline int CalorimeterHit::pos_size() const {
  return pos_.size();
}
inline void CalorimeterHit::clear_pos() {
  pos_.Clear();
}
inline float CalorimeterHit::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.pos)
  return pos_.Get(index);
}
inline void CalorimeterHit::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHit.pos)
}
inline void CalorimeterHit::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.CalorimeterHit.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
CalorimeterHit::pos() const {
  // @@protoc_insertion_point(field_list:eicio.CalorimeterHit.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
CalorimeterHit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.CalorimeterHit.pos)
  return &pos_;
}

// int32 type = 7;
inline void CalorimeterHit::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 CalorimeterHit::type() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.type)
  return type_;
}
inline void CalorimeterHit::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHit.type)
}

// .eicio.Reference raw = 8;
inline bool CalorimeterHit::has_raw() const {
  return this != internal_default_instance() && raw_ != NULL;
}
inline void CalorimeterHit::clear_raw() {
  if (GetArenaNoVirtual() == NULL && raw_ != NULL) delete raw_;
  raw_ = NULL;
}
inline const ::eicio::Reference& CalorimeterHit::raw() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHit.raw)
  return raw_ != NULL ? *raw_
                         : *::eicio::Reference::internal_default_instance();
}
inline ::eicio::Reference* CalorimeterHit::mutable_raw() {
  
  if (raw_ == NULL) {
    raw_ = new ::eicio::Reference;
  }
  // @@protoc_insertion_point(field_mutable:eicio.CalorimeterHit.raw)
  return raw_;
}
inline ::eicio::Reference* CalorimeterHit::release_raw() {
  // @@protoc_insertion_point(field_release:eicio.CalorimeterHit.raw)
  
  ::eicio::Reference* temp = raw_;
  raw_ = NULL;
  return temp;
}
inline void CalorimeterHit::set_allocated_raw(::eicio::Reference* raw) {
  delete raw_;
  raw_ = raw;
  if (raw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.CalorimeterHit.raw)
}

// -------------------------------------------------------------------

// CalorimeterHitCollection

// int32 flags = 1;
inline void CalorimeterHitCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 CalorimeterHitCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHitCollection.flags)
  return flags_;
}
inline void CalorimeterHitCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.CalorimeterHitCollection.flags)
}

// .eicio.Params params = 2;
inline bool CalorimeterHitCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void CalorimeterHitCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& CalorimeterHitCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHitCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* CalorimeterHitCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.CalorimeterHitCollection.params)
  return params_;
}
inline ::eicio::Params* CalorimeterHitCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.CalorimeterHitCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void CalorimeterHitCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.CalorimeterHitCollection.params)
}

// repeated .eicio.CalorimeterHit hit = 3;
inline int CalorimeterHitCollection::hit_size() const {
  return hit_.size();
}
inline void CalorimeterHitCollection::clear_hit() {
  hit_.Clear();
}
inline const ::eicio::CalorimeterHit& CalorimeterHitCollection::hit(int index) const {
  // @@protoc_insertion_point(field_get:eicio.CalorimeterHitCollection.hit)
  return hit_.Get(index);
}
inline ::eicio::CalorimeterHit* CalorimeterHitCollection::mutable_hit(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.CalorimeterHitCollection.hit)
  return hit_.Mutable(index);
}
inline ::eicio::CalorimeterHit* CalorimeterHitCollection::add_hit() {
  // @@protoc_insertion_point(field_add:eicio.CalorimeterHitCollection.hit)
  return hit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::CalorimeterHit >*
CalorimeterHitCollection::mutable_hit() {
  // @@protoc_insertion_point(field_mutable_list:eicio.CalorimeterHitCollection.hit)
  return &hit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::CalorimeterHit >&
CalorimeterHitCollection::hit() const {
  // @@protoc_insertion_point(field_list:eicio.CalorimeterHitCollection.hit)
  return hit_;
}

// -------------------------------------------------------------------

// Cluster

// int32 type = 1;
inline void Cluster::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Cluster::type() const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.type)
  return type_;
}
inline void Cluster::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.Cluster.type)
}

// float energy = 2;
inline void Cluster::clear_energy() {
  energy_ = 0;
}
inline float Cluster::energy() const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.energy)
  return energy_;
}
inline void Cluster::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:eicio.Cluster.energy)
}

// float energyErr = 3;
inline void Cluster::clear_energyerr() {
  energyerr_ = 0;
}
inline float Cluster::energyerr() const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.energyErr)
  return energyerr_;
}
inline void Cluster::set_energyerr(float value) {
  
  energyerr_ = value;
  // @@protoc_insertion_point(field_set:eicio.Cluster.energyErr)
}

// repeated float pos = 4;
inline int Cluster::pos_size() const {
  return pos_.size();
}
inline void Cluster::clear_pos() {
  pos_.Clear();
}
inline float Cluster::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.pos)
  return pos_.Get(index);
}
inline void Cluster::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Cluster.pos)
}
inline void Cluster::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Cluster.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::pos() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.pos)
  return &pos_;
}

// repeated float posErr = 5;
inline int Cluster::poserr_size() const {
  return poserr_.size();
}
inline void Cluster::clear_poserr() {
  poserr_.Clear();
}
inline float Cluster::poserr(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.posErr)
  return poserr_.Get(index);
}
inline void Cluster::set_poserr(int index, float value) {
  poserr_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Cluster.posErr)
}
inline void Cluster::add_poserr(float value) {
  poserr_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Cluster.posErr)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::poserr() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.posErr)
  return poserr_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_poserr() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.posErr)
  return &poserr_;
}

// float theta = 6;
inline void Cluster::clear_theta() {
  theta_ = 0;
}
inline float Cluster::theta() const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.theta)
  return theta_;
}
inline void Cluster::set_theta(float value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:eicio.Cluster.theta)
}

// float phi = 7;
inline void Cluster::clear_phi() {
  phi_ = 0;
}
inline float Cluster::phi() const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.phi)
  return phi_;
}
inline void Cluster::set_phi(float value) {
  
  phi_ = value;
  // @@protoc_insertion_point(field_set:eicio.Cluster.phi)
}

// repeated float dirErr = 8;
inline int Cluster::direrr_size() const {
  return direrr_.size();
}
inline void Cluster::clear_direrr() {
  direrr_.Clear();
}
inline float Cluster::direrr(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.dirErr)
  return direrr_.Get(index);
}
inline void Cluster::set_direrr(int index, float value) {
  direrr_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Cluster.dirErr)
}
inline void Cluster::add_direrr(float value) {
  direrr_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Cluster.dirErr)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::direrr() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.dirErr)
  return direrr_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_direrr() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.dirErr)
  return &direrr_;
}

// repeated float shape = 9;
inline int Cluster::shape_size() const {
  return shape_.size();
}
inline void Cluster::clear_shape() {
  shape_.Clear();
}
inline float Cluster::shape(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.shape)
  return shape_.Get(index);
}
inline void Cluster::set_shape(int index, float value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Cluster.shape)
}
inline void Cluster::add_shape(float value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Cluster.shape)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::shape() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.shape)
  return &shape_;
}

// repeated .eicio.ParticleID PIDs = 10;
inline int Cluster::pids_size() const {
  return pids_.size();
}
inline void Cluster::clear_pids() {
  pids_.Clear();
}
inline const ::eicio::ParticleID& Cluster::pids(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.PIDs)
  return pids_.Get(index);
}
inline ::eicio::ParticleID* Cluster::mutable_pids(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.Cluster.PIDs)
  return pids_.Mutable(index);
}
inline ::eicio::ParticleID* Cluster::add_pids() {
  // @@protoc_insertion_point(field_add:eicio.Cluster.PIDs)
  return pids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >*
Cluster::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.PIDs)
  return &pids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >&
Cluster::pids() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.PIDs)
  return pids_;
}

// repeated .eicio.Reference hits = 11;
inline int Cluster::hits_size() const {
  return hits_.size();
}
inline void Cluster::clear_hits() {
  hits_.Clear();
}
inline const ::eicio::Reference& Cluster::hits(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.hits)
  return hits_.Get(index);
}
inline ::eicio::Reference* Cluster::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.Cluster.hits)
  return hits_.Mutable(index);
}
inline ::eicio::Reference* Cluster::add_hits() {
  // @@protoc_insertion_point(field_add:eicio.Cluster.hits)
  return hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
Cluster::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.hits)
  return &hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
Cluster::hits() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.hits)
  return hits_;
}

// repeated float weights = 12;
inline int Cluster::weights_size() const {
  return weights_.size();
}
inline void Cluster::clear_weights() {
  weights_.Clear();
}
inline float Cluster::weights(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.weights)
  return weights_.Get(index);
}
inline void Cluster::set_weights(int index, float value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Cluster.weights)
}
inline void Cluster::add_weights(float value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Cluster.weights)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::weights() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.weights)
  return weights_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.weights)
  return &weights_;
}

// repeated float subDetEnes = 13;
inline int Cluster::subdetenes_size() const {
  return subdetenes_.size();
}
inline void Cluster::clear_subdetenes() {
  subdetenes_.Clear();
}
inline float Cluster::subdetenes(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Cluster.subDetEnes)
  return subdetenes_.Get(index);
}
inline void Cluster::set_subdetenes(int index, float value) {
  subdetenes_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Cluster.subDetEnes)
}
inline void Cluster::add_subdetenes(float value) {
  subdetenes_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Cluster.subDetEnes)
}
inline const ::google::protobuf::RepeatedField< float >&
Cluster::subdetenes() const {
  // @@protoc_insertion_point(field_list:eicio.Cluster.subDetEnes)
  return subdetenes_;
}
inline ::google::protobuf::RepeatedField< float >*
Cluster::mutable_subdetenes() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Cluster.subDetEnes)
  return &subdetenes_;
}

// -------------------------------------------------------------------

// ClusterCollection

// int32 flags = 1;
inline void ClusterCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 ClusterCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.ClusterCollection.flags)
  return flags_;
}
inline void ClusterCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.ClusterCollection.flags)
}

// .eicio.Params params = 2;
inline bool ClusterCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void ClusterCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& ClusterCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.ClusterCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* ClusterCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.ClusterCollection.params)
  return params_;
}
inline ::eicio::Params* ClusterCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.ClusterCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void ClusterCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.ClusterCollection.params)
}

// repeated .eicio.Cluster cluster = 3;
inline int ClusterCollection::cluster_size() const {
  return cluster_.size();
}
inline void ClusterCollection::clear_cluster() {
  cluster_.Clear();
}
inline const ::eicio::Cluster& ClusterCollection::cluster(int index) const {
  // @@protoc_insertion_point(field_get:eicio.ClusterCollection.cluster)
  return cluster_.Get(index);
}
inline ::eicio::Cluster* ClusterCollection::mutable_cluster(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.ClusterCollection.cluster)
  return cluster_.Mutable(index);
}
inline ::eicio::Cluster* ClusterCollection::add_cluster() {
  // @@protoc_insertion_point(field_add:eicio.ClusterCollection.cluster)
  return cluster_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Cluster >*
ClusterCollection::mutable_cluster() {
  // @@protoc_insertion_point(field_mutable_list:eicio.ClusterCollection.cluster)
  return &cluster_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Cluster >&
ClusterCollection::cluster() const {
  // @@protoc_insertion_point(field_list:eicio.ClusterCollection.cluster)
  return cluster_;
}

// -------------------------------------------------------------------

// RecParticle

// int32 type = 1;
inline void RecParticle::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 RecParticle::type() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.type)
  return type_;
}
inline void RecParticle::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:eicio.RecParticle.type)
}

// repeated float p = 2;
inline int RecParticle::p_size() const {
  return p_.size();
}
inline void RecParticle::clear_p() {
  p_.Clear();
}
inline float RecParticle::p(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.p)
  return p_.Get(index);
}
inline void RecParticle::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.RecParticle.p)
}
inline void RecParticle::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.RecParticle.p)
}
inline const ::google::protobuf::RepeatedField< float >&
RecParticle::p() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticle.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< float >*
RecParticle::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticle.p)
  return &p_;
}

// float energy = 3;
inline void RecParticle::clear_energy() {
  energy_ = 0;
}
inline float RecParticle::energy() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.energy)
  return energy_;
}
inline void RecParticle::set_energy(float value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:eicio.RecParticle.energy)
}

// repeated float cov = 4;
inline int RecParticle::cov_size() const {
  return cov_.size();
}
inline void RecParticle::clear_cov() {
  cov_.Clear();
}
inline float RecParticle::cov(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.cov)
  return cov_.Get(index);
}
inline void RecParticle::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.RecParticle.cov)
}
inline void RecParticle::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.RecParticle.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
RecParticle::cov() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticle.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
RecParticle::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticle.cov)
  return &cov_;
}

// float mass = 5;
inline void RecParticle::clear_mass() {
  mass_ = 0;
}
inline float RecParticle::mass() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.mass)
  return mass_;
}
inline void RecParticle::set_mass(float value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:eicio.RecParticle.mass)
}

// float charge = 6;
inline void RecParticle::clear_charge() {
  charge_ = 0;
}
inline float RecParticle::charge() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.charge)
  return charge_;
}
inline void RecParticle::set_charge(float value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:eicio.RecParticle.charge)
}

// repeated float ref = 7;
inline int RecParticle::ref_size() const {
  return ref_.size();
}
inline void RecParticle::clear_ref() {
  ref_.Clear();
}
inline float RecParticle::ref(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.ref)
  return ref_.Get(index);
}
inline void RecParticle::set_ref(int index, float value) {
  ref_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.RecParticle.ref)
}
inline void RecParticle::add_ref(float value) {
  ref_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.RecParticle.ref)
}
inline const ::google::protobuf::RepeatedField< float >&
RecParticle::ref() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticle.ref)
  return ref_;
}
inline ::google::protobuf::RepeatedField< float >*
RecParticle::mutable_ref() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticle.ref)
  return &ref_;
}

// repeated .eicio.ParticleID PIDs = 8;
inline int RecParticle::pids_size() const {
  return pids_.size();
}
inline void RecParticle::clear_pids() {
  pids_.Clear();
}
inline const ::eicio::ParticleID& RecParticle::pids(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.PIDs)
  return pids_.Get(index);
}
inline ::eicio::ParticleID* RecParticle::mutable_pids(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.RecParticle.PIDs)
  return pids_.Mutable(index);
}
inline ::eicio::ParticleID* RecParticle::add_pids() {
  // @@protoc_insertion_point(field_add:eicio.RecParticle.PIDs)
  return pids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >*
RecParticle::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticle.PIDs)
  return &pids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::ParticleID >&
RecParticle::pids() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticle.PIDs)
  return pids_;
}

// int32 PIDUsed = 9;
inline void RecParticle::clear_pidused() {
  pidused_ = 0;
}
inline ::google::protobuf::int32 RecParticle::pidused() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.PIDUsed)
  return pidused_;
}
inline void RecParticle::set_pidused(::google::protobuf::int32 value) {
  
  pidused_ = value;
  // @@protoc_insertion_point(field_set:eicio.RecParticle.PIDUsed)
}

// float goodnessOfPID = 10;
inline void RecParticle::clear_goodnessofpid() {
  goodnessofpid_ = 0;
}
inline float RecParticle::goodnessofpid() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.goodnessOfPID)
  return goodnessofpid_;
}
inline void RecParticle::set_goodnessofpid(float value) {
  
  goodnessofpid_ = value;
  // @@protoc_insertion_point(field_set:eicio.RecParticle.goodnessOfPID)
}

// repeated .eicio.Reference recs = 11;
inline int RecParticle::recs_size() const {
  return recs_.size();
}
inline void RecParticle::clear_recs() {
  recs_.Clear();
}
inline const ::eicio::Reference& RecParticle::recs(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.recs)
  return recs_.Get(index);
}
inline ::eicio::Reference* RecParticle::mutable_recs(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.RecParticle.recs)
  return recs_.Mutable(index);
}
inline ::eicio::Reference* RecParticle::add_recs() {
  // @@protoc_insertion_point(field_add:eicio.RecParticle.recs)
  return recs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
RecParticle::mutable_recs() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticle.recs)
  return &recs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
RecParticle::recs() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticle.recs)
  return recs_;
}

// repeated .eicio.Reference tracks = 12;
inline int RecParticle::tracks_size() const {
  return tracks_.size();
}
inline void RecParticle::clear_tracks() {
  tracks_.Clear();
}
inline const ::eicio::Reference& RecParticle::tracks(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.tracks)
  return tracks_.Get(index);
}
inline ::eicio::Reference* RecParticle::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.RecParticle.tracks)
  return tracks_.Mutable(index);
}
inline ::eicio::Reference* RecParticle::add_tracks() {
  // @@protoc_insertion_point(field_add:eicio.RecParticle.tracks)
  return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
RecParticle::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticle.tracks)
  return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
RecParticle::tracks() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticle.tracks)
  return tracks_;
}

// repeated .eicio.Reference clusters = 13;
inline int RecParticle::clusters_size() const {
  return clusters_.size();
}
inline void RecParticle::clear_clusters() {
  clusters_.Clear();
}
inline const ::eicio::Reference& RecParticle::clusters(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.clusters)
  return clusters_.Get(index);
}
inline ::eicio::Reference* RecParticle::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.RecParticle.clusters)
  return clusters_.Mutable(index);
}
inline ::eicio::Reference* RecParticle::add_clusters() {
  // @@protoc_insertion_point(field_add:eicio.RecParticle.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Reference >*
RecParticle::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticle.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Reference >&
RecParticle::clusters() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticle.clusters)
  return clusters_;
}

// .eicio.Reference startVtx = 14;
inline bool RecParticle::has_startvtx() const {
  return this != internal_default_instance() && startvtx_ != NULL;
}
inline void RecParticle::clear_startvtx() {
  if (GetArenaNoVirtual() == NULL && startvtx_ != NULL) delete startvtx_;
  startvtx_ = NULL;
}
inline const ::eicio::Reference& RecParticle::startvtx() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticle.startVtx)
  return startvtx_ != NULL ? *startvtx_
                         : *::eicio::Reference::internal_default_instance();
}
inline ::eicio::Reference* RecParticle::mutable_startvtx() {
  
  if (startvtx_ == NULL) {
    startvtx_ = new ::eicio::Reference;
  }
  // @@protoc_insertion_point(field_mutable:eicio.RecParticle.startVtx)
  return startvtx_;
}
inline ::eicio::Reference* RecParticle::release_startvtx() {
  // @@protoc_insertion_point(field_release:eicio.RecParticle.startVtx)
  
  ::eicio::Reference* temp = startvtx_;
  startvtx_ = NULL;
  return temp;
}
inline void RecParticle::set_allocated_startvtx(::eicio::Reference* startvtx) {
  delete startvtx_;
  startvtx_ = startvtx;
  if (startvtx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.RecParticle.startVtx)
}

// -------------------------------------------------------------------

// RecParticleCollection

// int32 flags = 1;
inline void RecParticleCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 RecParticleCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticleCollection.flags)
  return flags_;
}
inline void RecParticleCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.RecParticleCollection.flags)
}

// .eicio.Params params = 2;
inline bool RecParticleCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void RecParticleCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& RecParticleCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.RecParticleCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* RecParticleCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.RecParticleCollection.params)
  return params_;
}
inline ::eicio::Params* RecParticleCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.RecParticleCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void RecParticleCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.RecParticleCollection.params)
}

// repeated .eicio.RecParticle particle = 3;
inline int RecParticleCollection::particle_size() const {
  return particle_.size();
}
inline void RecParticleCollection::clear_particle() {
  particle_.Clear();
}
inline const ::eicio::RecParticle& RecParticleCollection::particle(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RecParticleCollection.particle)
  return particle_.Get(index);
}
inline ::eicio::RecParticle* RecParticleCollection::mutable_particle(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.RecParticleCollection.particle)
  return particle_.Mutable(index);
}
inline ::eicio::RecParticle* RecParticleCollection::add_particle() {
  // @@protoc_insertion_point(field_add:eicio.RecParticleCollection.particle)
  return particle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::RecParticle >*
RecParticleCollection::mutable_particle() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RecParticleCollection.particle)
  return &particle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::RecParticle >&
RecParticleCollection::particle() const {
  // @@protoc_insertion_point(field_list:eicio.RecParticleCollection.particle)
  return particle_;
}

// -------------------------------------------------------------------

// Vertex

// int32 primary = 1;
inline void Vertex::clear_primary() {
  primary_ = 0;
}
inline ::google::protobuf::int32 Vertex::primary() const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.primary)
  return primary_;
}
inline void Vertex::set_primary(::google::protobuf::int32 value) {
  
  primary_ = value;
  // @@protoc_insertion_point(field_set:eicio.Vertex.primary)
}

// int32 algType = 2;
inline void Vertex::clear_algtype() {
  algtype_ = 0;
}
inline ::google::protobuf::int32 Vertex::algtype() const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.algType)
  return algtype_;
}
inline void Vertex::set_algtype(::google::protobuf::int32 value) {
  
  algtype_ = value;
  // @@protoc_insertion_point(field_set:eicio.Vertex.algType)
}

// float chi2 = 3;
inline void Vertex::clear_chi2() {
  chi2_ = 0;
}
inline float Vertex::chi2() const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.chi2)
  return chi2_;
}
inline void Vertex::set_chi2(float value) {
  
  chi2_ = value;
  // @@protoc_insertion_point(field_set:eicio.Vertex.chi2)
}

// float prob = 4;
inline void Vertex::clear_prob() {
  prob_ = 0;
}
inline float Vertex::prob() const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.prob)
  return prob_;
}
inline void Vertex::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:eicio.Vertex.prob)
}

// repeated float pos = 5;
inline int Vertex::pos_size() const {
  return pos_.size();
}
inline void Vertex::clear_pos() {
  pos_.Clear();
}
inline float Vertex::pos(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.pos)
  return pos_.Get(index);
}
inline void Vertex::set_pos(int index, float value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Vertex.pos)
}
inline void Vertex::add_pos(float value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Vertex.pos)
}
inline const ::google::protobuf::RepeatedField< float >&
Vertex::pos() const {
  // @@protoc_insertion_point(field_list:eicio.Vertex.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< float >*
Vertex::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Vertex.pos)
  return &pos_;
}

// repeated float cov = 6;
inline int Vertex::cov_size() const {
  return cov_.size();
}
inline void Vertex::clear_cov() {
  cov_.Clear();
}
inline float Vertex::cov(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.cov)
  return cov_.Get(index);
}
inline void Vertex::set_cov(int index, float value) {
  cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Vertex.cov)
}
inline void Vertex::add_cov(float value) {
  cov_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Vertex.cov)
}
inline const ::google::protobuf::RepeatedField< float >&
Vertex::cov() const {
  // @@protoc_insertion_point(field_list:eicio.Vertex.cov)
  return cov_;
}
inline ::google::protobuf::RepeatedField< float >*
Vertex::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Vertex.cov)
  return &cov_;
}

// repeated float params = 7;
inline int Vertex::params_size() const {
  return params_.size();
}
inline void Vertex::clear_params() {
  params_.Clear();
}
inline float Vertex::params(int index) const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.params)
  return params_.Get(index);
}
inline void Vertex::set_params(int index, float value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:eicio.Vertex.params)
}
inline void Vertex::add_params(float value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:eicio.Vertex.params)
}
inline const ::google::protobuf::RepeatedField< float >&
Vertex::params() const {
  // @@protoc_insertion_point(field_list:eicio.Vertex.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< float >*
Vertex::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:eicio.Vertex.params)
  return &params_;
}

// .eicio.Reference recPart = 8;
inline bool Vertex::has_recpart() const {
  return this != internal_default_instance() && recpart_ != NULL;
}
inline void Vertex::clear_recpart() {
  if (GetArenaNoVirtual() == NULL && recpart_ != NULL) delete recpart_;
  recpart_ = NULL;
}
inline const ::eicio::Reference& Vertex::recpart() const {
  // @@protoc_insertion_point(field_get:eicio.Vertex.recPart)
  return recpart_ != NULL ? *recpart_
                         : *::eicio::Reference::internal_default_instance();
}
inline ::eicio::Reference* Vertex::mutable_recpart() {
  
  if (recpart_ == NULL) {
    recpart_ = new ::eicio::Reference;
  }
  // @@protoc_insertion_point(field_mutable:eicio.Vertex.recPart)
  return recpart_;
}
inline ::eicio::Reference* Vertex::release_recpart() {
  // @@protoc_insertion_point(field_release:eicio.Vertex.recPart)
  
  ::eicio::Reference* temp = recpart_;
  recpart_ = NULL;
  return temp;
}
inline void Vertex::set_allocated_recpart(::eicio::Reference* recpart) {
  delete recpart_;
  recpart_ = recpart;
  if (recpart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.Vertex.recPart)
}

// -------------------------------------------------------------------

// VertexCollection

// int32 flags = 1;
inline void VertexCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 VertexCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.VertexCollection.flags)
  return flags_;
}
inline void VertexCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.VertexCollection.flags)
}

// .eicio.Params params = 2;
inline bool VertexCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void VertexCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& VertexCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.VertexCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* VertexCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.VertexCollection.params)
  return params_;
}
inline ::eicio::Params* VertexCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.VertexCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void VertexCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.VertexCollection.params)
}

// repeated .eicio.Vertex vertex = 3;
inline int VertexCollection::vertex_size() const {
  return vertex_.size();
}
inline void VertexCollection::clear_vertex() {
  vertex_.Clear();
}
inline const ::eicio::Vertex& VertexCollection::vertex(int index) const {
  // @@protoc_insertion_point(field_get:eicio.VertexCollection.vertex)
  return vertex_.Get(index);
}
inline ::eicio::Vertex* VertexCollection::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.VertexCollection.vertex)
  return vertex_.Mutable(index);
}
inline ::eicio::Vertex* VertexCollection::add_vertex() {
  // @@protoc_insertion_point(field_add:eicio.VertexCollection.vertex)
  return vertex_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Vertex >*
VertexCollection::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:eicio.VertexCollection.vertex)
  return &vertex_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Vertex >&
VertexCollection::vertex() const {
  // @@protoc_insertion_point(field_list:eicio.VertexCollection.vertex)
  return vertex_;
}

// -------------------------------------------------------------------

// Relation

// .eicio.Reference from = 1;
inline bool Relation::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void Relation::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) delete from_;
  from_ = NULL;
}
inline const ::eicio::Reference& Relation::from() const {
  // @@protoc_insertion_point(field_get:eicio.Relation.from)
  return from_ != NULL ? *from_
                         : *::eicio::Reference::internal_default_instance();
}
inline ::eicio::Reference* Relation::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::eicio::Reference;
  }
  // @@protoc_insertion_point(field_mutable:eicio.Relation.from)
  return from_;
}
inline ::eicio::Reference* Relation::release_from() {
  // @@protoc_insertion_point(field_release:eicio.Relation.from)
  
  ::eicio::Reference* temp = from_;
  from_ = NULL;
  return temp;
}
inline void Relation::set_allocated_from(::eicio::Reference* from) {
  delete from_;
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.Relation.from)
}

// .eicio.Reference to = 2;
inline bool Relation::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline void Relation::clear_to() {
  if (GetArenaNoVirtual() == NULL && to_ != NULL) delete to_;
  to_ = NULL;
}
inline const ::eicio::Reference& Relation::to() const {
  // @@protoc_insertion_point(field_get:eicio.Relation.to)
  return to_ != NULL ? *to_
                         : *::eicio::Reference::internal_default_instance();
}
inline ::eicio::Reference* Relation::mutable_to() {
  
  if (to_ == NULL) {
    to_ = new ::eicio::Reference;
  }
  // @@protoc_insertion_point(field_mutable:eicio.Relation.to)
  return to_;
}
inline ::eicio::Reference* Relation::release_to() {
  // @@protoc_insertion_point(field_release:eicio.Relation.to)
  
  ::eicio::Reference* temp = to_;
  to_ = NULL;
  return temp;
}
inline void Relation::set_allocated_to(::eicio::Reference* to) {
  delete to_;
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.Relation.to)
}

// float weight = 3;
inline void Relation::clear_weight() {
  weight_ = 0;
}
inline float Relation::weight() const {
  // @@protoc_insertion_point(field_get:eicio.Relation.weight)
  return weight_;
}
inline void Relation::set_weight(float value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:eicio.Relation.weight)
}

// -------------------------------------------------------------------

// RelationCollection

// int32 flags = 1;
inline void RelationCollection::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 RelationCollection::flags() const {
  // @@protoc_insertion_point(field_get:eicio.RelationCollection.flags)
  return flags_;
}
inline void RelationCollection::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:eicio.RelationCollection.flags)
}

// .eicio.Params params = 2;
inline bool RelationCollection::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline void RelationCollection::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) delete params_;
  params_ = NULL;
}
inline const ::eicio::Params& RelationCollection::params() const {
  // @@protoc_insertion_point(field_get:eicio.RelationCollection.params)
  return params_ != NULL ? *params_
                         : *::eicio::Params::internal_default_instance();
}
inline ::eicio::Params* RelationCollection::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::eicio::Params;
  }
  // @@protoc_insertion_point(field_mutable:eicio.RelationCollection.params)
  return params_;
}
inline ::eicio::Params* RelationCollection::release_params() {
  // @@protoc_insertion_point(field_release:eicio.RelationCollection.params)
  
  ::eicio::Params* temp = params_;
  params_ = NULL;
  return temp;
}
inline void RelationCollection::set_allocated_params(::eicio::Params* params) {
  delete params_;
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:eicio.RelationCollection.params)
}

// repeated .eicio.Relation relation = 3;
inline int RelationCollection::relation_size() const {
  return relation_.size();
}
inline void RelationCollection::clear_relation() {
  relation_.Clear();
}
inline const ::eicio::Relation& RelationCollection::relation(int index) const {
  // @@protoc_insertion_point(field_get:eicio.RelationCollection.relation)
  return relation_.Get(index);
}
inline ::eicio::Relation* RelationCollection::mutable_relation(int index) {
  // @@protoc_insertion_point(field_mutable:eicio.RelationCollection.relation)
  return relation_.Mutable(index);
}
inline ::eicio::Relation* RelationCollection::add_relation() {
  // @@protoc_insertion_point(field_add:eicio.RelationCollection.relation)
  return relation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::eicio::Relation >*
RelationCollection::mutable_relation() {
  // @@protoc_insertion_point(field_mutable_list:eicio.RelationCollection.relation)
  return &relation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::eicio::Relation >&
RelationCollection::relation() const {
  // @@protoc_insertion_point(field_list:eicio.RelationCollection.relation)
  return relation_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace eicio

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::eicio::EventHeader_CollectionHeader_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eicio::EventHeader_CollectionHeader_Type>() {
  return ::eicio::EventHeader_CollectionHeader_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_eicio_2eproto__INCLUDED
