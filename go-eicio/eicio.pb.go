// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eicio.proto

/*
Package eicio is a generated protocol buffer package.

It is generated from these files:
	eicio.proto

It has these top-level messages:
	EventHeader
	MCParticle
	MCParticleCollection
	SimTrackerHit
	SimTrackerHitCollection
*/
package eicio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventHeader_CollectionHeader_Type int32

const (
	EventHeader_CollectionHeader_NONE                EventHeader_CollectionHeader_Type = 0
	EventHeader_CollectionHeader_MCParticle          EventHeader_CollectionHeader_Type = 1
	EventHeader_CollectionHeader_SimTrackerHit       EventHeader_CollectionHeader_Type = 2
	EventHeader_CollectionHeader_TrackerData         EventHeader_CollectionHeader_Type = 3
	EventHeader_CollectionHeader_TrackerRawData      EventHeader_CollectionHeader_Type = 4
	EventHeader_CollectionHeader_TrackerHit          EventHeader_CollectionHeader_Type = 5
	EventHeader_CollectionHeader_TrackerPulse        EventHeader_CollectionHeader_Type = 6
	EventHeader_CollectionHeader_TrackerHitPlane     EventHeader_CollectionHeader_Type = 7
	EventHeader_CollectionHeader_TrackerHitZCylinder EventHeader_CollectionHeader_Type = 8
	EventHeader_CollectionHeader_Track               EventHeader_CollectionHeader_Type = 9
	EventHeader_CollectionHeader_SimCalorimeterHit   EventHeader_CollectionHeader_Type = 10
	EventHeader_CollectionHeader_RawCalorimeterHit   EventHeader_CollectionHeader_Type = 11
	EventHeader_CollectionHeader_CalorimeterHit      EventHeader_CollectionHeader_Type = 12
	EventHeader_CollectionHeader_Cluster             EventHeader_CollectionHeader_Type = 13
	EventHeader_CollectionHeader_RecParticle         EventHeader_CollectionHeader_Type = 14
	EventHeader_CollectionHeader_Vertex              EventHeader_CollectionHeader_Type = 15
	EventHeader_CollectionHeader_References          EventHeader_CollectionHeader_Type = 16
	EventHeader_CollectionHeader_Relation            EventHeader_CollectionHeader_Type = 17
)

var EventHeader_CollectionHeader_Type_name = map[int32]string{
	0:  "NONE",
	1:  "MCParticle",
	2:  "SimTrackerHit",
	3:  "TrackerData",
	4:  "TrackerRawData",
	5:  "TrackerHit",
	6:  "TrackerPulse",
	7:  "TrackerHitPlane",
	8:  "TrackerHitZCylinder",
	9:  "Track",
	10: "SimCalorimeterHit",
	11: "RawCalorimeterHit",
	12: "CalorimeterHit",
	13: "Cluster",
	14: "RecParticle",
	15: "Vertex",
	16: "References",
	17: "Relation",
}
var EventHeader_CollectionHeader_Type_value = map[string]int32{
	"NONE":                0,
	"MCParticle":          1,
	"SimTrackerHit":       2,
	"TrackerData":         3,
	"TrackerRawData":      4,
	"TrackerHit":          5,
	"TrackerPulse":        6,
	"TrackerHitPlane":     7,
	"TrackerHitZCylinder": 8,
	"Track":               9,
	"SimCalorimeterHit":   10,
	"RawCalorimeterHit":   11,
	"CalorimeterHit":      12,
	"Cluster":             13,
	"RecParticle":         14,
	"Vertex":              15,
	"References":          16,
	"Relation":            17,
}

func (x EventHeader_CollectionHeader_Type) String() string {
	return proto.EnumName(EventHeader_CollectionHeader_Type_name, int32(x))
}
func (EventHeader_CollectionHeader_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

type MCParticle_GenStatus int32

const (
	MCParticle_FINALSTATE    MCParticle_GenStatus = 0
	MCParticle_DOCUMENTATION MCParticle_GenStatus = 1
)

var MCParticle_GenStatus_name = map[int32]string{
	0: "FINALSTATE",
	1: "DOCUMENTATION",
}
var MCParticle_GenStatus_value = map[string]int32{
	"FINALSTATE":    0,
	"DOCUMENTATION": 1,
}

func (x MCParticle_GenStatus) String() string {
	return proto.EnumName(MCParticle_GenStatus_name, int32(x))
}
func (MCParticle_GenStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type EventHeader struct {
	Id          uint64                          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	VMajor      uint32                          `protobuf:"varint,2,opt,name=vMajor" json:"vMajor,omitempty"`
	VMinor      uint32                          `protobuf:"varint,3,opt,name=vMinor" json:"vMinor,omitempty"`
	Collections []*EventHeader_CollectionHeader `protobuf:"bytes,4,rep,name=collections" json:"collections,omitempty"`
}

func (m *EventHeader) Reset()                    { *m = EventHeader{} }
func (m *EventHeader) String() string            { return proto.CompactTextString(m) }
func (*EventHeader) ProtoMessage()               {}
func (*EventHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventHeader) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventHeader) GetVMajor() uint32 {
	if m != nil {
		return m.VMajor
	}
	return 0
}

func (m *EventHeader) GetVMinor() uint32 {
	if m != nil {
		return m.VMinor
	}
	return 0
}

func (m *EventHeader) GetCollections() []*EventHeader_CollectionHeader {
	if m != nil {
		return m.Collections
	}
	return nil
}

type EventHeader_CollectionHeader struct {
	Type        EventHeader_CollectionHeader_Type `protobuf:"varint,1,opt,name=type,enum=eicio.EventHeader_CollectionHeader_Type" json:"type,omitempty"`
	Name        string                            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PayloadSize uint32                            `protobuf:"varint,3,opt,name=payloadSize" json:"payloadSize,omitempty"`
}

func (m *EventHeader_CollectionHeader) Reset()                    { *m = EventHeader_CollectionHeader{} }
func (m *EventHeader_CollectionHeader) String() string            { return proto.CompactTextString(m) }
func (*EventHeader_CollectionHeader) ProtoMessage()               {}
func (*EventHeader_CollectionHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *EventHeader_CollectionHeader) GetType() EventHeader_CollectionHeader_Type {
	if m != nil {
		return m.Type
	}
	return EventHeader_CollectionHeader_NONE
}

func (m *EventHeader_CollectionHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventHeader_CollectionHeader) GetPayloadSize() uint32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type MCParticle struct {
	Parents   []int32              `protobuf:"varint,1,rep,packed,name=parents" json:"parents,omitempty"`
	Children  []int32              `protobuf:"varint,2,rep,packed,name=children" json:"children,omitempty"`
	PDG       int32                `protobuf:"varint,3,opt,name=PDG" json:"PDG,omitempty"`
	Vertex    []float64            `protobuf:"fixed64,4,rep,packed,name=vertex" json:"vertex,omitempty"`
	Time      float32              `protobuf:"fixed32,5,opt,name=time" json:"time,omitempty"`
	P         []float64            `protobuf:"fixed64,6,rep,packed,name=p" json:"p,omitempty"`
	Mass      float64              `protobuf:"fixed64,7,opt,name=mass" json:"mass,omitempty"`
	Charge    float32              `protobuf:"fixed32,8,opt,name=charge" json:"charge,omitempty"`
	PEndPoint []float64            `protobuf:"fixed64,9,rep,packed,name=PEndPoint" json:"PEndPoint,omitempty"`
	Spin      []float32            `protobuf:"fixed32,10,rep,packed,name=spin" json:"spin,omitempty"`
	ColorFlow []int32              `protobuf:"varint,11,rep,packed,name=colorFlow" json:"colorFlow,omitempty"`
	GenStatus MCParticle_GenStatus `protobuf:"varint,12,opt,name=genStatus,enum=eicio.MCParticle_GenStatus" json:"genStatus,omitempty"`
	SimStatus uint32               `protobuf:"varint,13,opt,name=simStatus" json:"simStatus,omitempty"`
}

func (m *MCParticle) Reset()                    { *m = MCParticle{} }
func (m *MCParticle) String() string            { return proto.CompactTextString(m) }
func (*MCParticle) ProtoMessage()               {}
func (*MCParticle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MCParticle) GetParents() []int32 {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *MCParticle) GetChildren() []int32 {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *MCParticle) GetPDG() int32 {
	if m != nil {
		return m.PDG
	}
	return 0
}

func (m *MCParticle) GetVertex() []float64 {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *MCParticle) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MCParticle) GetP() []float64 {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *MCParticle) GetMass() float64 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *MCParticle) GetCharge() float32 {
	if m != nil {
		return m.Charge
	}
	return 0
}

func (m *MCParticle) GetPEndPoint() []float64 {
	if m != nil {
		return m.PEndPoint
	}
	return nil
}

func (m *MCParticle) GetSpin() []float32 {
	if m != nil {
		return m.Spin
	}
	return nil
}

func (m *MCParticle) GetColorFlow() []int32 {
	if m != nil {
		return m.ColorFlow
	}
	return nil
}

func (m *MCParticle) GetGenStatus() MCParticle_GenStatus {
	if m != nil {
		return m.GenStatus
	}
	return MCParticle_FINALSTATE
}

func (m *MCParticle) GetSimStatus() uint32 {
	if m != nil {
		return m.SimStatus
	}
	return 0
}

type MCParticleCollection struct {
	Particles []*MCParticle `protobuf:"bytes,1,rep,name=particles" json:"particles,omitempty"`
}

func (m *MCParticleCollection) Reset()                    { *m = MCParticleCollection{} }
func (m *MCParticleCollection) String() string            { return proto.CompactTextString(m) }
func (*MCParticleCollection) ProtoMessage()               {}
func (*MCParticleCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MCParticleCollection) GetParticles() []*MCParticle {
	if m != nil {
		return m.Particles
	}
	return nil
}

type SimTrackerHit struct {
	CellID0    int32     `protobuf:"varint,1,opt,name=cellID0" json:"cellID0,omitempty"`
	CellID1    int32     `protobuf:"varint,2,opt,name=cellID1" json:"cellID1,omitempty"`
	Pos        []float64 `protobuf:"fixed64,3,rep,packed,name=pos" json:"pos,omitempty"`
	EDep       float32   `protobuf:"fixed32,4,opt,name=EDep" json:"EDep,omitempty"`
	Time       float32   `protobuf:"fixed32,5,opt,name=time" json:"time,omitempty"`
	Mc         uint32    `protobuf:"varint,6,opt,name=mc" json:"mc,omitempty"`
	P          float32   `protobuf:"fixed32,7,opt,name=p" json:"p,omitempty"`
	PathLength float32   `protobuf:"fixed32,8,opt,name=pathLength" json:"pathLength,omitempty"`
	Quality    int32     `protobuf:"varint,9,opt,name=quality" json:"quality,omitempty"`
}

func (m *SimTrackerHit) Reset()                    { *m = SimTrackerHit{} }
func (m *SimTrackerHit) String() string            { return proto.CompactTextString(m) }
func (*SimTrackerHit) ProtoMessage()               {}
func (*SimTrackerHit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SimTrackerHit) GetCellID0() int32 {
	if m != nil {
		return m.CellID0
	}
	return 0
}

func (m *SimTrackerHit) GetCellID1() int32 {
	if m != nil {
		return m.CellID1
	}
	return 0
}

func (m *SimTrackerHit) GetPos() []float64 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *SimTrackerHit) GetEDep() float32 {
	if m != nil {
		return m.EDep
	}
	return 0
}

func (m *SimTrackerHit) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SimTrackerHit) GetMc() uint32 {
	if m != nil {
		return m.Mc
	}
	return 0
}

func (m *SimTrackerHit) GetP() float32 {
	if m != nil {
		return m.P
	}
	return 0
}

func (m *SimTrackerHit) GetPathLength() float32 {
	if m != nil {
		return m.PathLength
	}
	return 0
}

func (m *SimTrackerHit) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

type SimTrackerHitCollection struct {
	Hits []*SimTrackerHit `protobuf:"bytes,1,rep,name=hits" json:"hits,omitempty"`
}

func (m *SimTrackerHitCollection) Reset()                    { *m = SimTrackerHitCollection{} }
func (m *SimTrackerHitCollection) String() string            { return proto.CompactTextString(m) }
func (*SimTrackerHitCollection) ProtoMessage()               {}
func (*SimTrackerHitCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SimTrackerHitCollection) GetHits() []*SimTrackerHit {
	if m != nil {
		return m.Hits
	}
	return nil
}

func init() {
	proto.RegisterType((*EventHeader)(nil), "eicio.EventHeader")
	proto.RegisterType((*EventHeader_CollectionHeader)(nil), "eicio.EventHeader.CollectionHeader")
	proto.RegisterType((*MCParticle)(nil), "eicio.MCParticle")
	proto.RegisterType((*MCParticleCollection)(nil), "eicio.MCParticleCollection")
	proto.RegisterType((*SimTrackerHit)(nil), "eicio.SimTrackerHit")
	proto.RegisterType((*SimTrackerHitCollection)(nil), "eicio.SimTrackerHitCollection")
	proto.RegisterEnum("eicio.EventHeader_CollectionHeader_Type", EventHeader_CollectionHeader_Type_name, EventHeader_CollectionHeader_Type_value)
	proto.RegisterEnum("eicio.MCParticle_GenStatus", MCParticle_GenStatus_name, MCParticle_GenStatus_value)
}

func init() { proto.RegisterFile("eicio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x92, 0xe3, 0x34,
	0x10, 0xc6, 0x3f, 0xf9, 0x71, 0x3b, 0xc9, 0x28, 0xda, 0x85, 0x55, 0x2d, 0x14, 0x95, 0x0a, 0x17,
	0x9f, 0x02, 0x3b, 0x9c, 0xa8, 0xe2, 0x32, 0x95, 0x64, 0x67, 0xa7, 0x6a, 0x27, 0x93, 0x52, 0x02,
	0x07, 0x6e, 0xc2, 0x69, 0x26, 0x02, 0xf9, 0x07, 0x59, 0xb3, 0x43, 0x78, 0x0d, 0x9e, 0x87, 0x2b,
	0x6f, 0xc0, 0x91, 0x77, 0xa1, 0x24, 0x3b, 0x71, 0x76, 0xe0, 0xb0, 0xb7, 0xfe, 0x3e, 0x7d, 0xdd,
	0x52, 0xf7, 0xd7, 0x36, 0xc4, 0x28, 0x53, 0x59, 0xcc, 0x4a, 0x5d, 0x98, 0x82, 0x76, 0x1c, 0x98,
	0xfe, 0x13, 0x42, 0xbc, 0x7c, 0x87, 0xb9, 0x79, 0x83, 0x62, 0x87, 0x9a, 0x8e, 0xc0, 0x97, 0x3b,
	0xe6, 0x4d, 0xbc, 0x24, 0xe4, 0xbe, 0xdc, 0xd1, 0x4f, 0xa0, 0xfb, 0xee, 0x56, 0xfc, 0x5c, 0x68,
	0xe6, 0x4f, 0xbc, 0x64, 0xc8, 0x1b, 0x54, 0xf3, 0x32, 0x2f, 0x34, 0x0b, 0x8e, 0xbc, 0x45, 0x74,
	0x09, 0x71, 0x5a, 0x28, 0x85, 0xa9, 0x91, 0x45, 0x5e, 0xb1, 0x70, 0x12, 0x24, 0xf1, 0xe5, 0x17,
	0xb3, 0xfa, 0xe6, 0xb3, 0x8b, 0x66, 0xf3, 0x93, 0xaa, 0x26, 0xf8, 0x79, 0xde, 0xcb, 0xbf, 0x02,
	0x20, 0x4f, 0x15, 0xf4, 0x5b, 0x08, 0xcd, 0xa1, 0x44, 0xf7, 0xba, 0xd1, 0x65, 0xf2, 0x01, 0x45,
	0x67, 0xdb, 0x43, 0x89, 0xdc, 0x65, 0x51, 0x0a, 0x61, 0x2e, 0x32, 0x74, 0x7d, 0x44, 0xdc, 0xc5,
	0x74, 0x02, 0x71, 0x29, 0x0e, 0xaa, 0x10, 0xbb, 0x8d, 0xfc, 0x1d, 0x9b, 0x56, 0xce, 0xa9, 0xe9,
	0x9f, 0x3e, 0x84, 0xb6, 0x08, 0xed, 0x43, 0xb8, 0xba, 0x5b, 0x2d, 0xc9, 0x47, 0x74, 0x04, 0x70,
	0x3b, 0x5f, 0x0b, 0x6d, 0x64, 0xaa, 0x90, 0x78, 0x74, 0x0c, 0xc3, 0x8d, 0xcc, 0xb6, 0x5a, 0xa4,
	0xbf, 0xa0, 0x7e, 0x23, 0x0d, 0xf1, 0xe9, 0x05, 0xc4, 0x0d, 0x5e, 0x08, 0x23, 0x48, 0x40, 0x29,
	0x8c, 0x1a, 0x82, 0x8b, 0x47, 0xc7, 0x85, 0xb6, 0xce, 0x59, 0x52, 0x87, 0x12, 0x18, 0x34, 0x78,
	0xfd, 0xa0, 0x2a, 0x24, 0x5d, 0xfa, 0x0c, 0x2e, 0x5a, 0xc5, 0x5a, 0x89, 0x1c, 0x49, 0x8f, 0xbe,
	0x80, 0x67, 0x2d, 0xf9, 0xc3, 0xfc, 0xa0, 0x64, 0xbe, 0x43, 0x4d, 0xfa, 0x34, 0x82, 0x8e, 0x3b,
	0x20, 0x11, 0xfd, 0x18, 0xc6, 0x1b, 0x99, 0xcd, 0x85, 0x2a, 0xb4, 0xcc, 0xd0, 0xd4, 0x37, 0x80,
	0xa5, 0xb9, 0x78, 0x7c, 0x42, 0xc7, 0xf6, 0x71, 0x4f, 0xb8, 0x01, 0x8d, 0xa1, 0x37, 0x57, 0x0f,
	0x95, 0x41, 0x4d, 0x86, 0xb6, 0x1d, 0x8e, 0xe9, 0xa9, 0xe5, 0x11, 0x05, 0xe8, 0x7e, 0x8f, 0xda,
	0xe0, 0x6f, 0xe4, 0xc2, 0xb6, 0xc1, 0xf1, 0x27, 0xd4, 0x98, 0xa7, 0x58, 0x11, 0x42, 0x07, 0xd0,
	0xe7, 0xa8, 0x84, 0x35, 0x81, 0x8c, 0xa7, 0x7f, 0x04, 0xe7, 0xd3, 0xa2, 0x0c, 0x7a, 0xa5, 0xd0,
	0x98, 0x9b, 0x8a, 0x79, 0x93, 0x20, 0xe9, 0xf0, 0x23, 0xa4, 0x2f, 0xa1, 0x9f, 0xee, 0xa5, 0xda,
	0x69, 0xcc, 0x99, 0xef, 0x8e, 0x4e, 0x98, 0x12, 0x08, 0xd6, 0x8b, 0x6b, 0x67, 0x4f, 0x87, 0xdb,
	0xd0, 0xad, 0x9f, 0x7b, 0x80, 0xdb, 0x30, 0x8f, 0x37, 0xc8, 0x9a, 0x6c, 0x64, 0x86, 0xac, 0x33,
	0xf1, 0x12, 0x9f, 0xbb, 0x98, 0x0e, 0xc0, 0x2b, 0x59, 0xd7, 0xc9, 0xbc, 0xd2, 0x2a, 0x32, 0x51,
	0x55, 0xac, 0x37, 0xf1, 0x12, 0x8f, 0xbb, 0xd8, 0x56, 0x4b, 0xf7, 0x42, 0xdf, 0x23, 0xeb, 0xbb,
	0xbc, 0x06, 0xd1, 0xcf, 0x20, 0x5a, 0x2f, 0xf3, 0xdd, 0xba, 0x90, 0xb9, 0x61, 0x91, 0xab, 0xd0,
	0x12, 0xb6, 0x52, 0x55, 0xca, 0x9c, 0xc1, 0x24, 0xb0, 0x77, 0xd9, 0xd8, 0x66, 0xa4, 0x85, 0x2a,
	0xf4, 0x6b, 0x55, 0x3c, 0xb2, 0xd8, 0xb5, 0xd1, 0x12, 0xf4, 0x1b, 0x88, 0xee, 0x31, 0xdf, 0x18,
	0x61, 0x1e, 0x2a, 0x36, 0x70, 0x5b, 0xfc, 0x69, 0xb3, 0xc5, 0xed, 0x8c, 0x66, 0xd7, 0x47, 0x09,
	0x6f, 0xd5, 0xb6, 0x70, 0x25, 0xb3, 0x26, 0x75, 0xe8, 0xf6, 0xb4, 0x25, 0xa6, 0x33, 0x88, 0x4e,
	0x59, 0xd6, 0x90, 0xd7, 0x37, 0xab, 0xab, 0xb7, 0x9b, 0xed, 0xd5, 0xd6, 0xee, 0xeb, 0x18, 0x86,
	0x8b, 0xbb, 0xf9, 0x77, 0xb7, 0xcb, 0xd5, 0xf6, 0x6a, 0x7b, 0x73, 0xb7, 0x22, 0xde, 0xf4, 0x1a,
	0x9e, 0xb7, 0x17, 0xb6, 0x1f, 0x0d, 0xfd, 0x12, 0xa2, 0xb2, 0x61, 0x6b, 0x83, 0xe2, 0xcb, 0xf1,
	0x7f, 0x1e, 0xc8, 0x5b, 0xcd, 0xf4, 0x6f, 0xef, 0xc9, 0xf2, 0x5b, 0x87, 0x53, 0x54, 0xea, 0x66,
	0xf1, 0x95, 0xfb, 0x4e, 0x3b, 0xfc, 0x08, 0xdb, 0x93, 0x57, 0xee, 0x1b, 0x3c, 0x9d, 0xbc, 0xb2,
	0xfe, 0x96, 0x45, 0xc5, 0x02, 0x37, 0x61, 0x1b, 0xda, 0xd9, 0x2e, 0x17, 0x58, 0xb2, 0xb0, 0xf6,
	0xd1, 0xc6, 0xff, 0xeb, 0xed, 0x08, 0xfc, 0x2c, 0x65, 0x5d, 0x37, 0x0f, 0x3f, 0x4b, 0x6b, 0xaf,
	0x7b, 0x4e, 0xe0, 0x95, 0xf4, 0x73, 0x80, 0x52, 0x98, 0xfd, 0x5b, 0xcc, 0xef, 0xcd, 0xbe, 0xf1,
	0xf6, 0x8c, 0xb1, 0x2f, 0xfa, 0xf5, 0x41, 0x28, 0x69, 0x0e, 0x2c, 0xaa, 0x5f, 0xd4, 0xc0, 0xe9,
	0x1c, 0x5e, 0xbc, 0xd7, 0xd6, 0xd9, 0x8c, 0x12, 0x08, 0xf7, 0xd2, 0x1c, 0xc7, 0xf3, 0xbc, 0x19,
	0xcf, 0x7b, 0x6a, 0xee, 0x14, 0x3f, 0x76, 0xdd, 0x9f, 0xf6, 0xeb, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x5e, 0x92, 0x83, 0xbc, 0x78, 0x05, 0x00, 0x00,
}
