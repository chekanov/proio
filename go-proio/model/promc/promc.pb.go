// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model/promc/promc.proto

/*
	Package promc is a generated protocol buffer package.

	It is generated from these files:
		model/promc/promc.proto

	It has these top-level messages:
		Particle
*/
package promc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Particle struct {
	GenId    uint32   `protobuf:"varint,1,opt,name=gen_id,json=genId,proto3" json:"gen_id,omitempty"`
	PdgId    int32    `protobuf:"zigzag32,2,opt,name=pdg_id,json=pdgId,proto3" json:"pdg_id,omitempty"`
	Status   uint32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Mass     uint64   `protobuf:"varint,4,opt,name=mass,proto3" json:"mass,omitempty"`
	Px       int64    `protobuf:"zigzag64,5,opt,name=Px,proto3" json:"Px,omitempty"`
	Py       int64    `protobuf:"zigzag64,6,opt,name=Py,proto3" json:"Py,omitempty"`
	Pz       int64    `protobuf:"zigzag64,7,opt,name=Pz,proto3" json:"Pz,omitempty"`
	Parents  []uint64 `protobuf:"varint,8,rep,packed,name=parents" json:"parents,omitempty"`
	Children []uint64 `protobuf:"varint,9,rep,packed,name=children" json:"children,omitempty"`
	Barcode  int32    `protobuf:"zigzag32,10,opt,name=barcode,proto3" json:"barcode,omitempty"`
	X        int32    `protobuf:"zigzag32,11,opt,name=X,proto3" json:"X,omitempty"`
	Y        int32    `protobuf:"zigzag32,12,opt,name=Y,proto3" json:"Y,omitempty"`
	Z        int32    `protobuf:"zigzag32,13,opt,name=Z,proto3" json:"Z,omitempty"`
	T        uint32   `protobuf:"varint,14,opt,name=T,proto3" json:"T,omitempty"`
	Weight   uint64   `protobuf:"varint,15,opt,name=weight,proto3" json:"weight,omitempty"`
	Charge   int32    `protobuf:"zigzag32,16,opt,name=charge,proto3" json:"charge,omitempty"`
	Energy   int64    `protobuf:"zigzag64,17,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (m *Particle) Reset()                    { *m = Particle{} }
func (m *Particle) String() string            { return proto.CompactTextString(m) }
func (*Particle) ProtoMessage()               {}
func (*Particle) Descriptor() ([]byte, []int) { return fileDescriptorPromc, []int{0} }

func (m *Particle) GetGenId() uint32 {
	if m != nil {
		return m.GenId
	}
	return 0
}

func (m *Particle) GetPdgId() int32 {
	if m != nil {
		return m.PdgId
	}
	return 0
}

func (m *Particle) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Particle) GetMass() uint64 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *Particle) GetPx() int64 {
	if m != nil {
		return m.Px
	}
	return 0
}

func (m *Particle) GetPy() int64 {
	if m != nil {
		return m.Py
	}
	return 0
}

func (m *Particle) GetPz() int64 {
	if m != nil {
		return m.Pz
	}
	return 0
}

func (m *Particle) GetParents() []uint64 {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *Particle) GetChildren() []uint64 {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Particle) GetBarcode() int32 {
	if m != nil {
		return m.Barcode
	}
	return 0
}

func (m *Particle) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Particle) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Particle) GetZ() int32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Particle) GetT() uint32 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *Particle) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Particle) GetCharge() int32 {
	if m != nil {
		return m.Charge
	}
	return 0
}

func (m *Particle) GetEnergy() int64 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func init() {
	proto.RegisterType((*Particle)(nil), "proio.model.promc.Particle")
}
func (m *Particle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Particle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GenId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromc(dAtA, i, uint64(m.GenId))
	}
	if m.PdgId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint32(m.PdgId)<<1)^uint32((m.PdgId>>31))))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromc(dAtA, i, uint64(m.Status))
	}
	if m.Mass != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromc(dAtA, i, uint64(m.Mass))
	}
	if m.Px != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint64(m.Px)<<1)^uint64((m.Px>>63))))
	}
	if m.Py != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint64(m.Py)<<1)^uint64((m.Py>>63))))
	}
	if m.Pz != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint64(m.Pz)<<1)^uint64((m.Pz>>63))))
	}
	if len(m.Parents) > 0 {
		dAtA2 := make([]byte, len(m.Parents)*10)
		var j1 int
		for _, num := range m.Parents {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintPromc(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Children) > 0 {
		dAtA4 := make([]byte, len(m.Children)*10)
		var j3 int
		for _, num := range m.Children {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPromc(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Barcode != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint32(m.Barcode)<<1)^uint32((m.Barcode>>31))))
	}
	if m.X != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint32(m.X)<<1)^uint32((m.X>>31))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint32(m.Y)<<1)^uint32((m.Y>>31))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint32(m.Z)<<1)^uint32((m.Z>>31))))
	}
	if m.T != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPromc(dAtA, i, uint64(m.T))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPromc(dAtA, i, uint64(m.Weight))
	}
	if m.Charge != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint32(m.Charge)<<1)^uint32((m.Charge>>31))))
	}
	if m.Energy != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPromc(dAtA, i, uint64((uint64(m.Energy)<<1)^uint64((m.Energy>>63))))
	}
	return i, nil
}

func encodeVarintPromc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Particle) Size() (n int) {
	var l int
	_ = l
	if m.GenId != 0 {
		n += 1 + sovPromc(uint64(m.GenId))
	}
	if m.PdgId != 0 {
		n += 1 + sozPromc(uint64(m.PdgId))
	}
	if m.Status != 0 {
		n += 1 + sovPromc(uint64(m.Status))
	}
	if m.Mass != 0 {
		n += 1 + sovPromc(uint64(m.Mass))
	}
	if m.Px != 0 {
		n += 1 + sozPromc(uint64(m.Px))
	}
	if m.Py != 0 {
		n += 1 + sozPromc(uint64(m.Py))
	}
	if m.Pz != 0 {
		n += 1 + sozPromc(uint64(m.Pz))
	}
	if len(m.Parents) > 0 {
		l = 0
		for _, e := range m.Parents {
			l += sovPromc(uint64(e))
		}
		n += 1 + sovPromc(uint64(l)) + l
	}
	if len(m.Children) > 0 {
		l = 0
		for _, e := range m.Children {
			l += sovPromc(uint64(e))
		}
		n += 1 + sovPromc(uint64(l)) + l
	}
	if m.Barcode != 0 {
		n += 1 + sozPromc(uint64(m.Barcode))
	}
	if m.X != 0 {
		n += 1 + sozPromc(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sozPromc(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sozPromc(uint64(m.Z))
	}
	if m.T != 0 {
		n += 1 + sovPromc(uint64(m.T))
	}
	if m.Weight != 0 {
		n += 1 + sovPromc(uint64(m.Weight))
	}
	if m.Charge != 0 {
		n += 2 + sozPromc(uint64(m.Charge))
	}
	if m.Energy != 0 {
		n += 2 + sozPromc(uint64(m.Energy))
	}
	return n
}

func sovPromc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPromc(x uint64) (n int) {
	return sovPromc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Particle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Particle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Particle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenId", wireType)
			}
			m.GenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdgId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.PdgId = v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			m.Mass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mass |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Px", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Px = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Py", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Py = int64(v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pz", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Pz = int64(v)
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPromc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parents = append(m.Parents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPromc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPromc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPromc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parents = append(m.Parents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parents", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPromc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Children = append(m.Children, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPromc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPromc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPromc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Children = append(m.Children, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Barcode = v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.X = v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Y = v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Z = v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Charge = v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Energy = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipPromc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPromc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPromc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPromc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPromc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPromc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPromc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPromc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model/promc/promc.proto", fileDescriptorPromc) }

var fileDescriptorPromc = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd1, 0x4f, 0x6e, 0xa3, 0x30,
	0x14, 0x06, 0xf0, 0x31, 0x01, 0x92, 0x71, 0xfe, 0xcc, 0xc4, 0xd2, 0xcc, 0x3c, 0xcd, 0x02, 0xa1,
	0xae, 0xd8, 0x14, 0x16, 0xb9, 0x41, 0x76, 0xd9, 0x21, 0x94, 0x45, 0x92, 0x4d, 0x05, 0xb6, 0x65,
	0x90, 0x00, 0x23, 0x43, 0xd4, 0x24, 0x27, 0xe9, 0x91, 0xba, 0xec, 0x11, 0xaa, 0xb4, 0x07, 0xa9,
	0x6c, 0x48, 0x95, 0x0d, 0xf2, 0xef, 0x7b, 0xb6, 0xc4, 0xd3, 0x87, 0xff, 0x55, 0x92, 0xf1, 0x32,
	0x6a, 0x94, 0xac, 0x68, 0xff, 0x0d, 0x1b, 0x25, 0x3b, 0x49, 0x96, 0x8d, 0x92, 0x85, 0x0c, 0xcd,
	0x38, 0x34, 0x83, 0x87, 0x4f, 0x0b, 0x4f, 0xe2, 0x54, 0x75, 0x05, 0x2d, 0x39, 0xf9, 0x83, 0x5d,
	0xc1, 0xeb, 0xa7, 0x82, 0x01, 0xf2, 0x51, 0x30, 0x4f, 0x1c, 0xc1, 0xeb, 0x0d, 0xd3, 0x71, 0xc3,
	0x84, 0x8e, 0x2d, 0x1f, 0x05, 0xcb, 0xc4, 0x69, 0x98, 0xd8, 0x30, 0xf2, 0x17, 0xbb, 0x6d, 0x97,
	0x76, 0xc7, 0x16, 0x46, 0xe6, 0xf6, 0x20, 0x42, 0xb0, 0x5d, 0xa5, 0x6d, 0x0b, 0xb6, 0x8f, 0x02,
	0x3b, 0x31, 0x67, 0xb2, 0xc0, 0x56, 0x7c, 0x02, 0xc7, 0x47, 0x01, 0x49, 0xac, 0xf8, 0x64, 0x7c,
	0x06, 0x77, 0xf0, 0xd9, 0xf8, 0x02, 0xe3, 0xc1, 0x17, 0x02, 0x78, 0xdc, 0xa4, 0x8a, 0xd7, 0x5d,
	0x0b, 0x13, 0x7f, 0x14, 0xd8, 0xc9, 0x8d, 0xe4, 0x3f, 0x9e, 0xd0, 0xbc, 0x28, 0x99, 0xe2, 0x35,
	0xfc, 0x34, 0xa3, 0x6f, 0xeb, 0x57, 0x59, 0xaa, 0xa8, 0x64, 0x1c, 0xb0, 0xf9, 0xd3, 0x1b, 0xc9,
	0x0c, 0xa3, 0x1d, 0x4c, 0x4d, 0x86, 0x76, 0x5a, 0x7b, 0x98, 0xf5, 0xda, 0x6b, 0x1d, 0x60, 0xde,
	0xeb, 0xa0, 0xb5, 0x85, 0x85, 0x59, 0x08, 0x6d, 0xf5, 0x8e, 0xcf, 0xbc, 0x10, 0x79, 0x07, 0xbf,
	0xcc, 0x36, 0x83, 0x74, 0x4e, 0xf3, 0x54, 0x09, 0x0e, 0xbf, 0xcd, 0xc3, 0x41, 0x3a, 0xe7, 0x35,
	0x57, 0xe2, 0x0c, 0x4b, 0xb3, 0xcb, 0xa0, 0xf5, 0xfe, 0xf5, 0xea, 0xa1, 0xb7, 0xab, 0x87, 0xde,
	0xaf, 0x1e, 0x7a, 0xf9, 0xf0, 0x7e, 0xe0, 0xe9, 0x5d, 0x17, 0x6b, 0x27, 0xd6, 0x65, 0x1c, 0x56,
	0xa2, 0xe8, 0xf2, 0x63, 0x16, 0x52, 0x59, 0x45, 0x8c, 0xd3, 0x22, 0xe3, 0x25, 0x95, 0xb2, 0xe1,
	0x2a, 0x32, 0x97, 0x23, 0x21, 0x1f, 0xfb, 0xc3, 0x5d, 0xc1, 0x99, 0x6b, 0xba, 0x5d, 0x7d, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x0c, 0x3e, 0xfc, 0xc4, 0xf6, 0x01, 0x00, 0x00,
}
