// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proio/model/proio.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		proio/model/proio.proto

	It has these top-level messages:
		EventHeader
		IntParams
		FloatParams
		StringParams
		Params
		Reference
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventHeader struct {
	Version            uint32                          `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	RunNumber          uint64                          `protobuf:"varint,2,opt,name=runNumber,proto3" json:"runNumber,omitempty"`
	EventNumber        uint64                          `protobuf:"varint,3,opt,name=eventNumber,proto3" json:"eventNumber,omitempty"`
	TimeStamp          uint64                          `protobuf:"varint,4,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Detector           string                          `protobuf:"bytes,5,opt,name=detector,proto3" json:"detector,omitempty"`
	Params             *Params                         `protobuf:"bytes,6,opt,name=params" json:"params,omitempty"`
	PayloadCollections []*EventHeader_CollectionHeader `protobuf:"bytes,7,rep,name=payloadCollections" json:"payloadCollections,omitempty"`
	NUniqueIDs         uint32                          `protobuf:"varint,8,opt,name=nUniqueIDs,proto3" json:"nUniqueIDs,omitempty"`
	Description        string                          `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *EventHeader) Reset()                    { *m = EventHeader{} }
func (m *EventHeader) String() string            { return proto.CompactTextString(m) }
func (*EventHeader) ProtoMessage()               {}
func (*EventHeader) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{0} }

func (m *EventHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *EventHeader) GetRunNumber() uint64 {
	if m != nil {
		return m.RunNumber
	}
	return 0
}

func (m *EventHeader) GetEventNumber() uint64 {
	if m != nil {
		return m.EventNumber
	}
	return 0
}

func (m *EventHeader) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *EventHeader) GetDetector() string {
	if m != nil {
		return m.Detector
	}
	return ""
}

func (m *EventHeader) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *EventHeader) GetPayloadCollections() []*EventHeader_CollectionHeader {
	if m != nil {
		return m.PayloadCollections
	}
	return nil
}

func (m *EventHeader) GetNUniqueIDs() uint32 {
	if m != nil {
		return m.NUniqueIDs
	}
	return 0
}

func (m *EventHeader) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type EventHeader_CollectionHeader struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	PayloadSize uint32 `protobuf:"varint,4,opt,name=payloadSize,proto3" json:"payloadSize,omitempty"`
}

func (m *EventHeader_CollectionHeader) Reset()         { *m = EventHeader_CollectionHeader{} }
func (m *EventHeader_CollectionHeader) String() string { return proto.CompactTextString(m) }
func (*EventHeader_CollectionHeader) ProtoMessage()    {}
func (*EventHeader_CollectionHeader) Descriptor() ([]byte, []int) {
	return fileDescriptorProio, []int{0, 0}
}

func (m *EventHeader_CollectionHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventHeader_CollectionHeader) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventHeader_CollectionHeader) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventHeader_CollectionHeader) GetPayloadSize() uint32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type IntParams struct {
	Array []int32 `protobuf:"varint,1,rep,packed,name=array" json:"array,omitempty"`
}

func (m *IntParams) Reset()                    { *m = IntParams{} }
func (m *IntParams) String() string            { return proto.CompactTextString(m) }
func (*IntParams) ProtoMessage()               {}
func (*IntParams) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{1} }

func (m *IntParams) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

type FloatParams struct {
	Array []float32 `protobuf:"fixed32,1,rep,packed,name=array" json:"array,omitempty"`
}

func (m *FloatParams) Reset()                    { *m = FloatParams{} }
func (m *FloatParams) String() string            { return proto.CompactTextString(m) }
func (*FloatParams) ProtoMessage()               {}
func (*FloatParams) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{2} }

func (m *FloatParams) GetArray() []float32 {
	if m != nil {
		return m.Array
	}
	return nil
}

type StringParams struct {
	Array []string `protobuf:"bytes,1,rep,name=array" json:"array,omitempty"`
}

func (m *StringParams) Reset()                    { *m = StringParams{} }
func (m *StringParams) String() string            { return proto.CompactTextString(m) }
func (*StringParams) ProtoMessage()               {}
func (*StringParams) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{3} }

func (m *StringParams) GetArray() []string {
	if m != nil {
		return m.Array
	}
	return nil
}

type Params struct {
	Ints    map[string]*IntParams    `protobuf:"bytes,1,rep,name=ints" json:"ints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Floats  map[string]*FloatParams  `protobuf:"bytes,2,rep,name=floats" json:"floats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Strings map[string]*StringParams `protobuf:"bytes,3,rep,name=strings" json:"strings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{4} }

func (m *Params) GetInts() map[string]*IntParams {
	if m != nil {
		return m.Ints
	}
	return nil
}

func (m *Params) GetFloats() map[string]*FloatParams {
	if m != nil {
		return m.Floats
	}
	return nil
}

func (m *Params) GetStrings() map[string]*StringParams {
	if m != nil {
		return m.Strings
	}
	return nil
}

type Reference struct {
	CollID  uint32 `protobuf:"varint,1,opt,name=collID,proto3" json:"collID,omitempty"`
	EntryID uint32 `protobuf:"varint,2,opt,name=entryID,proto3" json:"entryID,omitempty"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (m *Reference) String() string            { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{5} }

func (m *Reference) GetCollID() uint32 {
	if m != nil {
		return m.CollID
	}
	return 0
}

func (m *Reference) GetEntryID() uint32 {
	if m != nil {
		return m.EntryID
	}
	return 0
}

func init() {
	proto.RegisterType((*EventHeader)(nil), "proio.model.EventHeader")
	proto.RegisterType((*EventHeader_CollectionHeader)(nil), "proio.model.EventHeader.CollectionHeader")
	proto.RegisterType((*IntParams)(nil), "proio.model.IntParams")
	proto.RegisterType((*FloatParams)(nil), "proio.model.FloatParams")
	proto.RegisterType((*StringParams)(nil), "proio.model.StringParams")
	proto.RegisterType((*Params)(nil), "proio.model.Params")
	proto.RegisterType((*Reference)(nil), "proio.model.Reference")
}
func (m *EventHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Version))
	}
	if m.RunNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.RunNumber))
	}
	if m.EventNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.EventNumber))
	}
	if m.TimeStamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.TimeStamp))
	}
	if len(m.Detector) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Detector)))
		i += copy(dAtA[i:], m.Detector)
	}
	if m.Params != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Params.Size()))
		n1, err := m.Params.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.PayloadCollections) > 0 {
		for _, msg := range m.PayloadCollections {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintProio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NUniqueIDs != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NUniqueIDs))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *EventHeader_CollectionHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHeader_CollectionHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Id))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.PayloadSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.PayloadSize))
	}
	return i, nil
}

func (m *IntParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Array) > 0 {
		dAtA3 := make([]byte, len(m.Array)*10)
		var j2 int
		for _, num1 := range m.Array {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProio(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *FloatParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FloatParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Array) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Array)*4))
		for _, num := range m.Array {
			f4 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f4))
			i += 4
		}
	}
	return i, nil
}

func (m *StringParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Array) > 0 {
		for _, s := range m.Array {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ints) > 0 {
		for k, _ := range m.Ints {
			dAtA[i] = 0xa
			i++
			v := m.Ints[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + msgSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if len(m.Floats) > 0 {
		for k, _ := range m.Floats {
			dAtA[i] = 0x12
			i++
			v := m.Floats[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + msgSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if len(m.Strings) > 0 {
		for k, _ := range m.Strings {
			dAtA[i] = 0x1a
			i++
			v := m.Strings[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovProio(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + msgSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	return i, nil
}

func (m *Reference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CollID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.CollID))
	}
	if m.EntryID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.EntryID))
	}
	return i, nil
}

func encodeVarintProio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventHeader) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovProio(uint64(m.Version))
	}
	if m.RunNumber != 0 {
		n += 1 + sovProio(uint64(m.RunNumber))
	}
	if m.EventNumber != 0 {
		n += 1 + sovProio(uint64(m.EventNumber))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovProio(uint64(m.TimeStamp))
	}
	l = len(m.Detector)
	if l > 0 {
		n += 1 + l + sovProio(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovProio(uint64(l))
	}
	if len(m.PayloadCollections) > 0 {
		for _, e := range m.PayloadCollections {
			l = e.Size()
			n += 1 + l + sovProio(uint64(l))
		}
	}
	if m.NUniqueIDs != 0 {
		n += 1 + sovProio(uint64(m.NUniqueIDs))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovProio(uint64(l))
	}
	return n
}

func (m *EventHeader_CollectionHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProio(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovProio(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovProio(uint64(l))
	}
	if m.PayloadSize != 0 {
		n += 1 + sovProio(uint64(m.PayloadSize))
	}
	return n
}

func (m *IntParams) Size() (n int) {
	var l int
	_ = l
	if len(m.Array) > 0 {
		l = 0
		for _, e := range m.Array {
			l += sovProio(uint64(e))
		}
		n += 1 + sovProio(uint64(l)) + l
	}
	return n
}

func (m *FloatParams) Size() (n int) {
	var l int
	_ = l
	if len(m.Array) > 0 {
		n += 1 + sovProio(uint64(len(m.Array)*4)) + len(m.Array)*4
	}
	return n
}

func (m *StringParams) Size() (n int) {
	var l int
	_ = l
	if len(m.Array) > 0 {
		for _, s := range m.Array {
			l = len(s)
			n += 1 + l + sovProio(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	var l int
	_ = l
	if len(m.Ints) > 0 {
		for k, v := range m.Ints {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if len(m.Floats) > 0 {
		for k, v := range m.Floats {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if len(m.Strings) > 0 {
		for k, v := range m.Strings {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProio(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Reference) Size() (n int) {
	var l int
	_ = l
	if m.CollID != 0 {
		n += 1 + sovProio(uint64(m.CollID))
	}
	if m.EntryID != 0 {
		n += 1 + sovProio(uint64(m.EntryID))
	}
	return n
}

func sovProio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProio(x uint64) (n int) {
	return sovProio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunNumber", wireType)
			}
			m.RunNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNumber", wireType)
			}
			m.EventNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadCollections = append(m.PayloadCollections, &EventHeader_CollectionHeader{})
			if err := m.PayloadCollections[len(m.PayloadCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NUniqueIDs", wireType)
			}
			m.NUniqueIDs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NUniqueIDs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventHeader_CollectionHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			m.PayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Array = append(m.Array, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Array = append(m.Array, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Array", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FloatParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FloatParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FloatParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Array = append(m.Array, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProio
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Array = append(m.Array, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Array", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Array", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Array = append(m.Array, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ints == nil {
				m.Ints = make(map[string]*IntParams)
			}
			var mapkey string
			var mapvalue *IntParams
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &IntParams{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ints[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Floats == nil {
				m.Floats = make(map[string]*FloatParams)
			}
			var mapkey string
			var mapvalue *FloatParams
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FloatParams{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Floats[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Strings == nil {
				m.Strings = make(map[string]*StringParams)
			}
			var mapkey string
			var mapvalue *StringParams
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthProio
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StringParams{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Strings[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollID", wireType)
			}
			m.CollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryID", wireType)
			}
			m.EntryID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proio/model/proio.proto", fileDescriptorProio) }

var fileDescriptorProio = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x71, 0x92, 0xd6, 0x63, 0x8a, 0xaa, 0x05, 0x95, 0x25, 0x82, 0x60, 0x02, 0x87, 0x20,
	0xa8, 0x23, 0xc2, 0x01, 0x54, 0x89, 0x4b, 0x69, 0x11, 0x39, 0x14, 0xd0, 0x46, 0x3d, 0xc0, 0xcd,
	0xb1, 0xa7, 0x65, 0x85, 0xbd, 0x6b, 0xd6, 0x9b, 0x4a, 0xe1, 0x4b, 0xf8, 0x09, 0xfe, 0x83, 0x23,
	0x57, 0x6e, 0xa8, 0xfc, 0x08, 0xf2, 0x7a, 0xd3, 0xda, 0xc8, 0xbd, 0xed, 0xcc, 0xbc, 0xf7, 0x66,
	0xf6, 0x8d, 0xbd, 0x70, 0x3b, 0x57, 0x92, 0xcb, 0x49, 0x26, 0x13, 0x4c, 0x27, 0xe6, 0x1c, 0xe6,
	0x4a, 0x6a, 0x49, 0xfc, 0x2a, 0x30, 0x85, 0xd1, 0x6f, 0x17, 0xfc, 0xc3, 0x33, 0x14, 0xfa, 0x2d,
	0x46, 0x09, 0x2a, 0x42, 0x61, 0xe3, 0x0c, 0x55, 0xc1, 0xa5, 0xa0, 0x4e, 0xe0, 0x8c, 0xb7, 0xd8,
	0x3a, 0x24, 0x77, 0xc1, 0x53, 0x4b, 0xf1, 0x6e, 0x99, 0x2d, 0x50, 0xd1, 0x4e, 0xe0, 0x8c, 0xbb,
	0xec, 0x32, 0x41, 0x02, 0xf0, 0xb1, 0x94, 0xb1, 0x75, 0xd7, 0xd4, 0xeb, 0xa9, 0x92, 0xaf, 0x79,
	0x86, 0x73, 0x1d, 0x65, 0x39, 0xed, 0x56, 0xfc, 0x8b, 0x04, 0x19, 0xc0, 0x66, 0x82, 0x1a, 0x63,
	0x2d, 0x15, 0xed, 0x05, 0xce, 0xd8, 0x63, 0x17, 0x31, 0x79, 0x02, 0xfd, 0x3c, 0x52, 0x51, 0x56,
	0xd0, 0x7e, 0xe0, 0x8c, 0xfd, 0xe9, 0xcd, 0xb0, 0x76, 0x83, 0xf0, 0x83, 0x29, 0x31, 0x0b, 0x21,
	0x1f, 0x81, 0xe4, 0xd1, 0x2a, 0x95, 0x51, 0xf2, 0x5a, 0xa6, 0x29, 0xc6, 0x9a, 0x4b, 0x51, 0xd0,
	0x8d, 0xc0, 0x1d, 0xfb, 0xd3, 0xc7, 0x0d, 0x62, 0xed, 0xda, 0xe1, 0x25, 0xb6, 0x4a, 0xb0, 0x16,
	0x11, 0x32, 0x04, 0x10, 0xc7, 0x82, 0x7f, 0x5d, 0xe2, 0xec, 0xa0, 0xa0, 0x9b, 0xc6, 0x9e, 0x5a,
	0xa6, 0xf4, 0x20, 0xc1, 0x22, 0x56, 0x3c, 0x2f, 0xf1, 0x74, 0xdb, 0x5c, 0xa3, 0x9e, 0x1a, 0xa4,
	0xb0, 0xfd, 0x7f, 0x27, 0x42, 0xa0, 0x2b, 0xa2, 0x0c, 0x8d, 0xdd, 0x1e, 0x33, 0x67, 0x72, 0x03,
	0x3a, 0x3c, 0x31, 0x26, 0x6f, 0xb1, 0x0e, 0x4f, 0x4a, 0x8c, 0x5e, 0xe5, 0x68, 0x6c, 0xf5, 0x98,
	0x39, 0x97, 0xdd, 0xec, 0x8c, 0x73, 0xfe, 0x0d, 0x8d, 0xa3, 0x5b, 0xac, 0x9e, 0x1a, 0x3d, 0x00,
	0x6f, 0x26, 0x74, 0xe5, 0x0f, 0xb9, 0x05, 0xbd, 0x48, 0xa9, 0x68, 0x45, 0x9d, 0xc0, 0x1d, 0xf7,
	0x58, 0x15, 0x8c, 0x1e, 0x82, 0xff, 0x26, 0x95, 0x51, 0x2b, 0xa8, 0xb3, 0x06, 0x3d, 0x82, 0xeb,
	0x73, 0xad, 0xb8, 0x38, 0x6d, 0x43, 0x79, 0x6b, 0xd4, 0x0f, 0x17, 0xfa, 0x16, 0xf0, 0x0c, 0xba,
	0x5c, 0xe8, 0xc2, 0xd4, 0xfd, 0xe9, 0xbd, 0x96, 0x75, 0x85, 0x33, 0xa1, 0x8b, 0x43, 0xa1, 0xd5,
	0x8a, 0x19, 0x28, 0x79, 0x01, 0xfd, 0x93, 0x72, 0x90, 0x82, 0x76, 0x0c, 0xe9, 0x7e, 0x1b, 0xc9,
	0x8c, 0x6a, 0x69, 0x16, 0x4e, 0xf6, 0x60, 0xa3, 0x30, 0xc3, 0x15, 0xd4, 0x35, 0xcc, 0xa0, 0x8d,
	0x59, 0xcd, 0x6f, 0xa9, 0x6b, 0xc2, 0xe0, 0xbd, 0x31, 0xa8, 0xca, 0x92, 0x6d, 0x70, 0xbf, 0xe0,
	0xca, 0xae, 0xa1, 0x3c, 0x92, 0xa7, 0xd0, 0x3b, 0x8b, 0xd2, 0x25, 0x9a, 0x45, 0xf8, 0xd3, 0x9d,
	0x86, 0xf0, 0x85, 0xb3, 0xac, 0x02, 0xed, 0x75, 0x5e, 0x3a, 0x83, 0xb9, 0xb5, 0xf3, 0x4a, 0xc9,
	0xb0, 0x29, 0x49, 0x1b, 0x92, 0xb5, 0x4d, 0xd4, 0x45, 0x8f, 0xd7, 0xf6, 0x5f, 0xa9, 0x3a, 0x69,
	0xaa, 0xde, 0x69, 0xa8, 0xd6, 0x57, 0x57, 0x93, 0x1d, 0xbd, 0x02, 0x8f, 0xe1, 0x09, 0x2a, 0x14,
	0x31, 0x92, 0x1d, 0xe8, 0xc7, 0x32, 0x4d, 0x67, 0x07, 0xf6, 0xaf, 0xb7, 0x51, 0xf9, 0x1c, 0x60,
	0xd9, 0x74, 0x76, 0x60, 0xbf, 0xc6, 0x75, 0xb8, 0x7f, 0xf4, 0xf3, 0x7c, 0xe8, 0xfc, 0x3a, 0x1f,
	0x3a, 0x7f, 0xce, 0x87, 0xce, 0xf7, 0xbf, 0xc3, 0x6b, 0xd0, 0x33, 0x5d, 0xf7, 0x7b, 0x47, 0x65,
	0xdb, 0x4f, 0xbb, 0xa7, 0x5c, 0x7f, 0x5e, 0x2e, 0xc2, 0x58, 0x66, 0x93, 0x04, 0x63, 0xbe, 0xc0,
	0x34, 0x96, 0x32, 0x47, 0x55, 0xbd, 0x45, 0x93, 0x53, 0xb9, 0x5b, 0x7b, 0xa0, 0x16, 0x7d, 0xf3,
	0x36, 0x3d, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x5f, 0x24, 0x3e, 0xb6, 0x04, 0x00, 0x00,
}

// Extra generated functions for compliance with Message and Collection interfaces
