// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/proio.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		proto/proio.proto

	It has these top-level messages:
		EventHeader
		CollectionProto
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type EventHeader struct {
	RunNumber          uint64                          `protobuf:"varint,1,opt,name=runNumber,proto3" json:"runNumber,omitempty"`
	EventNumber        uint64                          `protobuf:"varint,2,opt,name=eventNumber,proto3" json:"eventNumber,omitempty"`
	TimeStamp          uint64                          `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	NUniqueCollIDs     uint32                          `protobuf:"varint,4,opt,name=nUniqueCollIDs,proto3" json:"nUniqueCollIDs,omitempty"`
	PayloadCollections []*EventHeader_CollectionHeader `protobuf:"bytes,5,rep,name=payloadCollections" json:"payloadCollections,omitempty"`
	AuxData            map[string][]byte               `protobuf:"bytes,6,rep,name=auxData" json:"auxData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EventHeader) Reset()                    { *m = EventHeader{} }
func (m *EventHeader) String() string            { return proto1.CompactTextString(m) }
func (*EventHeader) ProtoMessage()               {}
func (*EventHeader) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{0} }

func (m *EventHeader) GetRunNumber() uint64 {
	if m != nil {
		return m.RunNumber
	}
	return 0
}

func (m *EventHeader) GetEventNumber() uint64 {
	if m != nil {
		return m.EventNumber
	}
	return 0
}

func (m *EventHeader) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *EventHeader) GetNUniqueCollIDs() uint32 {
	if m != nil {
		return m.NUniqueCollIDs
	}
	return 0
}

func (m *EventHeader) GetPayloadCollections() []*EventHeader_CollectionHeader {
	if m != nil {
		return m.PayloadCollections
	}
	return nil
}

func (m *EventHeader) GetAuxData() map[string][]byte {
	if m != nil {
		return m.AuxData
	}
	return nil
}

type EventHeader_CollectionHeader struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EntryType   string `protobuf:"bytes,2,opt,name=entryType,proto3" json:"entryType,omitempty"`
	Id          uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	PayloadSize uint32 `protobuf:"varint,4,opt,name=payloadSize,proto3" json:"payloadSize,omitempty"`
}

func (m *EventHeader_CollectionHeader) Reset()         { *m = EventHeader_CollectionHeader{} }
func (m *EventHeader_CollectionHeader) String() string { return proto1.CompactTextString(m) }
func (*EventHeader_CollectionHeader) ProtoMessage()    {}
func (*EventHeader_CollectionHeader) Descriptor() ([]byte, []int) {
	return fileDescriptorProio, []int{0, 0}
}

func (m *EventHeader_CollectionHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventHeader_CollectionHeader) GetEntryType() string {
	if m != nil {
		return m.EntryType
	}
	return ""
}

func (m *EventHeader_CollectionHeader) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventHeader_CollectionHeader) GetPayloadSize() uint32 {
	if m != nil {
		return m.PayloadSize
	}
	return 0
}

type CollectionProto struct {
	NUniqueEntryIDs uint32            `protobuf:"varint,1,opt,name=nUniqueEntryIDs,proto3" json:"nUniqueEntryIDs,omitempty"`
	Entries         map[uint32][]byte `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AuxData         map[string][]byte `protobuf:"bytes,3,rep,name=auxData" json:"auxData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CollectionProto) Reset()                    { *m = CollectionProto{} }
func (m *CollectionProto) String() string            { return proto1.CompactTextString(m) }
func (*CollectionProto) ProtoMessage()               {}
func (*CollectionProto) Descriptor() ([]byte, []int) { return fileDescriptorProio, []int{1} }

func (m *CollectionProto) GetNUniqueEntryIDs() uint32 {
	if m != nil {
		return m.NUniqueEntryIDs
	}
	return 0
}

func (m *CollectionProto) GetEntries() map[uint32][]byte {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *CollectionProto) GetAuxData() map[string][]byte {
	if m != nil {
		return m.AuxData
	}
	return nil
}

func init() {
	proto1.RegisterType((*EventHeader)(nil), "proio.proto.EventHeader")
	proto1.RegisterType((*EventHeader_CollectionHeader)(nil), "proio.proto.EventHeader.CollectionHeader")
	proto1.RegisterType((*CollectionProto)(nil), "proio.proto.CollectionProto")
}
func (m *EventHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RunNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.RunNumber))
	}
	if m.EventNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.EventNumber))
	}
	if m.TimeStamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.TimeStamp))
	}
	if m.NUniqueCollIDs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NUniqueCollIDs))
	}
	if len(m.PayloadCollections) > 0 {
		for _, msg := range m.PayloadCollections {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintProio(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AuxData) > 0 {
		for k, _ := range m.AuxData {
			dAtA[i] = 0x32
			i++
			v := m.AuxData[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + byteSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func (m *EventHeader_CollectionHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHeader_CollectionHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.EntryType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProio(dAtA, i, uint64(len(m.EntryType)))
		i += copy(dAtA[i:], m.EntryType)
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.Id))
	}
	if m.PayloadSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.PayloadSize))
	}
	return i, nil
}

func (m *CollectionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NUniqueEntryIDs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProio(dAtA, i, uint64(m.NUniqueEntryIDs))
	}
	if len(m.Entries) > 0 {
		for k, _ := range m.Entries {
			dAtA[i] = 0x12
			i++
			v := m.Entries[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapSize := 1 + sovProio(uint64(k)) + byteSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintProio(dAtA, i, uint64(k))
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	if len(m.AuxData) > 0 {
		for k, _ := range m.AuxData {
			dAtA[i] = 0x1a
			i++
			v := m.AuxData[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovProio(uint64(len(k))) + byteSize
			i = encodeVarintProio(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProio(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProio(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func encodeVarintProio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventHeader) Size() (n int) {
	var l int
	_ = l
	if m.RunNumber != 0 {
		n += 1 + sovProio(uint64(m.RunNumber))
	}
	if m.EventNumber != 0 {
		n += 1 + sovProio(uint64(m.EventNumber))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovProio(uint64(m.TimeStamp))
	}
	if m.NUniqueCollIDs != 0 {
		n += 1 + sovProio(uint64(m.NUniqueCollIDs))
	}
	if len(m.PayloadCollections) > 0 {
		for _, e := range m.PayloadCollections {
			l = e.Size()
			n += 1 + l + sovProio(uint64(l))
		}
	}
	if len(m.AuxData) > 0 {
		for k, v := range m.AuxData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EventHeader_CollectionHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProio(uint64(l))
	}
	l = len(m.EntryType)
	if l > 0 {
		n += 1 + l + sovProio(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovProio(uint64(m.Id))
	}
	if m.PayloadSize != 0 {
		n += 1 + sovProio(uint64(m.PayloadSize))
	}
	return n
}

func (m *CollectionProto) Size() (n int) {
	var l int
	_ = l
	if m.NUniqueEntryIDs != 0 {
		n += 1 + sovProio(uint64(m.NUniqueEntryIDs))
	}
	if len(m.Entries) > 0 {
		for k, v := range m.Entries {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapEntrySize := 1 + sovProio(uint64(k)) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	if len(m.AuxData) > 0 {
		for k, v := range m.AuxData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovProio(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovProio(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProio(uint64(mapEntrySize))
		}
	}
	return n
}

func sovProio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProio(x uint64) (n int) {
	return sovProio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunNumber", wireType)
			}
			m.RunNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNumber", wireType)
			}
			m.EventNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NUniqueCollIDs", wireType)
			}
			m.NUniqueCollIDs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NUniqueCollIDs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadCollections = append(m.PayloadCollections, &EventHeader_CollectionHeader{})
			if err := m.PayloadCollections[len(m.PayloadCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuxData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuxData == nil {
				m.AuxData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthProio
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AuxData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventHeader_CollectionHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			m.PayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NUniqueEntryIDs", wireType)
			}
			m.NUniqueEntryIDs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NUniqueEntryIDs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = make(map[uint32][]byte)
			}
			var mapkey uint32
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthProio
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Entries[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuxData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProio
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuxData == nil {
				m.AuxData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProio
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProio
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProio
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthProio
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProio(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProio
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AuxData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("proto/proio.proto", fileDescriptorProio) }

var fileDescriptorProio = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x71, 0xd2, 0x6e, 0xea, 0x6b, 0xbb, 0x0d, 0x8b, 0x43, 0x34, 0xa1, 0xaa, 0x9a, 0x04,
	0x0a, 0x87, 0xa5, 0x12, 0x5c, 0x50, 0x2f, 0x88, 0x6d, 0x95, 0xe0, 0x00, 0x42, 0x1e, 0x1c, 0xe0,
	0xe6, 0x24, 0x4f, 0xc3, 0x22, 0x89, 0x43, 0xea, 0x54, 0x84, 0x4f, 0xc2, 0x97, 0xe1, 0xce, 0x91,
	0x8f, 0x80, 0xba, 0x2f, 0x82, 0x6c, 0x67, 0xc4, 0x8a, 0x8a, 0x40, 0xda, 0xa9, 0xcf, 0x7f, 0xbf,
	0xf7, 0x7f, 0xff, 0xfe, 0xdc, 0xc2, 0xdd, 0xb2, 0x92, 0x4a, 0x2e, 0xca, 0x4a, 0x0a, 0x19, 0x99,
	0x9a, 0x8e, 0x9d, 0xc3, 0xc9, 0xb5, 0x0f, 0xe3, 0xd5, 0x06, 0x0b, 0xf5, 0x02, 0x79, 0x8a, 0x15,
	0xbd, 0x0f, 0xa3, 0xaa, 0x2e, 0x5e, 0xd7, 0x79, 0x8c, 0x55, 0x40, 0xe6, 0x24, 0x1c, 0xb0, 0x4e,
	0xa0, 0x73, 0x18, 0xa3, 0x6e, 0x6e, 0xef, 0x3d, 0x73, 0xef, 0x4a, 0x7a, 0x5e, 0x89, 0x1c, 0x2f,
	0x15, 0xcf, 0xcb, 0xc0, 0xb7, 0xf3, 0x7f, 0x04, 0xfa, 0x10, 0x0e, 0x8a, 0x77, 0x85, 0xf8, 0x5c,
	0xe3, 0xb9, 0xcc, 0xb2, 0x97, 0x17, 0xeb, 0x60, 0x30, 0x27, 0xe1, 0x94, 0xf5, 0x54, 0xfa, 0x1e,
	0x68, 0xc9, 0x9b, 0x4c, 0xf2, 0x54, 0x2b, 0x98, 0x28, 0x21, 0x8b, 0x75, 0x30, 0x9c, 0xfb, 0xe1,
	0xf8, 0xf1, 0xa3, 0xc8, 0xc9, 0x1f, 0x39, 0xd9, 0xa3, 0xae, 0xd7, 0x0a, 0x6c, 0x87, 0x09, 0x7d,
	0x06, 0xfb, 0xbc, 0xfe, 0x72, 0xc1, 0x15, 0x0f, 0xf6, 0x8c, 0xdf, 0x83, 0xbf, 0xfa, 0x3d, 0xb7,
	0x7d, 0xab, 0x42, 0x55, 0x0d, 0xbb, 0x99, 0x3a, 0xde, 0xc0, 0x51, 0x7f, 0x11, 0xa5, 0x30, 0x28,
	0x78, 0x8e, 0x06, 0xd8, 0x88, 0x99, 0x5a, 0x93, 0x40, 0x3d, 0xf9, 0xb6, 0x29, 0xd1, 0x90, 0x1a,
	0xb1, 0x4e, 0xa0, 0x07, 0xe0, 0x89, 0xd4, 0x00, 0x9a, 0x32, 0x4f, 0xa4, 0x9a, 0x6c, 0x1b, 0xf6,
	0x52, 0x7c, 0xc5, 0x16, 0x8b, 0x2b, 0x1d, 0x2f, 0x61, 0xe2, 0x06, 0xa2, 0x47, 0xe0, 0x7f, 0xc2,
	0xa6, 0x5d, 0xa9, 0x4b, 0x7a, 0x0f, 0x86, 0x1b, 0x9e, 0xd5, 0x76, 0xdb, 0x84, 0xd9, 0xc3, 0xd2,
	0x7b, 0x4a, 0x4e, 0xbe, 0x7b, 0x70, 0xd8, 0x85, 0x7e, 0x63, 0x7e, 0x06, 0x21, 0x1c, 0xb6, 0xd4,
	0x8d, 0x9f, 0x7e, 0x0c, 0x62, 0xb6, 0xf6, 0x65, 0x7a, 0x0e, 0xfb, 0x3a, 0xb8, 0xc0, 0x75, 0xe0,
	0xed, 0x78, 0x82, 0x9e, 0x71, 0xb4, 0xb2, 0xbd, 0x2d, 0xb6, 0x76, 0x52, 0x9b, 0xdc, 0x70, 0xf7,
	0xff, 0xc3, 0x64, 0x37, 0xfb, 0x25, 0x4c, 0x5c, 0x77, 0x97, 0xc1, 0xf4, 0x1f, 0x0c, 0x6e, 0xc3,
	0xef, 0xec, 0xd5, 0x8f, 0xed, 0x8c, 0xfc, 0xdc, 0xce, 0xc8, 0xaf, 0xed, 0x8c, 0x7c, 0xbb, 0x9e,
	0xdd, 0x81, 0xa1, 0x09, 0x7f, 0x36, 0x34, 0x69, 0x3f, 0x9c, 0x5e, 0x09, 0xf5, 0xb1, 0x8e, 0xa3,
	0x44, 0xe6, 0x8b, 0x14, 0x13, 0x11, 0x63, 0x96, 0x48, 0x59, 0x62, 0x65, 0xff, 0x78, 0x8b, 0x2b,
	0x79, 0x6a, 0x0b, 0xf3, 0x65, 0xe3, 0x3d, 0xf3, 0xf1, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe1, 0x19, 0x52, 0x97, 0x9d, 0x03, 0x00, 0x00,
}
